input {
  beats {
    port => 5044
  }
}

filter {

  # Enterprise Zone 
  if [fields][type] == "enterprise_logs" {
    grok {
      match => {
        "message" => '%{IPORHOST:clientip} - - \[%{HTTPDATE:timestamp}\] "%{WORD:method} %{URIPATHPARAM:request} HTTP/%{NUMBER:http_version}" %{NUMBER:status} %{NUMBER:bytes}'
      }
      tag_on_failure => ["_grokparsefailure_enterprise"]
    }
    date {
      match => ["timestamp", "dd/MMM/yyyy:HH:mm:ss Z"]
      remove_field => ["timestamp"]
    }
  }

  # IDMZ Zone
  else if [fields][type] == "idmz_logs" {
    grok {
      match => {
        "message" => "%{TIMESTAMP_ISO8601:timestamp} %{LOGLEVEL:level} %{GREEDYDATA:msg}"
      }
      tag_on_failure => ["_grokparsefailure_idmz"]
    }
    date {
      match => ["timestamp", "ISO8601"]
      remove_field => ["timestamp"]
    }
  }

  # Assembly Enclave
  else if [fields][type] == "assembly_logs" {
    grok {
      match => {
        "message" => "%{TIMESTAMP_ISO8601:timestamp} \[%{LOGLEVEL:level}\] %{GREEDYDATA:msg}"
      }
      tag_on_failure => ["_grokparsefailure_assembly"]
    }
    date {
      match => ["timestamp", "ISO8601"]
      remove_field => ["timestamp"]
    }
  }

  # Utilities Enclave
  else if [fields][type] == "utilities_logs" {
    grok {
      match => {
        "message" => "%{MONTHDAY:day}-%{MONTH:month}-%{YEAR:year} %{TIME:time} %{LOGLEVEL:level} \[%{DATA:thread}\] %{JAVACLASS:class} %{GREEDYDATA:msg}"
      }
      tag_on_failure => ["_grokparsefailure_utilities"]
    }
    mutate {
      add_field => { "timestamp_combined" => "%{day}-%{month}-%{year} %{time}" }
    }
    date {
      match => ["timestamp_combined", "dd-MMM-yyyy HH:mm:ss.SSS"]
      target => "@timestamp"
      remove_field => ["timestamp_combined", "day", "month", "year", "time"]
    }
  }

  # Packaging Enclave
  else if [fields][type] == "packaging_logs" {
    grok {
      match => {
        "message" => "%{TIMESTAMP_ISO8601:timestamp} \[%{LOGLEVEL:level}\] %{GREEDYDATA:msg}"
      }
      tag_on_failure => ["_grokparsefailure_packaging"]
    }
    date {
      match => ["timestamp", "ISO8601"]
      remove_field => ["timestamp"]
    }
  }

  # Site Operations
  else if [fields][type] == "site_ops_logs" {
    grok {
      match => {
        "message" => "%{TIMESTAMP_ISO8601:timestamp} \[%{LOGLEVEL:level}\] %{GREEDYDATA:msg}"
      }
      tag_on_failure => ["_grokparsefailure_site_ops"]
    }
    date {
      match => ["timestamp", "ISO8601"]
      remove_field => ["timestamp"]
    }
  }

  # Catching all parse errors
  if "_grokparsefailure" in [tags] {
    mutate {
      add_tag => ["parse_error"]
    }
  }
}

output {
  if [fields][type] == "enterprise_logs" {
    elasticsearch {
      hosts => ["http://elasticsearch:9200"]
      index => "enterprise-logs-%{+YYYY.MM.dd}"
    }
  } else if [fields][type] == "idmz_logs" {
    elasticsearch {
      hosts => ["http://elasticsearch:9200"]
      index => "idmz-logs-%{+YYYY.MM.dd}"
    }
  } else if [fields][type] == "assembly_logs" {
    elasticsearch {
      hosts => ["http://elasticsearch:9200"]
      index => "assembly-logs-%{+YYYY.MM.dd}"
    }
  } else if [fields][type] == "utilities_logs" {
    elasticsearch {
      hosts => ["http://elasticsearch:9200"]
      index => "utilities-logs-%{+YYYY.MM.dd}"
    }
  } else if [fields][type] == "packaging_logs" {
    elasticsearch {
      hosts => ["http://elasticsearch:9200"]
      index => "packaging-logs-%{+YYYY.MM.dd}"
    }
  } else if [fields][type] == "site_ops_logs" {
    elasticsearch {
      hosts => ["http://elasticsearch:9200"]
      index => "siteops-logs-%{+YYYY.MM.dd}"
    }
  } else {
    elasticsearch {
      hosts => ["http://elasticsearch:9200"]
      index => "generic-logs-%{+YYYY.MM.dd}"
    }
  }

  stdout {
    codec => rubydebug
  }
}