{"version":3,"file":"989.js","mappings":"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","sources":["webpack://grafana-exploretraces-app/./utils/analytics.ts","webpack://grafana-exploretraces-app/../node_modules/moment/locale/ sync ^\\.\\/.*$","webpack://grafana-exploretraces-app/./components/states/EmptyState/useMousePosition.ts","webpack://grafana-exploretraces-app/./components/states/EmptyState/GrotNotFound.tsx","webpack://grafana-exploretraces-app/./components/states/EmptyState/EmptyState.tsx","webpack://grafana-exploretraces-app/./utils/testIds.ts","webpack://grafana-exploretraces-app/./components/states/EmptyState/EmptyStateScene.tsx","webpack://grafana-exploretraces-app/./components/states/LoadingState/LoadingStateScene.tsx","webpack://grafana-exploretraces-app/./components/states/ErrorState/ErrorStateScene.tsx","webpack://grafana-exploretraces-app/./components/Explore/Search.tsx","webpack://grafana-exploretraces-app/./components/Explore/ByFrameRepeater.tsx","webpack://grafana-exploretraces-app/./utils/frames.ts","webpack://grafana-exploretraces-app/./components/Explore/panels/barsPanel.ts","webpack://grafana-exploretraces-app/./components/Explore/queries/generateMetricsQuery.ts","webpack://grafana-exploretraces-app/./utils/dates.ts","webpack://grafana-exploretraces-app/./components/Explore/queries/StepQueryRunner.ts","webpack://grafana-exploretraces-app/./components/Explore/panels/histogram.ts","webpack://grafana-exploretraces-app/./pages/Explore/primary-signals.ts","webpack://grafana-exploretraces-app/./components/Explore/actions/AddToFiltersAction.tsx","webpack://grafana-exploretraces-app/./utils/comparison.ts","webpack://grafana-exploretraces-app/./components/Explore/layouts/HighestDifferencePanel.tsx","webpack://grafana-exploretraces-app/./components/Explore/layouts/allComparison.ts","webpack://grafana-exploretraces-app/./components/Explore/queries/histogram.ts","webpack://grafana-exploretraces-app/./components/Explore/TracesByService/DurationComparisonControl.tsx","webpack://grafana-exploretraces-app/./utils/exemplars.ts","webpack://grafana-exploretraces-app/./components/Explore/TracesByService/REDPanel.tsx","webpack://grafana-exploretraces-app/./components/Explore/actions/ShareExplorationAction.tsx","webpack://grafana-exploretraces-app/./components/Explore/TracesByService/Tabs/Spans/SpanListColumnsSelector.tsx","webpack://grafana-exploretraces-app/./components/Explore/TracesByService/Tabs/Spans/SpanListScene.tsx","webpack://grafana-exploretraces-app/./components/Explore/TracesByService/Tabs/Spans/SpansScene.tsx","webpack://grafana-exploretraces-app/./utils/trace-merge/utils.ts","webpack://grafana-exploretraces-app/./utils/trace-merge/tree-node.ts","webpack://grafana-exploretraces-app/./utils/trace-merge/merge.ts","webpack://grafana-exploretraces-app/./components/Explore/TracesByService/Tabs/Structure/StructureScene.tsx","webpack://grafana-exploretraces-app/./components/Explore/GroupBySelector.tsx","webpack://grafana-exploretraces-app/./components/Explore/LayoutSwitcher.tsx","webpack://grafana-exploretraces-app/./components/Explore/panels/linesPanel.ts","webpack://grafana-exploretraces-app/./components/Explore/actions/AddToInvestigationButton.tsx","webpack://grafana-exploretraces-app/./components/Explore/panels/PanelMenu.tsx","webpack://grafana-exploretraces-app/./components/Explore/layouts/attributeBreakdown.ts","webpack://grafana-exploretraces-app/./components/Explore/behaviors/syncYaxis.tsx","webpack://grafana-exploretraces-app/./components/Explore/TracesByService/Tabs/Breakdown/AttributesDescription.tsx","webpack://grafana-exploretraces-app/./components/Explore/TracesByService/Tabs/Breakdown/AttributesBreakdownScene.tsx","webpack://grafana-exploretraces-app/./components/Explore/TracesByService/Tabs/Breakdown/BreakdownScene.tsx","webpack://grafana-exploretraces-app/./components/Explore/queries/comparisonQuery.ts","webpack://grafana-exploretraces-app/./components/Explore/layouts/attributeComparison.ts","webpack://grafana-exploretraces-app/./components/Explore/actions/InspectAttributeAction.tsx","webpack://grafana-exploretraces-app/./components/Explore/TracesByService/Tabs/Comparison/AttributesComparisonScene.tsx","webpack://grafana-exploretraces-app/./components/Explore/TracesByService/Tabs/Comparison/ComparisonScene.tsx","webpack://grafana-exploretraces-app/./components/Explore/TracesByService/Tabs/TabsBarScene.tsx","webpack://grafana-exploretraces-app/./components/Explore/TracesByService/MiniREDPanel.tsx","webpack://grafana-exploretraces-app/./components/Explore/TracesByService/TracesByServiceScene.tsx","webpack://grafana-exploretraces-app/./components/Explore/panels/TraceViewPanelScene.tsx","webpack://grafana-exploretraces-app/./components/Explore/TracesByService/TraceDrawerScene.tsx","webpack://grafana-exploretraces-app/./components/Explore/filters/FilterRenderer.tsx","webpack://grafana-exploretraces-app/./components/Explore/filters/AddFilter.tsx","webpack://grafana-exploretraces-app/./components/Explore/filters/PrimarySignalRenderer.tsx","webpack://grafana-exploretraces-app/./components/Explore/filters/MetricSelect.tsx","webpack://grafana-exploretraces-app/./components/Explore/filters/FilterSetRenderer.tsx","webpack://grafana-exploretraces-app/./components/Explore/filters/FilterByVariable.tsx","webpack://grafana-exploretraces-app/./pages/Explore/TraceExploration.tsx","webpack://grafana-exploretraces-app/./components/Home/AttributePanelRow.tsx","webpack://grafana-exploretraces-app/./components/Home/ErroredServicesRows.tsx","webpack://grafana-exploretraces-app/./components/Home/SlowestTracesRows.tsx","webpack://grafana-exploretraces-app/./components/Home/SlowestServicesRows.tsx","webpack://grafana-exploretraces-app/./components/Home/AttributePanelRows.tsx","webpack://grafana-exploretraces-app/./components/Home/AttributePanelScene.tsx","webpack://grafana-exploretraces-app/./components/Home/AttributePanel.tsx","webpack://grafana-exploretraces-app/./utils/rockets.tsx","webpack://grafana-exploretraces-app/./components/Home/HeaderScene.tsx","webpack://grafana-exploretraces-app/./pages/Home/utils.ts","webpack://grafana-exploretraces-app/./pages/Home/Home.tsx","webpack://grafana-exploretraces-app/./utils/utils.ts"],"sourcesContent":["import { reportInteraction } from '@grafana/runtime';\nimport pluginJson from '../plugin.json';\n\n// Helper function to create a unique interaction name for analytics\nconst createInteractionName = (page: UserEventPagesType, action: string) => {\n  return `${pluginJson.id.replace(/-/g, '_')}_${page}_${action}`;\n};\n\n// Runs reportInteraction with a standardized interaction name\nexport const reportAppInteraction = (\n  page: UserEventPagesType,\n  action: UserEventActionType,\n  properties?: Record<string, unknown>\n) => {\n  reportInteraction(createInteractionName(page, action), properties);\n};\n\nexport const USER_EVENTS_PAGES = {\n  analyse_traces: 'analyse_traces',\n  home: 'home',\n  common: 'common',\n} as const;\n\nexport type UserEventPagesType = keyof typeof USER_EVENTS_PAGES;\ntype UserEventActionType =\n  | keyof (typeof USER_EVENTS_ACTIONS)['analyse_traces']\n  | keyof (typeof USER_EVENTS_ACTIONS)['home']\n  | keyof (typeof USER_EVENTS_ACTIONS)['common'];\n\nexport const USER_EVENTS_ACTIONS = {\n  [USER_EVENTS_PAGES.analyse_traces]: {\n    action_view_changed: 'action_view_changed',\n    breakdown_group_by_changed: 'breakdown_group_by_changed',\n    breakdown_add_to_filters_clicked: 'breakdown_add_to_filters_clicked',\n    comparison_add_to_filters_clicked: 'comparison_add_to_filters_clicked',\n    select_attribute_in_comparison_clicked: 'select_attribute_in_comparison_clicked',\n    layout_type_changed: 'layout_type_changed',\n    start_investigation: 'start_investigation',\n    stop_investigation: 'stop_investigation',\n    open_trace: 'open_trace',\n    open_in_explore_clicked: 'open_in_explore_clicked',\n    add_to_investigation_clicked: 'add_to_investigation_clicked',\n    span_list_columns_changed: 'span_list_columns_changed',\n  },\n  [USER_EVENTS_PAGES.home]: {\n    homepage_initialized: 'homepage_initialized',\n    panel_row_clicked: 'panel_row_clicked',\n    explore_traces_clicked: 'explore_traces_clicked',\n    read_documentation_clicked: 'read_documentation_clicked',\n    filter_changed: 'filter_changed',\n  },\n  [USER_EVENTS_PAGES.common]: {\n    metric_changed: 'metric_changed',\n    new_filter_added_manually: 'new_filter_added_manually',\n    app_initialized: 'app_initialized',\n    global_docs_link_clicked: 'global_docs_link_clicked',\n    metric_docs_link_clicked: 'metric_docs_link_clicked',\n    feedback_link_clicked: 'feedback_link_clicked',\n  },\n} as const;\n","var map = {\n\t\"./af\": 9805,\n\t\"./af.js\": 9805,\n\t\"./ar\": 4449,\n\t\"./ar-dz\": 4468,\n\t\"./ar-dz.js\": 4468,\n\t\"./ar-kw\": 3480,\n\t\"./ar-kw.js\": 3480,\n\t\"./ar-ly\": 4197,\n\t\"./ar-ly.js\": 4197,\n\t\"./ar-ma\": 2180,\n\t\"./ar-ma.js\": 2180,\n\t\"./ar-ps\": 9343,\n\t\"./ar-ps.js\": 9343,\n\t\"./ar-sa\": 230,\n\t\"./ar-sa.js\": 230,\n\t\"./ar-tn\": 2808,\n\t\"./ar-tn.js\": 2808,\n\t\"./ar.js\": 4449,\n\t\"./az\": 5865,\n\t\"./az.js\": 5865,\n\t\"./be\": 6627,\n\t\"./be.js\": 6627,\n\t\"./bg\": 901,\n\t\"./bg.js\": 901,\n\t\"./bm\": 3179,\n\t\"./bm.js\": 3179,\n\t\"./bn\": 1966,\n\t\"./bn-bd\": 969,\n\t\"./bn-bd.js\": 969,\n\t\"./bn.js\": 1966,\n\t\"./bo\": 6317,\n\t\"./bo.js\": 6317,\n\t\"./br\": 6474,\n\t\"./br.js\": 6474,\n\t\"./bs\": 5961,\n\t\"./bs.js\": 5961,\n\t\"./ca\": 7270,\n\t\"./ca.js\": 7270,\n\t\"./cs\": 1564,\n\t\"./cs.js\": 1564,\n\t\"./cv\": 3239,\n\t\"./cv.js\": 3239,\n\t\"./cy\": 2366,\n\t\"./cy.js\": 2366,\n\t\"./da\": 2453,\n\t\"./da.js\": 2453,\n\t\"./de\": 6601,\n\t\"./de-at\": 5027,\n\t\"./de-at.js\": 5027,\n\t\"./de-ch\": 8101,\n\t\"./de-ch.js\": 8101,\n\t\"./de.js\": 6601,\n\t\"./dv\": 6080,\n\t\"./dv.js\": 6080,\n\t\"./el\": 2655,\n\t\"./el.js\": 2655,\n\t\"./en-au\": 6836,\n\t\"./en-au.js\": 6836,\n\t\"./en-ca\": 2086,\n\t\"./en-ca.js\": 2086,\n\t\"./en-gb\": 2103,\n\t\"./en-gb.js\": 2103,\n\t\"./en-ie\": 5964,\n\t\"./en-ie.js\": 5964,\n\t\"./en-il\": 4379,\n\t\"./en-il.js\": 4379,\n\t\"./en-in\": 765,\n\t\"./en-in.js\": 765,\n\t\"./en-nz\": 1502,\n\t\"./en-nz.js\": 1502,\n\t\"./en-sg\": 1152,\n\t\"./en-sg.js\": 1152,\n\t\"./eo\": 50,\n\t\"./eo.js\": 50,\n\t\"./es\": 3350,\n\t\"./es-do\": 9338,\n\t\"./es-do.js\": 9338,\n\t\"./es-mx\": 1326,\n\t\"./es-mx.js\": 1326,\n\t\"./es-us\": 9947,\n\t\"./es-us.js\": 9947,\n\t\"./es.js\": 3350,\n\t\"./et\": 8231,\n\t\"./et.js\": 8231,\n\t\"./eu\": 8512,\n\t\"./eu.js\": 8512,\n\t\"./fa\": 9083,\n\t\"./fa.js\": 9083,\n\t\"./fi\": 5059,\n\t\"./fi.js\": 5059,\n\t\"./fil\": 2607,\n\t\"./fil.js\": 2607,\n\t\"./fo\": 3369,\n\t\"./fo.js\": 3369,\n\t\"./fr\": 7390,\n\t\"./fr-ca\": 6711,\n\t\"./fr-ca.js\": 6711,\n\t\"./fr-ch\": 6152,\n\t\"./fr-ch.js\": 6152,\n\t\"./fr.js\": 7390,\n\t\"./fy\": 2419,\n\t\"./fy.js\": 2419,\n\t\"./ga\": 3002,\n\t\"./ga.js\": 3002,\n\t\"./gd\": 4914,\n\t\"./gd.js\": 4914,\n\t\"./gl\": 6557,\n\t\"./gl.js\": 6557,\n\t\"./gom-deva\": 8944,\n\t\"./gom-deva.js\": 8944,\n\t\"./gom-latn\": 5387,\n\t\"./gom-latn.js\": 5387,\n\t\"./gu\": 7462,\n\t\"./gu.js\": 7462,\n\t\"./he\": 9237,\n\t\"./he.js\": 9237,\n\t\"./hi\": 9617,\n\t\"./hi.js\": 9617,\n\t\"./hr\": 6544,\n\t\"./hr.js\": 6544,\n\t\"./hu\": 341,\n\t\"./hu.js\": 341,\n\t\"./hy-am\": 1388,\n\t\"./hy-am.js\": 1388,\n\t\"./id\": 5251,\n\t\"./id.js\": 5251,\n\t\"./is\": 1146,\n\t\"./is.js\": 1146,\n\t\"./it\": 7891,\n\t\"./it-ch\": 7,\n\t\"./it-ch.js\": 7,\n\t\"./it.js\": 7891,\n\t\"./ja\": 3727,\n\t\"./ja.js\": 3727,\n\t\"./jv\": 5198,\n\t\"./jv.js\": 5198,\n\t\"./ka\": 8974,\n\t\"./ka.js\": 8974,\n\t\"./kk\": 7308,\n\t\"./kk.js\": 7308,\n\t\"./km\": 7786,\n\t\"./km.js\": 7786,\n\t\"./kn\": 4807,\n\t\"./kn.js\": 4807,\n\t\"./ko\": 1584,\n\t\"./ko.js\": 1584,\n\t\"./ku\": 1906,\n\t\"./ku-kmr\": 5305,\n\t\"./ku-kmr.js\": 5305,\n\t\"./ku.js\": 1906,\n\t\"./ky\": 9190,\n\t\"./ky.js\": 9190,\n\t\"./lb\": 7396,\n\t\"./lb.js\": 7396,\n\t\"./lo\": 8503,\n\t\"./lo.js\": 8503,\n\t\"./lt\": 3010,\n\t\"./lt.js\": 3010,\n\t\"./lv\": 5192,\n\t\"./lv.js\": 5192,\n\t\"./me\": 1944,\n\t\"./me.js\": 1944,\n\t\"./mi\": 6492,\n\t\"./mi.js\": 6492,\n\t\"./mk\": 2934,\n\t\"./mk.js\": 2934,\n\t\"./ml\": 1463,\n\t\"./ml.js\": 1463,\n\t\"./mn\": 8377,\n\t\"./mn.js\": 8377,\n\t\"./mr\": 8733,\n\t\"./mr.js\": 8733,\n\t\"./ms\": 8030,\n\t\"./ms-my\": 9445,\n\t\"./ms-my.js\": 9445,\n\t\"./ms.js\": 8030,\n\t\"./mt\": 5887,\n\t\"./mt.js\": 5887,\n\t\"./my\": 7228,\n\t\"./my.js\": 7228,\n\t\"./nb\": 8294,\n\t\"./nb.js\": 8294,\n\t\"./ne\": 9559,\n\t\"./ne.js\": 9559,\n\t\"./nl\": 600,\n\t\"./nl-be\": 8796,\n\t\"./nl-be.js\": 8796,\n\t\"./nl.js\": 600,\n\t\"./nn\": 9570,\n\t\"./nn.js\": 9570,\n\t\"./oc-lnc\": 5662,\n\t\"./oc-lnc.js\": 5662,\n\t\"./pa-in\": 7101,\n\t\"./pa-in.js\": 7101,\n\t\"./pl\": 6118,\n\t\"./pl.js\": 6118,\n\t\"./pt\": 9198,\n\t\"./pt-br\": 7203,\n\t\"./pt-br.js\": 7203,\n\t\"./pt.js\": 9198,\n\t\"./ro\": 5565,\n\t\"./ro.js\": 5565,\n\t\"./ru\": 3315,\n\t\"./ru.js\": 3315,\n\t\"./sd\": 8473,\n\t\"./sd.js\": 8473,\n\t\"./se\": 1258,\n\t\"./se.js\": 1258,\n\t\"./si\": 8798,\n\t\"./si.js\": 8798,\n\t\"./sk\": 6404,\n\t\"./sk.js\": 6404,\n\t\"./sl\": 7057,\n\t\"./sl.js\": 7057,\n\t\"./sq\": 5718,\n\t\"./sq.js\": 5718,\n\t\"./sr\": 5363,\n\t\"./sr-cyrl\": 478,\n\t\"./sr-cyrl.js\": 478,\n\t\"./sr.js\": 5363,\n\t\"./ss\": 7260,\n\t\"./ss.js\": 7260,\n\t\"./sv\": 2231,\n\t\"./sv.js\": 2231,\n\t\"./sw\": 7104,\n\t\"./sw.js\": 7104,\n\t\"./ta\": 7493,\n\t\"./ta.js\": 7493,\n\t\"./te\": 7705,\n\t\"./te.js\": 7705,\n\t\"./tet\": 4457,\n\t\"./tet.js\": 4457,\n\t\"./tg\": 2727,\n\t\"./tg.js\": 2727,\n\t\"./th\": 2206,\n\t\"./th.js\": 2206,\n\t\"./tk\": 3419,\n\t\"./tk.js\": 3419,\n\t\"./tl-ph\": 7243,\n\t\"./tl-ph.js\": 7243,\n\t\"./tlh\": 16,\n\t\"./tlh.js\": 16,\n\t\"./tr\": 7020,\n\t\"./tr.js\": 7020,\n\t\"./tzl\": 8026,\n\t\"./tzl.js\": 8026,\n\t\"./tzm\": 8537,\n\t\"./tzm-latn\": 7899,\n\t\"./tzm-latn.js\": 7899,\n\t\"./tzm.js\": 8537,\n\t\"./ug-cn\": 818,\n\t\"./ug-cn.js\": 818,\n\t\"./uk\": 8478,\n\t\"./uk.js\": 8478,\n\t\"./ur\": 7893,\n\t\"./ur.js\": 7893,\n\t\"./uz\": 9133,\n\t\"./uz-latn\": 311,\n\t\"./uz-latn.js\": 311,\n\t\"./uz.js\": 9133,\n\t\"./vi\": 2179,\n\t\"./vi.js\": 2179,\n\t\"./x-pseudo\": 2455,\n\t\"./x-pseudo.js\": 2455,\n\t\"./yo\": 3310,\n\t\"./yo.js\": 3310,\n\t\"./zh-cn\": 7244,\n\t\"./zh-cn.js\": 7244,\n\t\"./zh-hk\": 76,\n\t\"./zh-hk.js\": 76,\n\t\"./zh-mo\": 2305,\n\t\"./zh-mo.js\": 2305,\n\t\"./zh-tw\": 8588,\n\t\"./zh-tw.js\": 8588\n};\n\n\nfunction webpackContext(req) {\n\tvar id = webpackContextResolve(req);\n\treturn __webpack_require__(id);\n}\nfunction webpackContextResolve(req) {\n\tif(!__webpack_require__.o(map, req)) {\n\t\tvar e = new Error(\"Cannot find module '\" + req + \"'\");\n\t\te.code = 'MODULE_NOT_FOUND';\n\t\tthrow e;\n\t}\n\treturn map[req];\n}\nwebpackContext.keys = function webpackContextKeys() {\n\treturn Object.keys(map);\n};\nwebpackContext.resolve = webpackContextResolve;\nmodule.exports = webpackContext;\nwebpackContext.id = 1738;","import { throttle } from 'lodash';\nimport { useState, useEffect } from 'react';\n\ninterface MousePosition {\n  x: number | null;\n  y: number | null;\n}\n\n// For performance reasons, we throttle the mouse position updates\nconst DEFAULT_THROTTLE_INTERVAL_MS = 50;\n\nconst useMousePosition = (throttleInterval = DEFAULT_THROTTLE_INTERVAL_MS) => {\n  const [mousePosition, setMousePosition] = useState<MousePosition>({ x: null, y: null });\n\n  useEffect(() => {\n    const updateMousePosition = throttle((event: MouseEvent) => {\n      setMousePosition({ x: event.clientX, y: event.clientY });\n    }, throttleInterval);\n    window.addEventListener('mousemove', updateMousePosition);\n\n    return () => {\n      window.removeEventListener('mousemove', updateMousePosition);\n    };\n  }, [throttleInterval]);\n\n  return mousePosition;\n};\n\nexport default useMousePosition;\n","import { css } from '@emotion/css';\nimport React, { SVGProps } from 'react';\nimport SVG from 'react-inlinesvg';\n\nimport { GrafanaTheme2 } from '@grafana/data';\nimport { useStyles2, useTheme2 } from '@grafana/ui';\n\nimport dark404 from './img/grot-404-dark.svg';\nimport light404 from './img/grot-404-light.svg';\n\nimport useMousePosition from './useMousePosition';\n\nconst MIN_ARM_ROTATION = -20;\nconst MAX_ARM_ROTATION = 5;\nconst MIN_ARM_TRANSLATION = -5;\nconst MAX_ARM_TRANSLATION = 5;\n\nexport interface Props {\n  width?: SVGProps<SVGElement>['width'];\n  height?: SVGProps<SVGElement>['height'];\n  show404?: boolean;\n}\n\nexport const GrotNotFound = ({ width = 'auto', height, show404 = false }: Props) => {\n  const theme = useTheme2();\n  const { x, y } = useMousePosition();\n  const styles = useStyles2(getStyles, x, y, show404);\n  return <SVG src={theme.isDark ? dark404 : light404} className={styles.svg} height={height} width={width} />;\n};\n\nGrotNotFound.displayName = 'GrotNotFound';\n\nconst getStyles = (theme: GrafanaTheme2, xPos: number | null, yPos: number | null, show404: boolean) => {\n  const { innerWidth, innerHeight } = window;\n  const heightRatio = yPos && yPos / innerHeight;\n  const widthRatio = xPos && xPos / innerWidth;\n  const rotation = heightRatio !== null ? getIntermediateValue(heightRatio, MIN_ARM_ROTATION, MAX_ARM_ROTATION) : 0;\n  const translation =\n    widthRatio !== null ? getIntermediateValue(widthRatio, MIN_ARM_TRANSLATION, MAX_ARM_TRANSLATION) : 0;\n\n  return {\n    svg: css({\n      '#grot-404-arm, #grot-404-magnifier': {\n        transform: `rotate(${rotation}deg) translateX(${translation}%)`,\n        transformOrigin: 'center',\n        transition: 'transform 50ms linear',\n      },\n      '#grot-404-text': {\n        display: show404 ? 'block' : 'none',\n      },\n    }),\n  };\n};\n\n/**\n * Given a start value, end value, and a ratio, return the intermediate value\n * Works with negative and inverted start/end values\n */\nconst getIntermediateValue = (ratio: number, start: number, end: number) => {\n  const value = ratio * (end - start) + start;\n  return value;\n};\n","import React from 'react';\n\nimport { Icon, Stack, Text, useStyles2 } from '@grafana/ui';\nimport { GrafanaTheme2 } from '@grafana/data';\n\nimport { GrotNotFound } from './GrotNotFound';\nimport { css } from '@emotion/css';\nimport { testIds } from 'utils/testIds';\n\nexport interface Props {\n  message?: string | React.ReactNode;\n  remedyMessage?: string;\n  imgWidth?: number;\n  padding?: string;\n}\n\nexport const EmptyState = ({ message, remedyMessage, imgWidth, padding }: Props) => {\n  const styles = useStyles2(getStyles, padding);\n\n  return (\n    <div className={styles.container} data-testid={testIds.emptyState}>\n      <Stack direction=\"column\" alignItems=\"center\" gap={3}>\n        <GrotNotFound width={imgWidth ?? 300} />\n        {typeof message === 'string' &&  <Text textAlignment={'center'} variant=\"h5\">{message}</Text>}\n        {typeof message !== 'string' &&  message}\n\n        {remedyMessage && (\n          <div className={styles.remedy}>\n            <Stack gap={0.5} alignItems={'center'}>\n              <Icon name=\"info-circle\" />\n              <Text textAlignment={'center'} variant=\"body\">\n                {remedyMessage}\n              </Text>\n            </Stack>\n          </div>\n        )}\n      </Stack>\n    </div>\n  );\n};\n\nEmptyState.displayName = 'EmptyState';\n\nfunction getStyles(theme: GrafanaTheme2, padding?: string) {\n  return {\n    container: css({\n      width: '100%',\n      display: 'flex',\n      justifyContent: 'space-evenly',\n      flexDirection: 'column',\n      padding: padding ? padding : 0,\n    }),\n    remedy: css({\n      marginBottom: theme.spacing(4),\n    })\n  };\n}\n","export const testIds = {\n  emptyState: 'data-testid empty-state',\n  errorState: 'data-testid error-state',\n  loadingState: 'data-testid loading-state',\n};\n","import { SceneObjectState, SceneObjectBase, SceneComponentProps } from '@grafana/scenes';\nimport React from 'react';\nimport { EmptyState } from './EmptyState';\n\ninterface EmptyStateSceneState extends SceneObjectState {\n  message?: string;\n  remedyMessage?: string;\n  imgWidth?: number;\n  padding?: string;\n}\n\nexport class EmptyStateScene extends SceneObjectBase<EmptyStateSceneState> {\n  public static Component = ({ model }: SceneComponentProps<EmptyStateScene>) => {\n    const { message, remedyMessage, imgWidth, padding } = model.useState();\n    return <EmptyState message={message} remedyMessage={remedyMessage} imgWidth={imgWidth} padding={padding} />;\n  };\n}\n","import { css, keyframes } from '@emotion/css';\nimport { SceneObjectState, SceneObjectBase, SceneComponentProps } from '@grafana/scenes';\nimport { useStyles2, useTheme2 } from '@grafana/ui';\nimport React from 'react';\nimport { SkeletonTheme } from 'react-loading-skeleton';\nimport { testIds } from 'utils/testIds';\n\ninterface LoadingStateSceneState extends SceneObjectState {\n  component: () => React.JSX.Element;\n}\n\nexport class LoadingStateScene extends SceneObjectBase<LoadingStateSceneState> {\n  public static Component = ({ model }: SceneComponentProps<LoadingStateScene>) => {\n    const theme = useTheme2();\n    const styles = useStyles2(getStyles);\n    const { component } = model.useState();\n\n    return (\n      <div className={styles.container} data-testid={testIds.loadingState}>\n        <SkeletonTheme\n          baseColor={theme.colors.emphasize(theme.colors.background.secondary)}\n          highlightColor={theme.colors.emphasize(theme.colors.background.secondary, 0.1)}\n          borderRadius={theme.shape.radius.default}\n        >\n          {component()}\n        </SkeletonTheme>\n      </div>\n    );\n  };\n}\n\nconst fadeIn = keyframes({\n  '0%': {\n    opacity: 0,\n  },\n  '100%': {\n    opacity: 1,\n  },\n});\n\nfunction getStyles() {\n  return {\n    container: css({\n      label: 'loading-state-scene',\n      // animation prevents flickering when loading\n      animationName: fadeIn,\n      animationDelay: '100ms',\n      animationTimingFunction: 'ease-in',\n      animationDuration: '100ms',\n      animationFillMode: 'backwards',\n    }),\n  };\n}\n","import { SceneObjectState, SceneObjectBase, SceneComponentProps } from '@grafana/scenes';\nimport React from 'react';\nimport { Alert } from '@grafana/ui';\nimport { testIds } from 'utils/testIds';\n\ninterface ErrorStateSceneState extends SceneObjectState {\n  message: string;\n}\n\nexport class ErrorStateScene extends SceneObjectBase<ErrorStateSceneState> {\n  public static Component = ({ model }: SceneComponentProps<ErrorStateScene>) => {\n    const { message } = model.useState();\n    return (\n      <Alert title={'Query error'} severity={'error'} data-testid={testIds.errorState}>\n        {message}\n      </Alert>\n    );\n  };\n}\n","import { Field, Input, Icon, useStyles2 } from \"@grafana/ui\"\nimport React from \"react\"\nimport { GrafanaTheme2 } from '@grafana/data';\nimport { css } from \"@emotion/css\";\n\ntype Props = {\n  searchQuery: string;\n  onSearchQueryChange: (event: React.ChangeEvent<HTMLInputElement>) => void;\n}\n\nexport const Search = (props: Props) => {\n  const styles = useStyles2(getStyles);\n  const { searchQuery, onSearchQueryChange } = props;\n\n  return (\n    <Field className={styles.searchField}>\n      <Input\n        placeholder='Search'\n        prefix={<Icon name={'search'} />}\n        value={searchQuery}\n        onChange={onSearchQueryChange}\n        id='searchFieldInput'\n      />\n    </Field>\n  )\n}\n\nfunction getStyles(theme: GrafanaTheme2) {\n  return {\n    searchField: css({\n      marginBottom: theme.spacing(1),\n    }),\n  };\n}\n","import React from 'react';\n\nimport { DataFrame, FieldType, GrafanaTheme2, LoadingState, PanelData, sortDataFrame } from '@grafana/data';\nimport {\n  SceneComponentProps,\n  SceneCSSGridLayout,\n  SceneFlexItem,\n  sceneGraph,\n  SceneLayout,\n  SceneObjectBase,\n  SceneObjectState,\n} from '@grafana/scenes';\nimport { EmptyStateScene } from 'components/states/EmptyState/EmptyStateScene';\nimport { css } from '@emotion/css';\nimport { useStyles2 } from '@grafana/ui';\nimport Skeleton from 'react-loading-skeleton';\nimport { LoadingStateScene } from 'components/states/LoadingState/LoadingStateScene';\nimport { ErrorStateScene } from 'components/states/ErrorState/ErrorStateScene';\nimport { debounce } from 'lodash';\nimport { Search } from './Search';\nimport { getGroupByVariable } from 'utils/utils';\nimport {\n  EMPTY_STATE_ERROR_MESSAGE,\n  EMPTY_STATE_ERROR_REMEDY_MESSAGE,\n  EventTimeseriesDataReceived,\n  GRID_TEMPLATE_COLUMNS,\n} from '../../utils/shared';\nimport { cloneDataFrame } from '../../utils/frames';\n\ninterface ByFrameRepeaterState extends SceneObjectState {\n  body: SceneLayout;\n  groupBy?: boolean;\n\n  getLayoutChild(data: PanelData, frame: DataFrame, frameIndex: number): SceneFlexItem;\n\n  searchQuery?: string;\n}\n\nexport class ByFrameRepeater extends SceneObjectBase<ByFrameRepeaterState> {\n  public constructor(state: ByFrameRepeaterState) {\n    super(state);\n\n    this.addActivationHandler(() => {\n      const data = sceneGraph.getData(this);\n\n      this._subs.add(\n        data.subscribeToState((data) => {\n          if (data.data?.state === LoadingState.Done || data.data?.state === LoadingState.Streaming) {\n            if (data.data.series.length === 0 && data.data?.state !== LoadingState.Streaming) {\n              this.state.body.setState({\n                children: [\n                  new SceneFlexItem({\n                    body: new EmptyStateScene({\n                      message: EMPTY_STATE_ERROR_MESSAGE,\n                      remedyMessage: EMPTY_STATE_ERROR_REMEDY_MESSAGE,\n                      padding: '32px',\n                    }),\n                  }),\n                ],\n              });\n            } else {\n              const filtered = {\n                ...data.data,\n                series: data.data?.series.filter(doesQueryMatchDataFrameLabels(this.state.searchQuery)),\n              };\n              this.renderFilteredData(filtered as PanelData);\n              this.publishEvent(new EventTimeseriesDataReceived({ series: data.data.series }), true);\n            }\n          } else if (data.data?.state === LoadingState.Error) {\n            this.state.body.setState({\n              children: [\n                new SceneCSSGridLayout({\n                  children: [\n                    new ErrorStateScene({\n                      message: data.data.errors?.[0]?.message ?? 'An error occurred in the query',\n                    }),\n                  ],\n                }),\n              ],\n            });\n          } else {\n            this.state.body.setState({\n              children: [\n                new SceneCSSGridLayout({\n                  children: [\n                    new LoadingStateScene({\n                      component: () => SkeletonComponent(8),\n                    }),\n                  ],\n                }),\n              ],\n            });\n          }\n        })\n      );\n\n      this.subscribeToState((newState, prevState) => {\n        if (newState.searchQuery !== prevState.searchQuery) {\n          this.onSearchQueryChangeDebounced(newState.searchQuery ?? '');\n        }\n      });\n\n      if (data.state.data) {\n        this.performRepeat(data.state.data);\n      }\n    });\n  }\n\n  private onSearchQueryChange = (evt: React.SyntheticEvent<HTMLInputElement>) => {\n    this.setState({ searchQuery: evt.currentTarget.value });\n  };\n\n  private onSearchQueryChangeDebounced = debounce((searchQuery: string) => {\n    const data = sceneGraph.getData(this);\n    const filtered = {\n      ...data.state.data,\n      series: data.state.data?.series.filter(doesQueryMatchDataFrameLabels(searchQuery)),\n    };\n    this.renderFilteredData(filtered as PanelData);\n  }, 250);\n\n  private renderFilteredData(filtered: PanelData) {\n    if (filtered.series && filtered.series.length > 0) {\n      this.performRepeat(filtered as PanelData);\n    } else {\n      this.state.body.setState({\n        children: [\n          new SceneFlexItem({\n            body: new EmptyStateScene({\n              message: 'No data for search term',\n              padding: '32px',\n            }),\n          }),\n        ],\n      });\n    }\n  }\n\n  private groupSeriesBy(data: PanelData, groupBy: string) {\n    const groupedData = data.series.reduce(\n      (acc, series) => {\n        const key = series.fields.find((f) => f.type === FieldType.number)?.labels?.[groupBy];\n        if (!key) {\n          return acc;\n        }\n        if (!acc[key]) {\n          acc[key] = [];\n        }\n        acc[key].push(series);\n        return acc;\n      },\n      {} as Record<string, DataFrame[]>\n    );\n\n    const newSeries = [];\n    for (const key in groupedData) {\n      const frames = groupedData[key].sort((a, b) => a.name?.localeCompare(b.name!) || 0);\n      const mainFrame = cloneDataFrame(frames[0]);\n      frames.slice(1, frames.length).forEach((frame) => mainFrame.fields.push(frame.fields[1]));\n      newSeries.push(sortDataFrame(mainFrame, 0));\n    }\n    return newSeries;\n  }\n\n  private performRepeat(data: PanelData) {\n    const newChildren: SceneFlexItem[] = [];\n    let frames = data.series;\n\n    if (this.state.groupBy) {\n      frames = this.groupSeriesBy(data, getGroupByVariable(this).getValueText());\n    }\n\n    for (let frameIndex = 0; frameIndex < frames.length; frameIndex++) {\n      const currentFrame = frames[frameIndex];\n      // Skip frames with no data\n      const sum = currentFrame.fields\n        .filter((f) => f.type === FieldType.number)\n        .reduce((sum, f) => sum + f.values.reduce((vSum, v) => vSum + (v || 0), 0) || 0, 0);\n      if (sum === 0) {\n        continue;\n      }\n      // Build the layout child\n      const layoutChild = this.state.getLayoutChild(data, frames[frameIndex], frameIndex);\n      newChildren.push(layoutChild);\n    }\n\n    this.state.body.setState({ children: newChildren });\n  }\n\n  public static Component = ({ model }: SceneComponentProps<ByFrameRepeater>) => {\n    const { body, searchQuery } = model.useState();\n    const styles = useStyles2(getStyles);\n\n    return (\n      <div className={styles.container}>\n        <Search searchQuery={searchQuery ?? ''} onSearchQueryChange={model.onSearchQueryChange} />\n        <body.Component model={body} />\n      </div>\n    );\n  };\n}\n\nfunction getStyles() {\n  return {\n    container: css({\n      display: 'flex',\n      flexDirection: 'column',\n      flexGrow: 1,\n    }),\n  };\n}\n\nexport const SkeletonComponent = (repeat: number) => {\n  const styles = useStyles2(getSkeletonStyles);\n\n  return (\n    <div className={styles.container}>\n      {[...Array(repeat)].map((_, i) => (\n        <div className={styles.itemContainer} key={i}>\n          <div className={styles.header}>\n            <div className={styles.title}>\n              <Skeleton count={1} />\n            </div>\n            <div className={styles.action}>\n              <Skeleton count={1} />\n            </div>\n          </div>\n          <div className={styles.yAxis}>\n            {[...Array(2)].map((_, i) => (\n              <div className={styles.yAxisItem} key={i}>\n                <Skeleton count={1} />\n              </div>\n            ))}\n          </div>\n          <div className={styles.xAxis}>\n            {[...Array(2)].map((_, i) => (\n              <div className={styles.xAxisItem} key={i}>\n                <Skeleton count={1} />\n              </div>\n            ))}\n          </div>\n        </div>\n      ))}\n    </div>\n  );\n};\n\nfunction getSkeletonStyles(theme: GrafanaTheme2) {\n  return {\n    container: css({\n      display: 'grid',\n      gridTemplateColumns: GRID_TEMPLATE_COLUMNS,\n      gridAutoRows: '200px',\n      rowGap: theme.spacing(1),\n      columnGap: theme.spacing(1),\n    }),\n    itemContainer: css({\n      backgroundColor: theme.colors.background.primary,\n      border: `1px solid ${theme.colors.background.secondary}`,\n      padding: '5px',\n    }),\n    header: css({\n      display: 'flex',\n      justifyContent: 'space-between',\n    }),\n    title: css({\n      width: '100px',\n    }),\n    action: css({\n      width: '60px',\n    }),\n    yAxis: css({\n      display: 'flex',\n      flexDirection: 'column',\n      justifyContent: 'space-around',\n      marginTop: '35px',\n    }),\n    yAxisItem: css({\n      width: '60px',\n      height: '55px',\n    }),\n    xAxis: css({\n      display: 'flex',\n      justifyContent: 'space-evenly',\n    }),\n    xAxisItem: css({\n      width: '55px',\n    }),\n  };\n}\n\nexport const doesQueryMatchDataFrameLabels = (searchQuery?: string) => (dataFrame: DataFrame) => {\n  const pattern = searchQuery?.trim();\n  if (!pattern) {\n    return true;\n  }\n\n  const regex = new RegExp(pattern, 'i');\n\n  return dataFrame.fields.some((f) => (!f.labels ? false : Object.values(f.labels).find((label) => regex.test(label))));\n};\n","import { DataQueryResponseData, Field } from '@grafana/data';\n\nexport function cloneDataFrame(frame: DataQueryResponseData): DataQueryResponseData {\n  return {\n    ...frame,\n    fields: frame.fields.map((field: Field) => ({\n      ...field,\n      values: field.values,\n    })),\n  };\n}\n","import { PanelBuilders } from '@grafana/scenes';\nimport { DrawStyle, StackingMode, TooltipDisplayMode } from '@grafana/ui';\n\nexport const barsPanelConfig = () => {\n  return PanelBuilders.timeseries()\n    .setOption('legend', { showLegend: false })\n    .setCustomFieldConfig('drawStyle', DrawStyle.Bars)\n    .setCustomFieldConfig('stacking', { mode: StackingMode.Normal })\n    .setCustomFieldConfig('fillOpacity', 100)\n    .setCustomFieldConfig('lineWidth', 0)\n    .setCustomFieldConfig('pointSize', 0)\n    .setCustomFieldConfig('axisLabel', 'Rate')\n    .setOverrides((overrides) => {\n      overrides.matchFieldsWithNameByRegex('.*\"?error\"?.*').overrideColor({\n        mode: 'fixed',\n        fixedColor: 'semi-dark-red',\n      });\n      overrides.matchFieldsWithNameByRegex('.*\"?unset\"?.*').overrideColor({\n        mode: 'fixed',\n        fixedColor: 'green',\n      });\n      overrides.matchFieldsWithNameByRegex('.*\"?ok\"?.*').overrideColor({\n        mode: 'fixed',\n        fixedColor: 'dark-green',\n      });\n    })\n    .setOption('tooltip', { mode: TooltipDisplayMode.Multi });\n};\n","import { ALL, MetricFunction, VAR_FILTERS_EXPR } from '../../../utils/shared';\n\ninterface QueryOptions {\n  metric: MetricFunction;\n  extraFilters?: string;\n  groupByKey?: string;\n  groupByStatus?: boolean;\n}\n\nexport function generateMetricsQuery({ metric, groupByKey, extraFilters, groupByStatus }: QueryOptions) {\n  // Generate span set filters\n  let filters = `${VAR_FILTERS_EXPR}`;\n\n  if (metric === 'errors') {\n    filters += ' && status=error';\n  }\n\n  if (extraFilters) {\n    filters += ` && ${extraFilters}`;\n  }\n\n  if (groupByKey && groupByKey !== ALL) {\n    filters += ` && ${groupByKey} != nil`;\n  }\n\n  // Generate metrics function\n  let metricFn = 'rate()';\n  switch (metric) {\n    case 'errors':\n      metricFn = 'rate()';\n      break;\n    case 'duration':\n      metricFn = 'quantile_over_time(duration, 0.9)';\n      break;\n  }\n\n  // Generate group by section\n  let groupByAttrs = [];\n  if (groupByKey && groupByKey !== ALL) {\n    groupByAttrs.push(groupByKey);\n  }\n\n  if (metric !== 'duration' && groupByStatus) {\n    groupByAttrs.push('status');\n  }\n\n  const groupBy = groupByAttrs.length ? `by(${groupByAttrs.join(', ')})` : '';\n\n  return `{${filters}} | ${metricFn} ${groupBy}`;\n}\n\nexport function metricByWithStatus(metric: MetricFunction, tagKey?: string) {\n  return {\n    refId: 'A',\n    query: generateMetricsQuery({ metric, groupByKey: tagKey, groupByStatus: true }),\n    queryType: 'traceql',\n    tableType: 'spans',\n    limit: 100,\n    spss: 10,\n    filters: [],\n  };\n}\n","import { dropWhile as _dropWhile, round as _round } from 'lodash';\nimport { sceneGraph, SceneObject } from '@grafana/scenes';\nimport { duration } from 'moment/moment';\n\nexport const ONE_MILLISECOND = 1000;\nexport const ONE_SECOND = 1000 * ONE_MILLISECOND;\nexport const ONE_MINUTE = 60 * ONE_SECOND;\nexport const ONE_HOUR = 60 * ONE_MINUTE;\nexport const ONE_DAY = 24 * ONE_HOUR;\nexport const DEFAULT_MS_PRECISION = Math.log10(ONE_MILLISECOND);\n\nconst UNIT_STEPS: Array<{ unit: string; microseconds: number; ofPrevious: number }> = [\n  { unit: 'd', microseconds: ONE_DAY, ofPrevious: 24 },\n  { unit: 'h', microseconds: ONE_HOUR, ofPrevious: 60 },\n  { unit: 'm', microseconds: ONE_MINUTE, ofPrevious: 60 },\n  { unit: 's', microseconds: ONE_SECOND, ofPrevious: 1000 },\n  { unit: 'ms', microseconds: ONE_MILLISECOND, ofPrevious: 1000 },\n  { unit: 'μs', microseconds: 1, ofPrevious: 1000 },\n];\n\n/**\n * Humanizes the duration for display.\n *\n * Example:\n * 5000ms => 5s\n * 1000μs => 1ms\n * 183840s => 2d 3h\n *\n * @param {number} duration (in microseconds)\n * @return {string} formatted duration\n */\nexport const formatDuration = (duration: number): string => {\n  // Drop all units that are too large except the last one\n  const [primaryUnit, secondaryUnit] = _dropWhile(\n    UNIT_STEPS,\n    ({ microseconds }, index) => index < UNIT_STEPS.length - 1 && microseconds > duration\n  );\n\n  if (primaryUnit.ofPrevious === 1000) {\n    // If the unit is decimal based, display as a decimal\n    return `${_round(duration / primaryUnit.microseconds, 2)}${primaryUnit.unit}`;\n  }\n\n  const primaryValue = Math.floor(duration / primaryUnit.microseconds);\n  const primaryUnitString = `${primaryValue}${primaryUnit.unit}`;\n  const secondaryValue = Math.round((duration / secondaryUnit.microseconds) % primaryUnit.ofPrevious);\n  const secondaryUnitString = `${secondaryValue}${secondaryUnit.unit}`;\n  return secondaryValue === 0 ? primaryUnitString : `${primaryUnitString} ${secondaryUnitString}`;\n}\n\nexport const getStepForTimeRange = (scene: SceneObject, dataPoints?: number) => {\n  const sceneTimeRange = sceneGraph.getTimeRange(scene);\n  const from = sceneTimeRange.state.value.from.unix();\n  const to = sceneTimeRange.state.value.to.unix();\n\n  const dur = duration(to - from, 's');\n  const finalDur = Math.floor(dur.asSeconds() / (dataPoints ?? 50)) || 1;\n  return `${finalDur}s`;\n}\n","import { QueryRunnerState, sceneGraph, SceneQueryRunner } from '@grafana/scenes';\nimport { getStepForTimeRange } from '../../../utils/dates';\n\nexport class StepQueryRunner extends SceneQueryRunner {\n  constructor(state: QueryRunnerState) {\n    super(state);\n    this.addActivationHandler(this._onActivateStep.bind(this));\n  }\n\n  private _onActivateStep() {\n    const step = getStepForTimeRange(this, this.state.maxDataPoints);\n    this.setState({\n      queries: this.state.queries.map((query) => {\n        return {\n          ...query,\n          step,\n        };\n      }),\n    });\n\n    const sceneTimeRange = sceneGraph.getTimeRange(this);\n    sceneTimeRange.subscribeToState((newState, prevState) => {\n      if (newState.value.from !== prevState.value.from || newState.value.to !== prevState.value.to) {\n        const newStep = getStepForTimeRange(this, this.state.maxDataPoints);\n        this.setState({\n          queries: this.state.queries.map((query) => {\n            return {\n              ...query,\n              step: newStep,\n            };\n          }),\n        });\n      }\n    });\n  }\n}\n","import { getTraceByServiceScene, shouldShowSelection } from '../../../utils/utils';\nimport { ComparisonSelection } from '../../../utils/shared';\nimport { reportAppInteraction, USER_EVENTS_ACTIONS, USER_EVENTS_PAGES } from '../../../utils/analytics';\nimport { PanelBuilders, SceneFlexItem, SceneFlexLayout, SceneObject } from '@grafana/scenes';\n\nexport function getHistogramVizPanel(scene: SceneObject, yBuckets: number[]) {\n  const parent = getTraceByServiceScene(scene);\n  const panel = histogramPanelConfig()\n    .setHoverHeader(true)\n    // @ts-ignore\n    .setOption('selectionMode', 'xy')\n    .build();\n  panel.setState({\n    extendPanelContext: (vizPanel, context) => {\n      // TODO remove when we the Grafana version with #88107 is released\n      // @ts-ignore\n      context.onSelectRange = (args) => {\n        if (args.length === 0) {\n          parent.setState({ selection: undefined });\n          return;\n        }\n        const rawSelection = args[0];\n        // @ts-ignore\n        const newSelection: ComparisonSelection = { type: 'manual', raw: rawSelection };\n\n        newSelection.timeRange = {\n          from: Math.round((rawSelection.x?.from || 0) / 1000),\n          to: Math.round((rawSelection.x?.to || 0) / 1000),\n        };\n\n        // Ignore selection and return if the selection is invalid\n        if (newSelection.timeRange.from === newSelection.timeRange.to) {\n          return;\n        }\n\n        const yFrom = yBucketToDuration((args[0].y?.from || 0) - 1, yBuckets);\n        const yTo = yBucketToDuration(args[0].y?.to || 0, yBuckets);\n        newSelection.duration = { from: yFrom, to: yTo };\n\n        parent.onUserUpdateSelection(newSelection);\n        if (!shouldShowSelection(parent.state.actionView)) {\n          parent.setActionView('comparison');\n        }\n\n        reportAppInteraction(USER_EVENTS_PAGES.analyse_traces, USER_EVENTS_ACTIONS.analyse_traces.start_investigation, {\n          selection: newSelection,\n          metric: 'duration',\n        });\n      };\n    },\n  });\n  return new SceneFlexLayout({\n    direction: 'row',\n    children: [\n      new SceneFlexItem({\n        body: panel,\n      }),\n    ],\n  });\n}\n\nexport const histogramPanelConfig = () => {\n  return PanelBuilders.heatmap()\n    .setOption('legend', { show: false })\n    .setOption('yAxis', {\n      unit: 's',\n      axisLabel: 'Duration',\n    })\n    .setOption('color', {\n      scheme: 'YlGnBu',\n    })\n    .setOption('rowsFrame', { value: 'Spans' });\n};\n\nexport function yBucketToDuration(yValue: number, buckets?: number[], multiplier?: number) {\n  if (!buckets) {\n    return '';\n  }\n  if (yValue < 0) {\n    return '0';\n  }\n\n  const rawValue = buckets[Math.floor(yValue)] * (multiplier || 1);\n  if (!rawValue || isNaN(rawValue)) {\n    return '';\n  }\n  if (rawValue >= 1) {\n    return `${rawValue.toFixed(0)}s`;\n  }\n  return `${(rawValue * 1000).toFixed(0)}ms`;\n}\n","import { SelectableValue } from '@grafana/data';\n\nexport const DATABASE_CALLS_KEY = 'span.db.name';\n\nexport const primarySignalOptions: Array<SelectableValue<string>> = [\n  {\n    label: 'Full traces',\n    value: 'full_traces',\n    filter: { key: 'nestedSetParent', operator: '<', value: '0' },\n    description: 'Inspect full journeys of requests across services',\n  },\n  {\n    label: 'Server spans',\n    value: 'server_spans',\n    filter: { key: 'kind', operator: '=', value: 'server' },\n    description: 'Explore server-specific segments of traces',\n  },\n  {\n    label: 'Consumer spans',\n    value: 'consumer_spans',\n    filter: { key: 'kind', operator: '=', value: 'consumer' },\n    description: 'Analyze interactions initiated by consumer services',\n  },\n  {\n    label: 'Database calls',\n    value: 'database_calls',\n    filter: { key: DATABASE_CALLS_KEY, operator: '!=', value: '\"\"' },\n    description: 'Evaluate the performance issues in database interactions',\n  },\n  {\n    label: 'All spans',\n    value: 'all_spans',\n    filter: { key: '', operator: '', value: true },\n    description: 'View and analyze raw span data',\n  },\n];\n\nexport const getSignalForKey = (key?: string) => {\n  return primarySignalOptions.find((option) => option.value === key);\n};\n","import React from 'react';\n\nimport { DataFrame } from '@grafana/data';\nimport { SceneObjectState, SceneObjectBase, SceneComponentProps, AdHocFiltersVariable } from '@grafana/scenes';\nimport { Button } from '@grafana/ui';\nimport { getFiltersVariable, getLabelValue } from '../../../utils/utils';\nimport { DATABASE_CALLS_KEY } from 'pages/Explore/primary-signals';\n\nexport interface AddToFiltersActionState extends SceneObjectState {\n  frame: DataFrame;\n  onClick: (payload: any) => void;\n  labelKey?: string;\n}\n\nexport class AddToFiltersAction extends SceneObjectBase<AddToFiltersActionState> {\n  public onClick = () => {\n    const variable = getFiltersVariable(this);\n\n    const labels = this.state.frame.fields.find((f) => f.labels)?.labels ?? {};\n    if (this.state.labelKey) {\n      if (!labels[this.state.labelKey]) {\n        return;\n      }\n    } else {\n      if (Object.keys(labels).length !== 1) {\n        return;\n      }\n    }\n\n    const labelName = this.state.labelKey ?? Object.keys(labels)[0];\n    const value = getLabelValue(this.state.frame, this.state.labelKey);\n\n    addToFilters(variable, labelName, value);\n\n    this.state.onClick({ labelName });\n  };\n\n  public static Component = ({ model }: SceneComponentProps<AddToFiltersAction>) => {\n    const key = model.state?.labelKey ?? '';\n    const field = model.state?.frame.fields.filter(x => x.type !== 'time');\n    const value = field?.[0]?.labels?.[key] ?? '';\n    const filterExists = filterExistsForKey(getFiltersVariable(model), key, value.replace(/\"/g, ''));\n\n    if (!filterExists) {\n      return (\n        <Button variant=\"primary\" size=\"sm\" fill=\"text\" onClick={model.onClick} icon={'search-plus'}>\n          Add to filters\n        </Button>\n      );\n    }\n    return <></>;\n  };\n}\n\nexport const addToFilters = (variable: AdHocFiltersVariable, label: string, value: string) => {\n  // ensure we set the new filter with latest value\n  // and remove any existing filter for the same key\n  // and also keep span.db.name as it is a primary filter\n  const filtersWithoutNew = variable.state.filters.filter((f) => f.key === DATABASE_CALLS_KEY || f.key !== label);\n\n  variable.setState({\n    filters: [\n      ...filtersWithoutNew,\n      {\n        key: label,\n        operator: '=',\n        value: value,\n      },\n    ],\n  });\n};\n\nexport const filterExistsForKey = (model: AdHocFiltersVariable, key: string, value: string) => {\n  const variable = getFiltersVariable(model);\n  return variable.state.filters.find((f) => f.key === key && f.value === value);\n}\n","import { DataFrame } from '@grafana/data';\nimport { ComparisonSelection, MetricFunction } from './shared';\n\nexport const computeHighestDifference = (frame: DataFrame) => {\n  const baselineField = frame.fields.find((f) => f.name === 'Baseline');\n  const selectionField = frame.fields.find((f) => f.name === 'Selection');\n\n  let maxDifference = 0;\n  let maxDifferenceIndex = 0;\n\n  for (let i = 0; i < (baselineField?.values?.length || 0); i++) {\n    const diff = (selectionField?.values[i] || 0) - (baselineField?.values[i] || 0);\n    if (Math.abs(diff) > Math.abs(maxDifference || 0)) {\n      maxDifference = diff;\n      maxDifferenceIndex = i;\n    }\n  }\n\n  return { maxDifference, maxDifferenceIndex };\n};\n\nexport const getDefaultSelectionForMetric = (metric: MetricFunction): ComparisonSelection | undefined => {\n  if (metric === 'duration') {\n    return undefined;\n  }\n  return { query: 'status = error', type: 'auto' };\n};\n","import { SceneComponentProps, SceneObjectBase, SceneObjectState, VizPanel } from '@grafana/scenes';\nimport { DataFrame, GrafanaTheme2 } from '@grafana/data';\nimport { Button, Stack, useStyles2 } from '@grafana/ui';\nimport { css } from '@emotion/css';\nimport React from 'react';\nimport { getFiltersVariable } from '../../../utils/utils';\nimport { addToFilters, filterExistsForKey } from '../actions/AddToFiltersAction';\nimport { computeHighestDifference } from '../../../utils/comparison';\n\nexport interface HighestDifferencePanelState extends SceneObjectState {\n  frame: DataFrame;\n  panel: VizPanel;\n  maxDifference?: number;\n  maxDifferenceIndex?: number;\n}\n\nexport class HighestDifferencePanel extends SceneObjectBase<HighestDifferencePanelState> {\n  constructor(state: HighestDifferencePanelState) {\n    super({\n      ...state,\n    });\n\n    this.addActivationHandler(() => this._onActivate());\n  }\n\n  private _onActivate() {\n    const { frame } = this.state;\n    const { maxDifference, maxDifferenceIndex } = computeHighestDifference(frame);\n    this.setState({ maxDifference, maxDifferenceIndex });\n  }\n\n  private getAttribute() {\n    return this.state.frame.name;\n  }\n\n  private getValue() {\n    const valueField = this.state.frame.fields.find((f) => f.name === 'Value');\n    return valueField?.values[this.state.maxDifferenceIndex || 0];\n  }\n\n  private onAddToFilters() {\n    const variable = getFiltersVariable(this);\n    const attribute = this.getAttribute();\n    if (attribute) {\n      addToFilters(variable, attribute, this.getValue());\n    }\n  }\n\n  public static Component = ({ model }: SceneComponentProps<HighestDifferencePanel>) => {\n    const { maxDifference, maxDifferenceIndex, panel } = model.useState();\n    const styles = useStyles2(getStyles);\n    const value = model.getValue();\n    const key = model.state.frame.name ?? '';\n    const filterExists = filterExistsForKey(getFiltersVariable(model), key, value.replace(/\"/g, ''));\n\n    return (\n      <div className={styles.container}>\n        {<panel.Component model={panel} />}\n        {maxDifference !== undefined && maxDifferenceIndex !== undefined && (\n          <div className={styles.differenceContainer}>\n            <Stack gap={1} justifyContent={'space-between'} alignItems={'center'}>\n              <div className={styles.title}>Highest difference</div>\n              {!filterExists && (\n                <Button\n                  size=\"sm\"\n                  variant=\"primary\"\n                  icon={'search-plus'}\n                  fill=\"text\"\n                  onClick={() => model.onAddToFilters()}\n                >\n                  Add to filters\n                </Button>\n              )}\n            </Stack>\n\n            <div className={styles.differenceValue}>\n              {(Math.abs(maxDifference) * 100).toFixed(maxDifference === 0 ? 0 : 2)}%\n            </div>\n            <div className={styles.value}>{value}</div>\n          </div>\n        )}\n      </div>\n    );\n  };\n}\n\nfunction getStyles(theme: GrafanaTheme2) {\n  return {\n    container: css({\n      display: 'flex',\n      flexDirection: 'column',\n      flexGrow: 1,\n      height: '100%',\n    }),\n    differenceContainer: css({\n      display: 'flex',\n      flexDirection: 'column',\n      flexGrow: 1,\n      border: `1px solid ${theme.colors.secondary.border}`,\n      background: theme.colors.background.primary,\n      padding: '8px',\n      marginBottom: theme.spacing(2),\n      fontSize: '12px',\n    }),\n    differenceValue: css({\n      fontSize: '36px',\n      fontWeight: 'bold',\n      textAlign: 'center',\n    }),\n    value: css({\n      textAlign: 'center',\n      color: theme.colors.secondary.text,\n      textWrap: 'nowrap',\n      whiteSpace: 'nowrap',\n      overflow: 'hidden',\n      textOverflow: 'ellipsis',\n    }),\n    title: css({\n      fontWeight: 500,\n    }),\n  };\n}\n","import { PanelBuilders, SceneCSSGridItem, SceneCSSGridLayout, SceneDataNode, VizPanelState } from '@grafana/scenes';\nimport { ByFrameRepeater } from '../ByFrameRepeater';\nimport { DataFrame, PanelData } from '@grafana/data';\nimport { AxisPlacement } from '@grafana/ui';\nimport { TooltipDisplayMode } from '@grafana/schema';\nimport { HighestDifferencePanel } from './HighestDifferencePanel';\nimport { GRID_TEMPLATE_COLUMNS, MetricFunction } from '../../../utils/shared';\n\nexport const BaselineColor = '#5794F299';\nexport const SelectionColor = '#FF9930';\n\nexport function buildAllComparisonLayout(\n  actionsFn: (df: DataFrame) => VizPanelState['headerActions'],\n  metric: MetricFunction\n) {\n  const panels: Record<string, SceneCSSGridItem> = {};\n\n  return new ByFrameRepeater({\n    body: new SceneCSSGridLayout({\n      templateColumns: GRID_TEMPLATE_COLUMNS,\n      autoRows: '320px',\n      children: [],\n    }),\n    getLayoutChild: getLayoutChild(panels, getFrameName, actionsFn, metric),\n  });\n}\n\nconst getFrameName = (df: DataFrame) => {\n  return df.name || 'No name available';\n};\n\nfunction getLayoutChild(\n  panels: Record<string, SceneCSSGridItem>,\n  getTitle: (df: DataFrame) => string,\n  actionsFn: (df: DataFrame) => VizPanelState['headerActions'],\n  metric: MetricFunction\n) {\n  return (data: PanelData, frame: DataFrame) => {\n    const existingGridItem = frame.name ? panels[frame.name] : undefined;\n\n    const dataNode = new SceneDataNode({\n      data: {\n        ...data,\n        series: [\n          {\n            ...frame,\n          },\n        ],\n      },\n    });\n\n    if (existingGridItem) {\n      existingGridItem.state.body?.setState({ $data: dataNode });\n      return existingGridItem;\n    }\n\n    const panel = getPanelConfig(metric).setTitle(getTitle(frame)).setData(dataNode);\n\n    const actions = actionsFn(frame);\n    if (actions) {\n      panel.setHeaderActions(actions);\n    }\n\n    const gridItem = new SceneCSSGridItem({\n      body: new HighestDifferencePanel({ frame, panel: panel.build() }),\n    });\n    if (frame.name) {\n      panels[frame.name] = gridItem;\n    }\n\n    return gridItem;\n  };\n}\n\nexport function getPanelConfig(metric: MetricFunction) {\n  return PanelBuilders.barchart()\n    .setOption('legend', { showLegend: false })\n    .setOption('tooltip', { mode: TooltipDisplayMode.Multi })\n    .setMax(1)\n    .setOverrides((overrides) => {\n      overrides.matchFieldsWithName('Value').overrideCustomFieldConfig('axisPlacement', AxisPlacement.Hidden);\n      overrides\n        .matchFieldsWithName('Baseline')\n        .overrideColor({\n          mode: 'fixed',\n          fixedColor: metric === 'duration' ? BaselineColor : 'semi-dark-green',\n        })\n        .overrideUnit('percentunit');\n      overrides\n        .matchFieldsWithName('Selection')\n        .overrideColor({\n          mode: 'fixed',\n          fixedColor: metric === 'duration' ? SelectionColor : 'semi-dark-red',\n        })\n        .overrideUnit('percentunit');\n    });\n}\n","import { VAR_FILTERS_EXPR } from '../../../utils/shared';\n\nexport function buildHistogramQuery() {\n  return {\n    refId: 'A',\n    query: `{${VAR_FILTERS_EXPR}} | histogram_over_time(duration)`,\n    queryType: 'traceql',\n    tableType: 'spans',\n    limit: 1000,\n    spss: 10,\n    filters: [],\n  };\n}\n","import React from 'react';\n\nimport { SceneObjectBase, SceneComponentProps, SceneObjectState } from '@grafana/scenes';\nimport { GrafanaTheme2 } from '@grafana/data';\nimport { Button, useStyles2 } from '@grafana/ui';\nimport { css } from '@emotion/css';\nimport { getMetricValue, getTraceByServiceScene, shouldShowSelection } from 'utils/utils';\nimport { reportAppInteraction, USER_EVENTS_ACTIONS, USER_EVENTS_PAGES } from '../../../utils/analytics';\nimport { ComparisonSelection } from '../../../utils/shared';\n\nexport interface ComparisonControlState extends SceneObjectState {\n  selection?: ComparisonSelection;\n}\n\nexport class DurationComparisonControl extends SceneObjectBase<ComparisonControlState> {\n  public constructor({ selection }: ComparisonControlState) {\n    super({ selection });\n  }\n\n  public startInvestigation = () => {\n    const byServiceScene = getTraceByServiceScene(this);\n    byServiceScene.setState({ selection: this.state.selection });\n    if (!shouldShowSelection(byServiceScene.state.actionView)) {\n      byServiceScene.setActionView('comparison');\n    }\n\n    reportAppInteraction(USER_EVENTS_PAGES.analyse_traces, USER_EVENTS_ACTIONS.analyse_traces.start_investigation, {\n      selection: this.state.selection,\n      metric: getMetricValue(this),\n    });\n  };\n\n  public static Component = ({ model }: SceneComponentProps<DurationComparisonControl>) => {\n    const { selection } = getTraceByServiceScene(model).useState();\n    const styles = useStyles2(getStyles);\n\n    const isDisabled = selection?.type === 'auto';\n    const tooltip = isDisabled\n      ? 'Slowest traces are selected, navigate to the Comparison or Slow Traces tab for more details.'\n      : undefined;\n\n    return (\n      <div className={styles.wrapper}>\n        <Button\n          variant=\"secondary\"\n          size=\"sm\"\n          fill=\"solid\"\n          disabled={isDisabled}\n          icon={'bolt'}\n          onClick={model.startInvestigation}\n          tooltip={tooltip}\n        >\n          {isDisabled ? 'Slowest traces selected' : 'Select slowest traces'}\n        </Button>\n      </div>\n    );\n  };\n}\n\nfunction getStyles(theme: GrafanaTheme2) {\n  return {\n    wrapper: css({\n      display: 'flex',\n      gap: '16px',\n      alignItems: 'center',\n    }),\n    placeholder: css({\n      color: theme.colors.text.secondary,\n      fontSize: theme.typography.bodySmall.fontSize,\n      display: 'flex',\n      gap: theme.spacing.x0_5,\n    }),\n  };\n}\n","import { map, Observable } from 'rxjs';\nimport { DataFrame, DataTopic, Field } from '@grafana/data';\nimport { CustomTransformerDefinition } from '@grafana/scenes';\nimport { LocationService } from '@grafana/runtime';\n\nexport const exemplarsTransformations = (locationService: LocationService): CustomTransformerDefinition[] => [\n  {\n    topic: DataTopic.Annotations,\n    operator: () => (source: Observable<DataFrame[]>) => {\n      return source.pipe(\n        map((data: DataFrame[]) => {\n          return data.map((frame) => {\n            if (frame.name === 'exemplar') {\n              const traceIDField = frame.fields.find((field: Field) => field.name === 'traceId');\n              if (traceIDField) {\n                // The traceID will be interpolated in the url\n                // Then, onClick we retrieve the traceId from the url and navigate to the trace exploration scene by setting the state\n                traceIDField.config.links = [\n                  {\n                    title: 'View trace',\n                    url: '#${__value.raw}',\n                    onClick: (event) => {\n                      event.e.stopPropagation(); // Prevent the click event from propagating to the parent anchor\n                      const parentAnchorHref = event.e.target?.parentElement?.parentElement?.href;\n                      if (!parentAnchorHref || parentAnchorHref.indexOf('#') === -1) {\n                        return;\n                      }\n                      const traceId = parentAnchorHref.split('#')[1];\n                      if (!traceId || traceId === '') {\n                        return;\n                      }\n                      locationService.partial({\n                        traceId,\n                      });\n                    },\n                  },\n                ];\n              }\n            }\n\n            return frame;\n          });\n        })\n      );\n    },\n  },\n];\n","import React from 'react';\n\nimport {\n  SceneComponentProps,\n  SceneDataTransformer,\n  SceneFlexItem,\n  SceneFlexLayout,\n  sceneGraph,\n  SceneObject,\n  SceneObjectBase,\n  SceneObjectState,\n} from '@grafana/scenes';\nimport { arrayToDataFrame, DataFrame, GrafanaTheme2, LoadingState } from '@grafana/data';\nimport { ComparisonSelection, EMPTY_STATE_ERROR_MESSAGE, explorationDS, MetricFunction } from 'utils/shared';\nimport { EmptyStateScene } from 'components/states/EmptyState/EmptyStateScene';\nimport { LoadingStateScene } from 'components/states/LoadingState/LoadingStateScene';\nimport { SkeletonComponent } from '../ByFrameRepeater';\nimport { barsPanelConfig } from '../panels/barsPanel';\nimport { metricByWithStatus } from '../queries/generateMetricsQuery';\nimport { StepQueryRunner } from '../queries/StepQueryRunner';\nimport { css } from '@emotion/css';\nimport { RadioButtonList, useStyles2 } from '@grafana/ui';\nimport {\n  fieldHasEmptyValues,\n  getLatencyPartialThresholdVariable,\n  getLatencyThresholdVariable,\n  getMetricVariable,\n  getTraceByServiceScene,\n  getTraceExplorationScene,\n  shouldShowSelection,\n} from '../../../utils/utils';\nimport { getHistogramVizPanel, yBucketToDuration } from '../panels/histogram';\nimport { TraceSceneState } from './TracesByServiceScene';\nimport { SelectionColor } from '../layouts/allComparison';\nimport { buildHistogramQuery } from '../queries/histogram';\nimport { isEqual } from 'lodash';\nimport { DurationComparisonControl } from './DurationComparisonControl';\nimport { exemplarsTransformations } from '../../../utils/exemplars';\n\nexport interface RateMetricsPanelState extends SceneObjectState {\n  panel?: SceneFlexLayout;\n  actions?: SceneObject[];\n  yBuckets?: number[];\n}\n\nexport class REDPanel extends SceneObjectBase<RateMetricsPanelState> {\n  constructor(state: RateMetricsPanelState) {\n    super({\n      yBuckets: [],\n      actions: [],\n      ...state,\n    });\n\n    this.addActivationHandler(() => {\n      this._onActivate();\n      const data = sceneGraph.getData(this);\n      const parent = getTraceByServiceScene(this);\n      const timeRange = sceneGraph.getTimeRange(this);\n\n      this._subs.add(\n        data.subscribeToState((newData) => {\n          if (newData.data?.state === LoadingState.Done) {\n            if (\n              newData.data.series.length === 0 ||\n              newData.data.series[0].length === 0 ||\n              fieldHasEmptyValues(newData)\n            ) {\n              this.setState({\n                panel: new SceneFlexLayout({\n                  children: [\n                    new SceneFlexItem({\n                      body: new EmptyStateScene({\n                        message: EMPTY_STATE_ERROR_MESSAGE,\n                        imgWidth: 150,\n                      }),\n                    }),\n                  ],\n                }),\n              });\n            } else {\n              let yBuckets: number[] | undefined = [];\n              if (this.isDuration()) {\n                yBuckets = getYBuckets(data.state.data?.series || []);\n                if (parent.state.selection && newData.data?.state === LoadingState.Done) {\n                  // set selection annotation if it exists\n                  const annotations = this.buildSelectionAnnotation(parent.state);\n\n                  if (annotations && !data.state.data?.annotations?.length) {\n                    data.setState({\n                      data: {\n                        ...data.state.data!,\n                        annotations: annotations,\n                      },\n                    });\n                  }\n                }\n\n                if (yBuckets?.length) {\n                  const { minDuration, minBucket } = getMinimumsForDuration(yBuckets);\n                  const selection: ComparisonSelection = { type: 'auto' };\n\n                  getLatencyThresholdVariable(this).changeValueTo(minDuration);\n                  getLatencyPartialThresholdVariable(this).changeValueTo(\n                    yBucketToDuration(minBucket - 1, yBuckets, 0.3)\n                  );\n\n                  selection.duration = { from: minDuration, to: '' };\n                  selection.raw = {\n                    x: {\n                      from: timeRange.state.value.from.unix() * 1000,\n                      to: timeRange.state.value.to.unix() * 1000,\n                    },\n                    y: { from: minBucket - 0.5, to: yBuckets.length - 0.5 },\n                  };\n\n                  this.setState({\n                    actions: [\n                      new DurationComparisonControl({\n                        selection,\n                      }),\n                    ],\n                  });\n                  if (!parent.state.selection?.duration || parent.state.selection.type === 'auto') {\n                    parent.setState({ selection });\n                  }\n                }\n              }\n\n              // update panel\n              this.setState({\n                yBuckets,\n                panel: this.getVizPanel(),\n              });\n            }\n          } else if (newData.data?.state === LoadingState.Loading) {\n            this.setState({\n              panel: new SceneFlexLayout({\n                direction: 'column',\n                children: [\n                  new LoadingStateScene({\n                    component: () => SkeletonComponent(1),\n                  }),\n                ],\n              }),\n            });\n          }\n        })\n      );\n\n      this._subs.add(\n        parent.subscribeToState((newState, prevState) => {\n          if (data.state.data?.state === LoadingState.Done) {\n            if (!isEqual(newState.selection, prevState.selection) || newState.actionView !== prevState.actionView) {\n              if (this.isDuration()) {\n                const annotations = this.buildSelectionAnnotation(newState);\n                data.setState({\n                  data: {\n                    ...data.state.data!,\n                    annotations: annotations,\n                  },\n                });\n              }\n            }\n          }\n        })\n      );\n    });\n  }\n\n  private isDuration() {\n    return getMetricVariable(this).state.value === 'duration';\n  }\n\n  private _onActivate() {\n    const metric = getMetricVariable(this).state.value as MetricFunction;\n    const traceExploration = getTraceExplorationScene(this);\n    this.setState({\n      $data: new SceneDataTransformer({\n        $data: new StepQueryRunner({\n          maxDataPoints: this.isDuration() ? 24 : 64,\n          datasource: explorationDS,\n          queries: [this.isDuration() ? buildHistogramQuery() : metricByWithStatus(metric)],\n        }),\n        transformations: [...exemplarsTransformations(traceExploration.state.locationService)],\n      }),\n      panel: this.getVizPanel(),\n    });\n  }\n\n  private getVizPanel() {\n    const metric = getMetricVariable(this).state.value as MetricFunction;\n    if (this.isDuration()) {\n      return getHistogramVizPanel(this, this.state.yBuckets ?? []);\n    }\n\n    return this.getRateOrErrorVizPanel(metric);\n  }\n\n  private getRateOrErrorVizPanel(type: MetricFunction) {\n    const panel = barsPanelConfig().setHoverHeader(true).setDisplayMode('transparent');\n    if (type === 'errors') {\n      panel.setCustomFieldConfig('axisLabel', 'Errors').setColor({\n        fixedColor: 'semi-dark-red',\n        mode: 'fixed',\n      });\n    }\n    return new SceneFlexLayout({\n      direction: 'row',\n      children: [\n        new SceneFlexItem({\n          body: panel.build(),\n        }),\n      ],\n    });\n  }\n\n  private buildSelectionAnnotation(state: TraceSceneState) {\n    if (!shouldShowSelection(state.actionView)) {\n      return undefined;\n    }\n\n    const xSel = state.selection?.raw?.x;\n    const ySel = state.selection?.raw?.y;\n\n    const frame = arrayToDataFrame([\n      {\n        time: xSel?.from || 0,\n        xMin: xSel?.from || 0,\n        xMax: xSel?.to || 0,\n        timeEnd: xSel?.to || 0,\n        yMin: ySel?.from,\n        yMax: ySel?.to,\n        isRegion: true,\n        fillOpacity: 0.15,\n        lineWidth: 1,\n        lineStyle: 'solid',\n        color: SelectionColor,\n        text: 'Comparison selection',\n      },\n    ]);\n    frame.name = 'xymark';\n\n    return [frame];\n  }\n\n  public static Component = ({ model }: SceneComponentProps<REDPanel>) => {\n    const { panel, actions } = model.useState();\n    const { value: metric } = getMetricVariable(model).useState();\n    const styles = useStyles2(getStyles);\n\n    if (!panel) {\n      return;\n    }\n\n    const getTitle = () => {\n      switch (metric) {\n        case 'errors':\n          return 'Errors rate';\n        case 'rate':\n          return 'Span rate';\n        case 'duration':\n          return 'Histogram by duration';\n        default:\n          return '';\n      }\n    };\n\n    const getSubtitle = () => {\n      switch (metric) {\n        case 'duration':\n          return 'Click and drag to compare selection with baseline.';\n        default:\n          return '';\n      }\n    };\n\n    const subtitle = getSubtitle();\n\n    return (\n      <div className={styles.container}>\n        <div className={styles.headerContainer}>\n          <div className={styles.titleContainer}>\n            <div className={styles.titleRadioWrapper}>\n              <RadioButtonList\n                name={`metric-${metric}`}\n                options={[{ title: '', value: 'selected' }]}\n                value={'selected'}\n              />\n              <span>{getTitle()}</span>\n            </div>\n            {subtitle && <div className={styles.subtitle}>{subtitle}</div>}\n          </div>\n          <div className={styles.actions}>\n            {actions?.map((action) => <action.Component model={action} key={action.state.key} />)}\n          </div>\n        </div>\n        <panel.Component model={panel} />\n      </div>\n    );\n  };\n}\n\nexport const getYBuckets = (series: DataFrame[]) => {\n  return series.map((s) => parseFloat(s.fields[1].name)).sort((a, b) => a - b);\n};\n\nexport const getMinimumsForDuration = (yBuckets: number[]) => {\n  const slowestBuckets = Math.floor(yBuckets.length / 4);\n  let minBucket = yBuckets.length - slowestBuckets - 1;\n  if (minBucket < 0) {\n    minBucket = 0;\n  }\n\n  return {\n    minDuration: yBucketToDuration(minBucket - 1, yBuckets),\n    minBucket,\n  };\n};\n\nfunction getStyles(theme: GrafanaTheme2) {\n  return {\n    container: css({\n      width: '100%',\n      display: 'flex',\n      flexDirection: 'column',\n      border: `1px solid ${theme.colors.border.weak}`,\n      borderRadius: '2px',\n      background: theme.colors.background.primary,\n\n      '.show-on-hover': {\n        display: 'none',\n      },\n      'section, section:hover': {\n        borderColor: 'transparent',\n      },\n      '& .u-select': {\n        border: '1px solid #ffffff75',\n      },\n    }),\n    headerContainer: css({\n      width: '100%',\n      display: 'flex',\n      flexDirection: 'row',\n      padding: '8px',\n      gap: '8px',\n      justifyContent: 'space-between',\n      alignItems: 'flex-start',\n      fontWeight: theme.typography.fontWeightBold,\n    }),\n    titleContainer: css({\n      display: 'flex',\n      flexDirection: 'column',\n      gap: '4px',\n    }),\n    titleRadioWrapper: css({\n      display: 'flex',\n    }),\n    actions: css({\n      display: 'flex',\n      gap: '8px',\n      alignItems: 'center',\n    }),\n    subtitle: css({\n      display: 'flex',\n      color: theme.colors.text.secondary,\n      fontSize: '12px',\n      fontWeight: 400,\n\n      '& svg': {\n        margin: '0 2px',\n      },\n    }),\n  };\n}\n","import React, { useState } from 'react';\nimport { useLocation } from 'react-use';\n\nimport { ToolbarButton } from '@grafana/ui';\n\nimport { TraceExploration } from '../../../pages/Explore';\nimport { getUrlForExploration } from '../../../utils/utils';\n\ninterface ShareExplorationActionState {\n  exploration: TraceExploration;\n}\n\nexport const ShareExplorationAction = ({ exploration }: ShareExplorationActionState) => {\n  const { origin } = useLocation();\n  const [tooltip, setTooltip] = useState('Copy url');\n\n  const onShare = () => {\n    if (navigator.clipboard) {\n      navigator.clipboard.writeText(origin + getUrlForExploration(exploration));\n      setTooltip('Copied!');\n      setTimeout(() => {\n        setTooltip('Copy url');\n      }, 2000);\n    }\n  };\n\n  return <ToolbarButton variant={'canvas'} icon={'share-alt'} tooltip={tooltip} onClick={onShare} />;\n};\n","import React, { useMemo } from 'react';\n\nimport { SelectableValue } from '@grafana/data';\nimport { Icon, Select, Field, useStyles2 } from '@grafana/ui';\nimport { VariableValue } from '@grafana/scenes';\nimport { css } from '@emotion/css';\n\ntype Props = {\n  options: Array<SelectableValue<string>>;\n  onChange: (columns: string[]) => void;\n  value?: VariableValue;\n};\n\nconst labelOrder = ['Resource', 'Span', 'Other'];\n\nexport function SpanListColumnsSelector({ options, value, onChange }: Props) {\n  const styles = useStyles2(getStyles);\n\n  const opt = useMemo(\n    () =>\n      Object.values(\n        options.reduce((acc, curr) => {\n          // use text until first dot as key\n          if (curr.label?.startsWith('resource.')) {\n            const group = acc['resource'] ?? { label: 'Resource', options: [] };\n            group.options.push({ ...curr, label: curr.label.slice(curr.label.indexOf('.') + 1) });\n            acc['resource'] = group;\n          } else {\n            if (curr.label?.startsWith('span.')) {\n              const group = acc['span'] ?? { label: 'Span', options: [] };\n              group.options.push({ ...curr, label: curr.label.slice(curr.label.indexOf('.') + 1) });\n              acc['span'] = group;\n            } else {\n              const group = acc['other'] ?? { label: 'Other', options: [] };\n              group.options.push(curr);\n              acc['other'] = group;\n            }\n          }\n          return acc;\n        }, {})\n      ).sort((a, b) => labelOrder.indexOf(a.label) - labelOrder.indexOf(b.label)),\n    [options]\n  );\n\n  return (\n    <div className={styles.container}>\n      <Field label=\"Add extra columns\">\n        <Select\n          value={value?.toString() !== '' ? (value?.toString()?.split(',') ?? '') : ''}\n          placeholder={'Select an attribute'}\n          options={opt}\n          onChange={(x) => onChange(x.map((x: SelectableValue) => x.value).join(','))}\n          isMulti={true}\n          isClearable\n          virtualized\n          prefix={<Icon name=\"columns\" />}\n        />\n      </Field>\n    </div>\n  );\n}\n\nconst getStyles = () => {\n  return {\n    container: css({\n      display: 'flex',\n      minWidth: '300px',\n\n      '& > div': {\n        width: '100%',\n      },\n    }),\n  };\n};\n","import React from 'react';\n\nimport {\n  PanelBuilders,\n  SceneComponentProps,\n  SceneDataTransformer,\n  SceneFlexItem,\n  SceneFlexLayout,\n  sceneGraph,\n  SceneObjectBase,\n  SceneObjectState,\n} from '@grafana/scenes';\nimport { DataFrame, GrafanaTheme2, LoadingState, PanelData, toURLRange, urlUtil, toOption } from '@grafana/data';\nimport { config } from '@grafana/runtime';\nimport { LoadingStateScene } from 'components/states/LoadingState/LoadingStateScene';\nimport { EmptyStateScene } from 'components/states/EmptyState/EmptyStateScene';\nimport { css } from '@emotion/css';\nimport Skeleton from 'react-loading-skeleton';\nimport { Icon, Link, TableCellDisplayMode, TableCustomCellOptions, useStyles2, useTheme2 } from '@grafana/ui';\nimport { map, Observable } from 'rxjs';\nimport {\n  getDataSource,\n  getSpanListColumnsVariable,\n  getTraceByServiceScene,\n  getTraceExplorationScene,\n} from '../../../../../utils/utils';\nimport { EMPTY_STATE_ERROR_MESSAGE, EMPTY_STATE_ERROR_REMEDY_MESSAGE } from '../../../../../utils/shared';\nimport { SpanListColumnsSelector } from './SpanListColumnsSelector';\nimport { reportAppInteraction, USER_EVENTS_PAGES, USER_EVENTS_ACTIONS } from 'utils/analytics';\n\nexport interface SpanListSceneState extends SceneObjectState {\n  panel?: SceneFlexLayout;\n  dataState: 'empty' | 'loading' | 'done';\n}\n\nexport class SpanListScene extends SceneObjectBase<SpanListSceneState> {\n  constructor(state: Partial<SpanListSceneState>) {\n    super({\n      dataState: 'empty',\n      ...state,\n    });\n\n    this.addActivationHandler(() => {\n      this.setState({\n        $data: new SceneDataTransformer({\n          transformations: this.setupTransformations(),\n        }),\n      });\n      const sceneData = sceneGraph.getData(this);\n\n      this.updatePanel(sceneData.state.data);\n      this._subs.add(\n        sceneData.subscribeToState((data) => {\n          this.updatePanel(data.data);\n        })\n      );\n    });\n  }\n\n  private setupTransformations() {\n    return [\n      () => (source: Observable<DataFrame[]>) => {\n        return source.pipe(\n          map((data: DataFrame[]) => {\n            return data.map((df) => {\n              const fields = df.fields;\n              const nameField = fields.find((f) => f.name === 'traceName');\n\n              const options: TableCustomCellOptions = {\n                type: TableCellDisplayMode.Custom,\n                cellComponent: (props) => {\n                  const data = props.frame;\n                  const traceIdField = data?.fields.find((f) => f.name === 'traceIdHidden');\n                  const spanIdField = data?.fields.find((f) => f.name === 'spanID');\n                  const traceId = traceIdField?.values[props.rowIndex];\n                  const spanId = spanIdField?.values[props.rowIndex];\n                  const traceExplorationScene = getTraceExplorationScene(this);\n\n                  if (!traceId) {\n                    return props.value as string;\n                  }\n\n                  const name = props.value ? (props.value as string) : '<name not yet available>';\n                  return (\n                    <div className={'cell-link-wrapper'}>\n                      <div\n                        className={'cell-link'}\n                        title={name}\n                        onClick={() => {\n                          traceExplorationScene.state.locationService.partial({\n                            traceId,\n                            spanId,\n                          });\n                        }}\n                      >\n                        {name}\n                      </div>\n                      <Link href={this.getLinkToExplore(traceId, spanId)} target={'_blank'} title={'Open in new tab'}>\n                        <Icon name={'external-link-alt'} size={'sm'} />\n                      </Link>\n                    </div>\n                  );\n                },\n              };\n              if (nameField?.config?.custom) {\n                nameField.config.custom.cellOptions = options;\n              }\n              return {\n                ...df,\n                fields,\n              };\n            });\n          })\n        );\n      },\n    ];\n  }\n\n  private getLinkToExplore = (traceId: string, spanId: string) => {\n    const traceExplorationScene = getTraceExplorationScene(this);\n    const datasource = getDataSource(traceExplorationScene);\n\n    const timeRange = sceneGraph.getTimeRange(this).state.value;\n    const exploreState = JSON.stringify({\n      ['explore-traces']: {\n        range: toURLRange(timeRange.raw),\n        queries: [{ refId: 'traceId', queryType: 'traceql', query: traceId, datasource }],\n        panelsState: {\n          trace: {\n            spanId,\n          },\n        },\n        datasource,\n      },\n    });\n    const subUrl = config.appSubUrl ?? '';\n    return urlUtil.renderUrl(`${subUrl}/explore`, { panes: exploreState, schemaVersion: 1 });\n  };\n\n  private updatePanel(data?: PanelData) {\n    if (\n      data?.state === LoadingState.Loading ||\n      data?.state === LoadingState.NotStarted ||\n      !data?.state ||\n      (data?.state === LoadingState.Streaming && !data.series?.[0]?.length)\n    ) {\n      if (this.state.dataState === 'loading') {\n        return;\n      }\n      this.setState({\n        dataState: 'loading',\n        panel: new SceneFlexLayout({\n          direction: 'row',\n          children: [\n            new LoadingStateScene({\n              component: SkeletonComponent,\n            }),\n          ],\n        }),\n      });\n      return;\n    }\n    if (data?.state === LoadingState.Done || data?.state === LoadingState.Streaming) {\n      if (data.series.length === 0 || data.series[0].length === 0) {\n        if (this.state.dataState === 'empty') {\n          return;\n        }\n        this.setState({\n          dataState: 'empty',\n          panel: new SceneFlexLayout({\n            children: [\n              new SceneFlexItem({\n                body: new EmptyStateScene({\n                  message: EMPTY_STATE_ERROR_MESSAGE,\n                  remedyMessage: EMPTY_STATE_ERROR_REMEDY_MESSAGE,\n                  padding: '32px',\n                }),\n              }),\n            ],\n          }),\n        });\n      } else if (this.state.dataState !== 'done') {\n        this.setState({\n          dataState: 'done',\n          panel: new SceneFlexLayout({\n            direction: 'row',\n            children: [\n              new SceneFlexItem({\n                body: PanelBuilders.table()\n                  .setHoverHeader(true)\n                  .setOverrides((builder) => {\n                    return builder\n                      .matchFieldsWithName('spanID')\n                      .overrideCustomFieldConfig('hidden', true)\n                      .matchFieldsWithName('traceService')\n                      .overrideCustomFieldConfig('width', 350)\n                      .matchFieldsWithName('traceName')\n                      .overrideCustomFieldConfig('width', 350);\n                  })\n                  .build(),\n              }),\n            ],\n          }),\n        });\n      }\n    }\n  }\n\n  public onChange = (columns: string[]) => {\n    const variable = getSpanListColumnsVariable(this);\n    if (variable.getValue() !== columns) {\n      variable.changeValueTo(columns);\n\n      reportAppInteraction(\n        USER_EVENTS_PAGES.analyse_traces,\n        USER_EVENTS_ACTIONS.analyse_traces.span_list_columns_changed,\n        {\n          columns,\n        }\n      );\n    }\n  };\n\n  public static Component = ({ model }: SceneComponentProps<SpanListScene>) => {\n    const { panel } = model.useState();\n    const styles = getStyles(useTheme2());\n    const variable = getSpanListColumnsVariable(model);\n    const { attributes } = getTraceByServiceScene(model).useState();\n\n    if (!panel) {\n      return;\n    }\n\n    return (\n      <div className={styles.container}>\n        <div className={styles.header}>\n          <div className={styles.description}>View a list of spans for the current set of filters.</div>\n          <SpanListColumnsSelector\n            options={attributes?.map((x) => toOption(x)) ?? []}\n            value={variable.getValue()}\n            onChange={model.onChange}\n          />\n        </div>\n        <panel.Component model={panel} />\n      </div>\n    );\n  };\n}\n\nconst getStyles = (theme: GrafanaTheme2) => {\n  return {\n    container: css({\n      display: 'contents',\n\n      '[role=\"cell\"] > div': {\n        display: 'flex',\n        width: '100%',\n      },\n\n      '.cell-link-wrapper': {\n        display: 'flex',\n        gap: '4px',\n        justifyContent: 'space-between',\n        alignItems: 'center',\n        width: '100%',\n\n        a: {\n          padding: 4,\n          fontSize: 0,\n\n          ':hover': {\n            background: theme.colors.background.secondary,\n          },\n        },\n      },\n\n      '.cell-link': {\n        color: theme.colors.text.link,\n        cursor: 'pointer',\n        maxWidth: '300px',\n        overflow: 'hidden',\n        textOverflow: 'ellipsis',\n\n        ':hover': {\n          textDecoration: 'underline',\n        },\n      },\n    }),\n    description: css({\n      fontSize: theme.typography.h6.fontSize,\n      padding: `${theme.spacing(1)} 0 ${theme.spacing(2)} 0`,\n    }),\n    header: css({\n      display: 'flex',\n      justifyContent: 'space-between',\n      alignItems: 'flex-start',\n      gap: '10px',\n    }),\n  };\n};\n\nconst SkeletonComponent = () => {\n  const styles = useStyles2(getSkeletonStyles);\n\n  return (\n    <div className={styles.container}>\n      <div className={styles.title}>\n        <Skeleton count={1} width={80} />\n      </div>\n      {[...Array(3)].map((_, i) => (\n        <div className={styles.row} key={i}>\n          {[...Array(6)].map((_, j) => (\n            <span className={styles.rowItem} key={j}>\n              <Skeleton count={1} />\n            </span>\n          ))}\n        </div>\n      ))}\n    </div>\n  );\n};\n\nfunction getSkeletonStyles(theme: GrafanaTheme2) {\n  return {\n    container: css({\n      height: '100%',\n      width: '100%',\n      position: 'absolute',\n      backgroundColor: theme.colors.background.primary,\n      border: `1px solid ${theme.colors.border.weak}`,\n      padding: '5px',\n    }),\n    title: css({\n      marginBottom: '20px',\n    }),\n    row: css({\n      marginBottom: '5px',\n      display: 'flex',\n      justifyContent: 'space-around',\n    }),\n    rowItem: css({\n      width: '14%',\n    }),\n  };\n}\n","import React from 'react';\n\nimport { SceneComponentProps, SceneFlexItem, SceneObject, SceneObjectBase, SceneObjectState } from '@grafana/scenes';\nimport { SpanListScene } from 'components/Explore/TracesByService/Tabs/Spans/SpanListScene';\nimport { getMetricVariable, getTraceByServiceScene } from 'utils/utils';\n\nexport interface SpansSceneState extends SceneObjectState {\n  body?: SceneObject;\n}\n\nexport class SpansScene extends SceneObjectBase<SpansSceneState> {\n  constructor(state: Partial<SpansSceneState>) {\n    super({ ...state });\n\n    this.addActivationHandler(this._onActivate.bind(this));\n  }\n\n  private _onActivate() {\n    this._subs.add(\n      getTraceByServiceScene(this).state.$data?.subscribeToState(() => {\n        this.updateBody();\n      })\n    );\n\n    this._subs.add(\n      getTraceByServiceScene(this).subscribeToState((newState, prevState) => {\n        if (newState.$data?.state.key !== prevState.$data?.state.key) {\n          this.updateBody();\n        }\n      })\n    );\n\n    this._subs.add(\n      getMetricVariable(this).subscribeToState((newState, prevState) => {\n        if (newState.value !== prevState.value) {\n          this.updateBody();\n        }\n      })\n    );\n\n    this.updateBody();\n  }\n\n  private updateBody() {\n    this.setState({ body: new SpanListScene({}) });\n  }\n\n  public static Component = ({ model }: SceneComponentProps<SpansScene>) => {\n    const { body } = model.useState();\n    return body && <body.Component model={body} />;\n  };\n}\n\nexport function buildSpansScene() {\n  return new SceneFlexItem({\n    body: new SpansScene({}),\n  });\n}\n","import { Span } from '../../types';\n\nexport function nestedSetLeft(span: Span): number {\n  if (span.attributes) {\n    for (const a of span.attributes) {\n      if (a.key === 'nestedSetLeft') {\n        return parseInt(a.value.intValue || a.value.Value?.int_value || '0', 10);\n      }\n    }\n  }\n\n  throw new Error('nestedSetLeft not found!');\n}\n\nexport function nestedSetRight(span: Span): number {\n  if (span.attributes) {\n    for (const a of span.attributes) {\n      if (a.key === 'nestedSetRight') {\n        return parseInt(a.value.intValue || a.value.Value?.int_value || '0', 10);\n      }\n    }\n  }\n\n  throw new Error('nestedSetRight not found!');\n}\n","import { Span } from '../../types';\nimport { nestedSetLeft, nestedSetRight } from './utils';\n\nexport class TreeNode {\n  name: string;\n  serviceName: string;\n  operationName: string;\n  spans: Span[];\n  left: number;\n  right: number;\n  children: TreeNode[];\n  parent: TreeNode | null;\n  traceID: string;\n\n  constructor({\n    name,\n    serviceName,\n    operationName,\n    spans,\n    left,\n    right,\n    traceID,\n  }: {\n    name: string;\n    serviceName: string;\n    operationName: string;\n    spans: Span[];\n    left: number;\n    right: number;\n    traceID: string;\n  }) {\n    this.name = name;\n    this.serviceName = serviceName;\n    this.operationName = operationName;\n    this.spans = spans;\n    this.left = left;\n    this.right = right;\n    this.children = [];\n    this.parent = null;\n    this.traceID = traceID;\n  }\n\n  addSpan(span: Span) {\n    // expand our left/right based on this span\n    this.left = Math.min(nestedSetLeft(span), this.left);\n    this.right = Math.max(nestedSetRight(span), this.right);\n    this.spans.push(span);\n  }\n\n  addChild(node: TreeNode) {\n    node.parent = this;\n    this.children.push(node);\n  }\n\n  isChild(span: Span): boolean {\n    return nestedSetLeft(span) > this.left && nestedSetRight(span) < this.right;\n  }\n\n  findMatchingChild(span: Span): TreeNode | null {\n    const name = nodeName(span);\n\n    for (const child of this.children) {\n      if (child.name === name) {\n        return child;\n      }\n    }\n\n    return null;\n  }\n}\n\nexport function createNode(s: Span): TreeNode {\n  const serviceNameAttr = s.attributes?.find((a) => a.key === 'service.name');\n  return new TreeNode({\n    left: nestedSetLeft(s),\n    right: nestedSetRight(s),\n    name: nodeName(s),\n    serviceName: serviceNameAttr?.value.stringValue ?? serviceNameAttr?.value?.Value?.string_value ?? '',\n    operationName: s.name ?? '',\n    spans: [s],\n    traceID: s.traceId ?? '',\n  });\n}\n\nfunction nodeName(s: Span): string {\n  let svcName = '';\n  for (const a of s.attributes || []) {\n    if (a.key === 'service.name' && a.value.stringValue) {\n      svcName = a.value.stringValue;\n    }\n  }\n\n  return `${svcName}:${s.name}`;\n}\n","import { TraceSearchMetadata } from '../../types';\nimport { createNode, TreeNode } from './tree-node';\nimport { nestedSetLeft } from './utils';\n\nexport function mergeTraces(traces: TraceSearchMetadata[]): TreeNode {\n  const tree = new TreeNode({\n    name: 'root',\n    serviceName: '',\n    operationName: '',\n    left: Number.MIN_SAFE_INTEGER,\n    right: Number.MAX_SAFE_INTEGER,\n    spans: [],\n    traceID: '',\n  });\n\n  if (traces && traces.length > 0) {\n    for (const trace of traces) {\n      if (trace.spanSets?.length !== 1) {\n        throw new Error('there should be only 1 spanset!');\n      }\n\n      const traceStartTime = parseInt(trace.startTimeUnixNano || '0', 10);\n\n      const ss = trace.spanSets[0];\n      // sort by nestedSetLeft\n      ss.spans.sort((s1, s2) => nestedSetLeft(s1) - nestedSetLeft(s2));\n\n      // reset curNode to root each loop to re-overlay the next trace\n      let curNode: TreeNode = tree;\n      // left/right is only valid w/i a trace, so reset it each loop\n      resetLeftRight(tree);\n      for (const span of ss.spans) {\n        // force traceID to be the same for all spans in a trace\n        span.traceId = trace.traceID;\n        span.startTimeUnixNano = `${parseInt(span.startTimeUnixNano, 10) - traceStartTime}`;\n\n        // walk up the tree until we find a node that is a parent of this span\n        while (curNode.parent !== null) {\n          if (curNode.isChild(span)) {\n            break;\n          }\n          curNode = curNode.parent;\n        }\n\n        // is there an already existing child that matches the span?\n        const child = curNode.findMatchingChild(span);\n        if (child) {\n          child.addSpan(span);\n          // to the next span!\n          curNode = child;\n          continue;\n        }\n\n        // if not, create a new child node and make it the cur node\n        const newNode = createNode(span);\n        newNode.traceID = trace.traceID;\n        curNode.addChild(newNode);\n        curNode = newNode;\n      }\n    }\n  }\n\n  return tree;\n}\n\nexport function dumpTree(t: TreeNode, depth: number): string {\n  let result = '';\n  const space = ' '.repeat(depth * 2);\n\n  result += `${space}${t.name} ${t.spans.length}\\n`;\n\n  for (const c of t.children) {\n    result += dumpTree(c, depth + 1);\n  }\n  return result;\n}\n\nfunction resetLeftRight(t: TreeNode) {\n  t.left = Number.MAX_SAFE_INTEGER;\n  t.right = Number.MIN_SAFE_INTEGER;\n\n  for (const c of t.children) {\n    resetLeftRight(c);\n  }\n}\n","import React from 'react';\n\nimport {\n  PanelBuilders,\n  SceneComponentProps,\n  SceneDataNode,\n  SceneDataTransformer,\n  SceneFlexItem,\n  SceneFlexLayout,\n  sceneGraph,\n  SceneObjectBase,\n  SceneObjectState,\n  SceneQueryRunner,\n} from '@grafana/scenes';\nimport {\n  EMPTY_STATE_ERROR_MESSAGE,\n  explorationDS,\n  filterStreamingProgressTransformations,\n  MetricFunction,\n  VAR_FILTERS_EXPR,\n  VAR_LATENCY_PARTIAL_THRESHOLD_EXPR,\n  VAR_LATENCY_THRESHOLD_EXPR,\n} from '../../../../../utils/shared';\nimport { TraceSearchMetadata } from '../../../../../types';\nimport { mergeTraces } from '../../../../../utils/trace-merge/merge';\nimport { createDataFrame, Field, FieldType, GrafanaTheme2, LinkModel, LoadingState } from '@grafana/data';\nimport { TreeNode } from '../../../../../utils/trace-merge/tree-node';\nimport { Icon, LinkButton, Stack, Text, useTheme2 } from '@grafana/ui';\nimport Skeleton from 'react-loading-skeleton';\nimport { EmptyState } from '../../../../states/EmptyState/EmptyState';\nimport { css } from '@emotion/css';\nimport { getTraceExplorationScene } from 'utils/utils';\nimport { structureDisplayName } from '../TabsBarScene';\n\nexport interface ServicesTabSceneState extends SceneObjectState {\n  panel?: SceneFlexLayout;\n  loading?: boolean;\n  tree?: TreeNode;\n  metric?: MetricFunction;\n}\n\nconst ROOT_SPAN_ID = '0000000000000000';\n\nexport class StructureTabScene extends SceneObjectBase<ServicesTabSceneState> {\n  constructor(state: Partial<ServicesTabSceneState>) {\n    super({\n      $data: new SceneDataTransformer({\n        $data: new SceneQueryRunner({\n          datasource: explorationDS,\n          queries: [buildQuery(state.metric as MetricFunction)],\n        }),\n        transformations: filterStreamingProgressTransformations,\n      }),\n      loading: true,\n      ...state,\n    });\n\n    this.addActivationHandler(this._onActivate.bind(this));\n  }\n\n  public _onActivate() {\n    this.state.$data?.subscribeToState((state) => {\n      this.setState({ loading: state.data?.state === LoadingState.Loading });\n\n      if (\n        (state.data?.state === LoadingState.Done || state.data?.state === LoadingState.Streaming) &&\n        state.data?.series.length\n      ) {\n        const frame = state.data?.series[0].fields[0].values[0];\n        if (frame) {\n          const response = JSON.parse(frame) as TraceSearchMetadata[];\n          const merged = mergeTraces(response);\n          merged.children.sort((a, b) => countSpans(b) - countSpans(a));\n          this.setState({\n            tree: merged,\n            panel: new SceneFlexLayout({\n              height: '100%',\n              wrap: 'wrap',\n              children: this.getPanels(merged),\n            }),\n          });\n        }\n      }\n    });\n  }\n\n  private getPanels(tree: TreeNode) {\n    return tree.children.map((child) => {\n      return new SceneFlexItem({\n        height: 150,\n        width: '100%',\n        minHeight: '400px',\n        body: this.getPanel(child),\n      });\n    });\n  }\n\n  private getPanel(tree: TreeNode) {\n    const timeRange = sceneGraph.getTimeRange(this);\n    const traceExplorationScene = getTraceExplorationScene(this);\n    const from = timeRange.state.value.from;\n    const to = timeRange.state.value.to;\n\n    return PanelBuilders.traces()\n      .setTitle(`Structure for ${tree.serviceName} [${countSpans(tree)} spans used]`)\n      .setOption('createFocusSpanLink' as any, (traceId: string, spanId: string): LinkModel<Field> => {\n        return {\n          title: 'Open trace',\n          href: '#',\n          onClick: () => {\n            traceExplorationScene.state.locationService.partial({ traceId, spanId });\n          },\n          origin: {} as Field,\n          target: '_self',\n        };\n      })\n      .setData(\n        new SceneDataNode({\n          data: {\n            state: LoadingState.Done,\n            timeRange: {\n              from,\n              to,\n              raw: { from, to },\n            },\n            series: [\n              {\n                ...this.buildData(tree),\n              },\n            ],\n          },\n        })\n      )\n      .build();\n  }\n\n  private buildData(tree: TreeNode) {\n    const trace = this.getTrace(tree, ROOT_SPAN_ID);\n    const traceName = trace[0].serviceName + ':' + trace[0].operationName;\n\n    return createDataFrame({\n      name: `Trace ${traceName}`,\n      refId: `trace_${traceName}`,\n      fields: [\n        {\n          name: 'references',\n          type: FieldType.other,\n          values: trace.map((x) => x.references),\n        },\n        {\n          name: 'traceID',\n          type: FieldType.string,\n          values: trace.map((x) => x.traceID),\n        },\n        {\n          name: 'spanID',\n          type: FieldType.string,\n          values: trace.map((x) => x.spanID),\n        },\n        {\n          name: 'parentSpanID',\n          type: FieldType.string,\n          values: trace.map((x) => x.parentSpanId),\n        },\n        {\n          name: 'serviceName',\n          type: FieldType.string,\n          values: trace.map((x) => x.serviceName),\n        },\n        {\n          name: 'operationName',\n          type: FieldType.string,\n          values: trace.map((x) => x.operationName),\n        },\n        {\n          name: 'duration',\n          type: FieldType.number,\n          values: trace.map((x) => x.duration),\n        },\n        {\n          name: 'startTime',\n          type: FieldType.number,\n          values: trace.map((x) => x.startTime),\n        },\n        {\n          name: 'statusCode',\n          type: FieldType.number,\n          values: trace.map((x) => x.statusCode),\n        },\n      ],\n    });\n  }\n\n  private getTrace(node: TreeNode, spanID: string) {\n    const erroredSpans = node.spans.reduce(\n      (acc, c) => (c.attributes?.find((a) => a.key === 'status')?.value.stringValue === 'error' ? acc + 1 : acc),\n      0\n    );\n\n    // start time needs to be different from zero otherwise for the root, otherwise the Trace View won't render it\n    let startTime = 0.0001;\n    if (spanID !== ROOT_SPAN_ID) {\n      startTime =\n        node.spans.reduce((acc, c) => acc + parseInt(c.startTimeUnixNano, 10), 0) / node.spans.length / 1000000;\n    }\n\n    const values = [\n      {\n        // Add last 5 spans of the list as external references\n        // refType = 'EXTERNAL' doesn't mean anything, it's just to be different from CHILD_OF and FOLLOW_FROM\n        references: node.spans.slice(-5).map((x) => ({\n          refType: 'EXTERNAL',\n          traceID: x.traceId,\n          spanID: x.spanID,\n        })),\n        traceID: node.traceID,\n        spanID: node.spans[0].spanID,\n        parentSpanId: spanID,\n        serviceName: node.serviceName,\n        operationName: node.operationName,\n        statusCode: erroredSpans > 0 ? 2 /*error*/ : 0 /*unset*/,\n        duration: node.spans.reduce((acc, c) => acc + parseInt(c.durationNanos, 10), 0) / node.spans.length / 1000000,\n        startTime,\n      },\n    ];\n\n    for (const child of node.children) {\n      values.push(...this.getTrace(child, node.spans[0].spanID));\n    }\n    return values;\n  }\n\n  public static Component = ({ model }: SceneComponentProps<StructureTabScene>) => {\n    const { tree, loading, panel, $data } = model.useState();\n    const styles = getStyles(useTheme2());\n    const theme = useTheme2();\n\n    const exploration = getTraceExplorationScene(model);\n    const { value } = exploration.getMetricVariable().useState();\n\n    const metric = value as MetricFunction;\n\n    let isLoading = loading || !tree?.children.length;\n    if ($data?.state.data?.state === LoadingState.Done) {\n      isLoading = false;\n    }\n\n    let description;\n    let emptyMsg = '';\n    switch (metric) {\n      case 'rate':\n        description = (\n          <>\n            <div>Analyse the service structure of the traces that match the current filters.</div>\n            <div>Each panel represents an aggregate view compiled using spans from multiple traces.</div>\n          </>\n        );\n        emptyMsg = 'server';\n        break;\n      case 'errors':\n        description = (\n          <>\n            <div>Analyse the errors structure of the traces that match the current filters.</div>\n            <div>Each panel represents an aggregate view compiled using spans from multiple traces.</div>\n          </>\n        );\n        emptyMsg = 'error';\n        break;\n      case 'duration':\n        description = (\n          <>\n            <div>Analyse the structure of slow spans from the traces that match the current filters.</div>\n            <div>Each panel represents an aggregate view compiled using spans from multiple traces.</div>\n          </>\n        );\n        emptyMsg = 'slow';\n        break;\n    }\n\n    const tabName = structureDisplayName(metric);\n\n    const noDataMessage = (\n      <>\n        <Text textAlignment={'center'} variant=\"h3\">\n          {EMPTY_STATE_ERROR_MESSAGE}\n        </Text>\n        <Text textAlignment={'center'} variant=\"body\">\n          <div className={styles.longText}>\n            The structure tab shows {emptyMsg} spans beneath what you are currently investigating. Currently, there are\n            no descendant {emptyMsg} spans beneath the spans you are investigating.\n          </div>\n        </Text>\n        <Stack gap={0.5} alignItems={'center'}>\n          <Icon name=\"info-circle\" />\n          <Text textAlignment={'center'} variant=\"body\">\n            The structure tab works best with full traces.\n          </Text>\n        </Stack>\n\n        <div className={styles.actionContainer}>\n          Read more about\n          <div className={styles.action}>\n            <LinkButton\n              icon=\"external-link-alt\"\n              fill=\"solid\"\n              size={'sm'}\n              target={'_blank'}\n              href={\n                'https://grafana.com/docs/grafana/next/explore/simplified-exploration/traces/concepts/#trace-structure'\n              }\n            >\n              {`${tabName.toLowerCase()}`}\n            </LinkButton>\n          </div>\n        </div>\n      </>\n    );\n\n    return (\n      <Stack direction={'column'} gap={1}>\n        <div className={styles.description}>{description}</div>\n        {isLoading && (\n          <Stack direction={'column'} gap={2}>\n            <Skeleton\n              count={4}\n              height={200}\n              baseColor={theme.colors.background.secondary}\n              highlightColor={theme.colors.background.primary}\n            />\n          </Stack>\n        )}\n\n        {!isLoading && tree && tree.children.length > 0 && (\n          <div className={styles.traceViewList}>{panel && <panel.Component model={panel} />}</div>\n        )}\n\n        {$data?.state.data?.state === LoadingState.Done && !tree?.children.length && (\n          <EmptyState message={noDataMessage} padding={'32px'} />\n        )}\n      </Stack>\n    );\n  };\n}\n\nfunction buildQuery(metric: MetricFunction) {\n  let metricQuery;\n  let selectionQuery = '';\n  switch (metric) {\n    case 'errors':\n      metricQuery = 'status = error';\n      selectionQuery = 'status = error';\n      break;\n    case 'duration':\n      metricQuery = `duration > ${VAR_LATENCY_PARTIAL_THRESHOLD_EXPR}`;\n      selectionQuery = `duration > ${VAR_LATENCY_THRESHOLD_EXPR}`;\n      break;\n    default:\n      metricQuery = 'kind = server';\n      break;\n  }\n\n  return {\n    refId: 'A',\n    query: `{${VAR_FILTERS_EXPR} ${\n      selectionQuery.length ? `&& ${selectionQuery}` : ''\n    }} &>> { ${metricQuery} } | select(status, resource.service.name, name, nestedSetParent, nestedSetLeft, nestedSetRight)`,\n    queryType: 'traceql',\n    tableType: 'raw',\n    limit: 200,\n    spss: 20,\n    filters: [],\n  };\n}\n\nconst getStyles = (theme: GrafanaTheme2) => {\n  return {\n    description: css({\n      fontSize: theme.typography.h6.fontSize,\n      padding: `${theme.spacing(1)} 0`,\n    }),\n    traceViewList: css({\n      display: 'flex',\n      flexDirection: 'column',\n      gap: theme.spacing.x1,\n      // Hide the minimap and header components\n      'div[class*=\"panel-content\"] > div': {\n        overflow: 'auto',\n        '> :not([class*=\"TraceTimelineViewer\"])': {\n          display: 'none',\n        },\n      },\n      // Hide the Span and Resource accordions from span details\n      'div[data-testid=\"span-detail-component\"] > :nth-child(4) > :nth-child(1)': {\n        display: 'none',\n      },\n\n      // Hide span details row\n      '.span-detail-row': {\n        display: 'none',\n      },\n\n      // Remove cursor pointer as span details is hidden\n      'div[data-testid=\"TimelineRowCell\"]': {\n        'button[role=\"switch\"]': {\n          cursor: 'text',\n        }\n      },\n      'div[data-testid=\"span-view\"]': {\n        cursor: 'text !important',\n      },\n    }),\n    longText: css({\n      maxWidth: '800px',\n      margin: '0 auto',\n    }),\n    action: css({\n      marginLeft: theme.spacing(1),\n    }),\n    actionContainer: css({\n      display: 'flex',\n      justifyContent: 'space-between',\n      alignItems: 'center',\n    }),\n  };\n};\n\nfunction countSpans(tree: TreeNode) {\n  let count = tree.spans.length;\n  for (const child of tree.children) {\n    count += countSpans(child);\n  }\n  return count;\n}\n\nexport function buildStructureScene(metric: MetricFunction) {\n  return new SceneFlexItem({\n    body: new StructureTabScene({ metric }),\n  });\n}\n","import { css } from '@emotion/css';\nimport { useResizeObserver } from '@react-aria/utils';\nimport React, { useEffect, useMemo, useRef, useState } from 'react';\n\nimport { GrafanaTheme2, SelectableValue } from '@grafana/data';\nimport { Select, RadioButtonGroup, useStyles2, useTheme2, measureText, Field, InputActionMeta } from '@grafana/ui';\nimport { ALL, ignoredAttributes, maxOptions, MetricFunction, RESOURCE_ATTR, SPAN_ATTR } from 'utils/shared';\nimport { AttributesBreakdownScene } from './TracesByService/Tabs/Breakdown/AttributesBreakdownScene';\nimport { AttributesComparisonScene } from './TracesByService/Tabs/Comparison/AttributesComparisonScene';\nimport { getFiltersVariable, getMetricVariable } from 'utils/utils';\n\ntype Props = {\n  options: Array<SelectableValue<string>>;\n  radioAttributes: string[];\n  value?: string;\n  onChange: (label: string, ignore?: boolean) => void;\n  showAll?: boolean;\n  model: AttributesBreakdownScene | AttributesComparisonScene;\n};\n\nconst additionalWidthPerItem = 40;\nconst widthOfOtherAttributes = 180;\n\nexport function GroupBySelector({ options, radioAttributes, value, onChange, showAll = false, model }: Props) {\n  const styles = useStyles2(getStyles);\n  const theme = useTheme2();\n  const { fontSize } = theme.typography;\n\n  const [selectQuery, setSelectQuery] = useState<string>('');\n\n  const [availableWidth, setAvailableWidth] = useState<number>(0);\n  const controlsContainer = useRef<HTMLDivElement>(null);\n\n  const { filters } = getFiltersVariable(model).useState();\n  const { value: metric } = getMetricVariable(model).useState();\n  const metricValue = metric as MetricFunction;\n\n  useResizeObserver({\n    ref: controlsContainer,\n    onResize: () => {\n      const element = controlsContainer.current;\n      if (element) {\n        setAvailableWidth(element.clientWidth);\n      }\n    },\n  });\n\n  const radioOptions = useMemo(() => {\n    let radioOptionsWidth = 0;\n    return radioAttributes\n      .filter((op) => {\n        // remove radio options that are in the dropdown\n        let checks = !!options.find((o) => o.value === op);\n\n        // remove radio options that are in the filters\n        if (filters.find((f) => f.key === op && (f.operator === '=' || f.operator === '!='))) {\n          return false;\n        }\n\n        // if filters (primary signal) has 'Full Traces' selected, then don't add rootName or rootServiceName to options\n        // as you would overwrite it in the query if it's selected\n        if (filters.find((f) => f.key === 'nestedSetParent')) {\n          checks = checks && op !== 'rootName' && op !== 'rootServiceName';\n        }\n\n        // if rate or error rate metric is selected, then don't add status to options\n        // as you would overwrite it in the query if it's selected\n        if (metricValue === 'rate' || metricValue === 'errors') {\n          checks = checks && op !== 'status';\n        }\n\n        return checks;\n      })\n      .map((attribute) => ({\n        label: attribute.replace(SPAN_ATTR, '').replace(RESOURCE_ATTR, ''),\n        text: attribute,\n        value: attribute,\n      }))\n      .filter((option) => {\n        const text = option.label || option.text || '';\n        const textWidth = measureText(text, fontSize).width;\n        if (radioOptionsWidth + textWidth + additionalWidthPerItem + widthOfOtherAttributes < availableWidth) {\n          radioOptionsWidth += textWidth + additionalWidthPerItem;\n          return true;\n        } else {\n          return false;\n        }\n      });\n  }, [radioAttributes, options, filters, metricValue, fontSize, availableWidth]);\n\n  const otherAttrOptions = useMemo(() => {\n    const ops = options.filter((op) => !radioOptions.find((ro) => ro.value === op.value?.toString()));\n    return filteredOptions(ops, selectQuery);\n  }, [selectQuery, options, radioOptions]);\n\n  const getModifiedSelectOptions = (options: Array<SelectableValue<string>>) => {\n    return options\n      .filter((op) => !ignoredAttributes.includes(op.value?.toString()!))\n      .map((op) => ({ label: op.label?.replace(SPAN_ATTR, '').replace(RESOURCE_ATTR, ''), value: op.value }));\n  };\n\n  // Set default value as first value in options\n  useEffect(() => {\n    const defaultValue = radioAttributes[0] ?? options[0]?.value;\n    if (defaultValue) {\n      if (!showAll && (!value || value === ALL)) {\n        onChange(defaultValue, true);\n      }\n    }\n  });\n\n  const showAllOption = showAll ? [{ label: ALL, value: ALL }] : [];\n  const defaultOnChangeValue = showAll ? ALL : '';\n\n  return (\n    <Field label=\"Group by\">\n      <div ref={controlsContainer} className={styles.container}>\n        {radioOptions.length > 0 && (\n          <RadioButtonGroup options={[...showAllOption, ...radioOptions]} value={value} onChange={onChange} />\n        )}\n        <Select\n          value={value && getModifiedSelectOptions(otherAttrOptions).some((x) => x.value === value) ? value : null} // remove value from select when radio button clicked\n          placeholder={'Other attributes'}\n          options={getModifiedSelectOptions(otherAttrOptions)}\n          onChange={(selected) => {\n            const newSelected = selected?.value ?? defaultOnChangeValue;\n            onChange(newSelected);\n          }}\n          className={styles.select}\n          isClearable\n          onInputChange={(value: string, { action }: InputActionMeta) => {\n            if (action === 'input-change') {\n              setSelectQuery(value);\n            }\n          }}\n          onCloseMenu={() => setSelectQuery('')}\n          virtualized\n        />\n      </div>\n    </Field>\n  );\n}\n\nfunction getStyles(theme: GrafanaTheme2) {\n  return {\n    select: css({\n      maxWidth: theme.spacing(22),\n    }),\n    container: css({\n      display: 'flex',\n      gap: theme.spacing(1),\n    }),\n  };\n}\n\nexport const filteredOptions = (options: Array<SelectableValue<string>>, query: string) => {\n  if (options.length === 0) {\n    return [];\n  }\n\n  if (query.length === 0) {\n    return options.slice(0, maxOptions);\n  }\n\n  const queryLowerCase = query.toLowerCase();\n  return options\n    .filter((tag) => {\n      if (tag.value && tag.value.length > 0) {\n        return tag.value.toLowerCase().includes(queryLowerCase);\n      }\n      return false;\n    })\n    .slice(0, maxOptions);\n};\n","import React from 'react';\n\nimport { SelectableValue } from '@grafana/data';\nimport { SceneComponentProps, SceneObject, SceneObjectBase, SceneObjectState } from '@grafana/scenes';\nimport { Field, RadioButtonGroup } from '@grafana/ui';\nimport { reportAppInteraction, USER_EVENTS_ACTIONS, USER_EVENTS_PAGES } from '../../utils/analytics';\n\nexport interface LayoutSwitcherState extends SceneObjectState {\n  active: LayoutType;\n  layouts: SceneObject[];\n  options: Array<SelectableValue<LayoutType>>;\n}\n\nexport type LayoutType = 'single' | 'grid' | 'rows';\n\nexport class LayoutSwitcher extends SceneObjectBase<LayoutSwitcherState> {\n  public Selector({ model }: { model: LayoutSwitcher }) {\n    const { active, options } = model.useState();\n\n    return (\n      <Field label=\"View\">\n        <RadioButtonGroup options={options} value={active} onChange={model.onLayoutChange} />\n      </Field>\n    );\n  }\n\n  public onLayoutChange = (active: LayoutType) => {\n    this.setState({ active });\n    reportAppInteraction(USER_EVENTS_PAGES.analyse_traces, USER_EVENTS_ACTIONS.analyse_traces.layout_type_changed, {\n      layout: active,\n    });\n  };\n\n  public static Component = ({ model }: SceneComponentProps<LayoutSwitcher>) => {\n    const { layouts, options, active } = model.useState();\n\n    const index = options.findIndex((o) => o.value === active);\n    if (index === -1) {\n      return null;\n    }\n\n    const layout = layouts[index];\n\n    return <layout.Component model={layout} />;\n  };\n}\n","import { PanelBuilders } from '@grafana/scenes';\nimport { TooltipDisplayMode } from '@grafana/ui';\n\nexport const linesPanelConfig = () => {\n  return PanelBuilders.timeseries()\n    .setOption('legend', { showLegend: false })\n    .setOption('tooltip', { mode: TooltipDisplayMode.Multi })\n    .setCustomFieldConfig('fillOpacity', 15);\n};\n","import { TimeRange } from '@grafana/data';\nimport { sceneGraph, SceneObject, SceneObjectBase, SceneObjectState, SceneQueryRunner } from '@grafana/scenes';\nimport { DataQuery, DataSourceRef } from '@grafana/schema';\n\nimport Logo from '../../../../src/img/logo.svg';\nimport { VAR_DATASOURCE_EXPR } from 'utils/shared';\n\nexport interface AddToInvestigationButtonState extends SceneObjectState {\n  dsUid?: string;\n  query?: string;\n  labelValue?: string;\n  context?: ExtensionContext;\n  queries: DataQuery[];\n}\n\ninterface ExtensionContext {\n  timeRange: TimeRange;\n  queries: DataQuery[];\n  datasource: DataSourceRef;\n  origin: string;\n  url: string;\n  type: string;\n  title: string;\n  id: string;\n  logoPath: string;\n}\n\nexport class AddToInvestigationButton extends SceneObjectBase<AddToInvestigationButtonState> {\n  constructor(state: Omit<AddToInvestigationButtonState, 'queries'>) {\n    super({ ...state, queries: [] });\n\n    this.addActivationHandler(this._onActivate.bind(this));\n  }\n\n  private _onActivate = () => {\n    this._subs.add(\n      this.subscribeToState(() => {\n        this.getQueries();\n        this.getContext();\n      })\n    );\n\n    const datasourceUid = sceneGraph.interpolate(this, VAR_DATASOURCE_EXPR);\n    this.setState({ dsUid: datasourceUid });\n  };\n\n  private readonly getQueries = () => {\n    const data = sceneGraph.getData(this);\n    const queryRunner = sceneGraph.findObject(data, isQueryRunner);\n\n    if (isQueryRunner(queryRunner)) {\n      const queries = queryRunner.state.queries.map((q) => ({\n        ...q,\n        query: this.state.query,\n      }));\n\n      if (JSON.stringify(queries) !== JSON.stringify(this.state.queries)) {\n        this.setState({ queries });\n      }\n    }\n  };\n\n  private readonly getContext = () => {\n    const { queries, dsUid, labelValue } = this.state;\n    const timeRange = sceneGraph.getTimeRange(this);\n\n    if (!timeRange || !queries || !dsUid) {\n      return;\n    }\n    const ctx = {\n      origin: 'Explore Traces',\n      type: 'traces',\n      queries,\n      timeRange: { ...timeRange.state.value },\n      datasource: { uid: dsUid },\n      url: window.location.href,\n      id: `${JSON.stringify(queries)}`,\n      title: `${labelValue}`,\n      logoPath: Logo,\n    };\n    if (JSON.stringify(ctx) !== JSON.stringify(this.state.context)) {\n      this.setState({ context: ctx });\n    }\n  };\n}\n\nfunction isQueryRunner(o: SceneObject<SceneObjectState> | null): o is SceneQueryRunner {\n  return o instanceof SceneQueryRunner;\n}\n","import { PanelMenuItem, toURLRange, urlUtil } from '@grafana/data';\nimport {\n  SceneObjectBase,\n  VizPanelMenu,\n  SceneObject,\n  SceneComponentProps,\n  sceneGraph,\n  SceneObjectState,\n} from '@grafana/scenes';\nimport React from 'react';\nimport { AddToInvestigationButton } from '../actions/AddToInvestigationButton';\nimport { config, getPluginLinkExtensions } from '@grafana/runtime';\nimport { reportAppInteraction, USER_EVENTS_PAGES, USER_EVENTS_ACTIONS } from 'utils/analytics';\nimport { getCurrentStep, getDataSource, getTraceExplorationScene } from 'utils/utils';\n\nconst ADD_TO_INVESTIGATION_MENU_TEXT = 'Add to investigation';\nconst extensionPointId = 'grafana-exploretraces-app/investigation/v1';\nconst ADD_TO_INVESTIGATION_MENU_DIVIDER_TEXT = 'investigations_divider'; // Text won't be visible\nconst ADD_TO_INVESTIGATION_MENU_GROUP_TEXT = 'Investigations';\n\ninterface PanelMenuState extends SceneObjectState {\n  body?: VizPanelMenu;\n  query?: string;\n  labelValue?: string;\n  addToInvestigationButton?: AddToInvestigationButton;\n}\n\nexport class PanelMenu extends SceneObjectBase<PanelMenuState> implements VizPanelMenu, SceneObject {\n  constructor(state: Partial<PanelMenuState>) {\n    super(state);\n    this.addActivationHandler(() => {\n      const items: PanelMenuItem[] = [\n        {\n          text: 'Navigation',\n          type: 'group',\n        },\n        {\n          text: 'Explore',\n          iconClassName: 'compass',\n          href: getExploreHref(this),\n          onClick: () => onExploreClick(),\n        },\n      ];\n\n      this.setState({\n        body: new VizPanelMenu({\n          items,\n        }),\n      });\n\n      const addToInvestigationButton = new AddToInvestigationButton({\n        query: this.state.query,\n        labelValue: this.state.labelValue,\n      });\n      this._subs.add(\n        addToInvestigationButton?.subscribeToState(() => {\n          subscribeToAddToInvestigation(this);\n        })\n      );\n      this.setState({\n        addToInvestigationButton: addToInvestigationButton,\n      });\n\n      this.state.addToInvestigationButton?.activate();\n    });\n  }\n\n  addItem(item: PanelMenuItem): void {\n    if (this.state.body) {\n      this.state.body.addItem(item);\n    }\n  }\n\n  setItems(items: PanelMenuItem[]): void {\n    if (this.state.body) {\n      this.state.body.setItems(items);\n    }\n  }\n\n  public static Component = ({ model }: SceneComponentProps<PanelMenu>) => {\n    const { body } = model.useState();\n\n    if (body) {\n      return <body.Component model={body} />;\n    }\n\n    return <></>;\n  };\n}\n\nconst getExploreHref = (model: SceneObject<PanelMenuState>) => {\n  const traceExploration = getTraceExplorationScene(model);\n  const datasource = getDataSource(traceExploration);\n  const timeRange = sceneGraph.getTimeRange(model).state.value;\n  const step = getCurrentStep(model);\n\n  const exploreState = JSON.stringify({\n    ['traces-explore']: {\n      range: toURLRange(timeRange.raw),\n      queries: [{ refId: 'A', datasource, query: model.state.query, step }],\n    },\n  });\n  const subUrl = config.appSubUrl ?? '';\n  const exploreUrl = urlUtil.renderUrl(`${subUrl}/explore`, { panes: exploreState, schemaVersion: 1 });\n  return exploreUrl;\n};\n\nconst onExploreClick = () => {\n  reportAppInteraction(USER_EVENTS_PAGES.analyse_traces, USER_EVENTS_ACTIONS.analyse_traces.open_in_explore_clicked);\n};\n\nconst getInvestigationLink = (addToInvestigations: AddToInvestigationButton) => {\n  const links = getPluginLinkExtensions({\n    extensionPointId,\n    context: addToInvestigations.state.context,\n  });\n\n  return links.extensions[0];\n};\n\nconst onAddToInvestigationClick = (event: React.MouseEvent, addToInvestigationButton: AddToInvestigationButton) => {\n  const link = getInvestigationLink(addToInvestigationButton);\n  if (link && link.onClick) {\n    link.onClick(event);\n  }\n\n  reportAppInteraction(\n    USER_EVENTS_PAGES.analyse_traces,\n    USER_EVENTS_ACTIONS.analyse_traces.add_to_investigation_clicked\n  );\n};\n\nfunction subscribeToAddToInvestigation(menu: PanelMenu) {\n  const addToInvestigationButton = menu.state.addToInvestigationButton;\n  if (addToInvestigationButton) {\n    const link = getInvestigationLink(addToInvestigationButton);\n    const existingMenuItems = menu.state.body?.state.items ?? [];\n    const existingAddToInvestigationLink = existingMenuItems.find((item) => item.text === ADD_TO_INVESTIGATION_MENU_TEXT);\n\n    if (link) {\n      if (!existingAddToInvestigationLink) {\n        menu.state.body?.addItem({\n          text: ADD_TO_INVESTIGATION_MENU_DIVIDER_TEXT,\n          type: 'divider',\n        });\n        menu.state.body?.addItem({\n          text: ADD_TO_INVESTIGATION_MENU_GROUP_TEXT,\n          type: 'group',\n        });\n        menu.state.body?.addItem({\n          text: ADD_TO_INVESTIGATION_MENU_TEXT,\n          iconClassName: 'plus-square',\n          onClick: (e) => onAddToInvestigationClick(e, addToInvestigationButton),\n        });\n      } else {\n        if (existingAddToInvestigationLink) {\n          menu.state.body?.setItems(\n            existingMenuItems.filter(\n              (item) =>\n                [\n                  ADD_TO_INVESTIGATION_MENU_DIVIDER_TEXT,\n                  ADD_TO_INVESTIGATION_MENU_GROUP_TEXT,\n                  ADD_TO_INVESTIGATION_MENU_TEXT,\n                ].includes(item.text) === false\n            )\n          );\n        }\n      }\n    }\n  }\n}\n","import {\n  CustomVariable,\n  SceneCSSGridItem,\n  SceneCSSGridLayout,\n  SceneDataNode,\n  SceneDataTransformer,\n  SceneFlexItem,\n  SceneFlexLayout,\n  sceneGraph,\n  SceneObject,\n  VizPanelState,\n} from '@grafana/scenes';\nimport { LayoutSwitcher } from '../LayoutSwitcher';\nimport { explorationDS, GRID_TEMPLATE_COLUMNS, MetricFunction } from '../../../utils/shared';\nimport { ByFrameRepeater } from '../ByFrameRepeater';\nimport { formatLabelValue, getLabelValue, getTraceExplorationScene } from '../../../utils/utils';\nimport { map, Observable } from 'rxjs';\nimport { DataFrame, PanelData, reduceField, ReducerID } from '@grafana/data';\nimport { generateMetricsQuery, metricByWithStatus } from '../queries/generateMetricsQuery';\nimport { barsPanelConfig } from '../panels/barsPanel';\nimport { linesPanelConfig } from '../panels/linesPanel';\nimport { StepQueryRunner } from '../queries/StepQueryRunner';\nimport { syncYAxis } from '../behaviors/syncYaxis';\nimport { exemplarsTransformations } from '../../../utils/exemplars';\nimport { PanelMenu } from '../panels/PanelMenu';\n\nexport function buildNormalLayout(\n  scene: SceneObject,\n  variable: CustomVariable,\n  actionsFn: (df: DataFrame) => VizPanelState['headerActions']\n) {\n  const traceExploration = getTraceExplorationScene(scene);\n  const metric = traceExploration.getMetricVariable().getValue() as MetricFunction;\n  const query = metricByWithStatus(metric, variable.getValueText());\n  const panels: Record<string, SceneCSSGridItem> = {};\n\n  return new LayoutSwitcher({\n    $behaviors: [syncYAxis()],\n    $data: new SceneDataTransformer({\n      $data: new StepQueryRunner({\n        maxDataPoints: 64,\n        datasource: explorationDS,\n        queries: [query],\n      }),\n      transformations: [\n        ...exemplarsTransformations(traceExploration.state.locationService),\n        () => (source: Observable<DataFrame[]>) => {\n          return source.pipe(\n            map((data: DataFrame[]) => {\n              data.forEach((a) => reduceField({ field: a.fields[1], reducers: [ReducerID.max] }));\n              return data.sort((a, b) => {\n                return (b.fields[1].state?.calcs?.max || 0) - (a.fields[1].state?.calcs?.max || 0);\n              });\n            })\n          );\n        },\n      ],\n    }),\n    options: [\n      { value: 'single', label: 'Single' },\n      { value: 'grid', label: 'Grid' },\n      { value: 'rows', label: 'Rows' },\n    ],\n    active: 'grid',\n    layouts: [\n      new SceneFlexLayout({\n        direction: 'column',\n        children: [\n          new SceneFlexItem({\n            minHeight: 300,\n            body: (metric === 'duration' ? linesPanelConfig().setUnit('s') : linesPanelConfig()).build(),\n          }),\n        ],\n      }),\n      new ByFrameRepeater({\n        body: new SceneCSSGridLayout({\n          templateColumns: GRID_TEMPLATE_COLUMNS,\n          autoRows: '200px',\n          isLazy: true,\n          children: [],\n        }),\n        groupBy: true,\n        getLayoutChild: getLayoutChild(panels, getLabelValue, variable, metric, actionsFn),\n      }),\n      new ByFrameRepeater({\n        body: new SceneCSSGridLayout({\n          templateColumns: '1fr',\n          autoRows: '200px',\n          isLazy: true,\n          children: [],\n        }),\n        groupBy: true,\n        getLayoutChild: getLayoutChild(panels, getLabelValue, variable, metric, actionsFn),\n      }),\n    ],\n  });\n}\n\nexport function getLayoutChild(\n  panels: Record<string, SceneCSSGridItem>,\n  getTitle: (df: DataFrame, labelName: string) => string,\n  variable: CustomVariable,\n  metric: MetricFunction,\n  actionsFn: (df: DataFrame) => VizPanelState['headerActions']\n) {\n  return (data: PanelData, frame: DataFrame) => {\n    const existingGridItem = frame.name ? panels[frame.name] : undefined;\n\n    const dataNode = new SceneDataNode({\n      data: {\n        ...data,\n        annotations: data.annotations?.filter((a) => a.refId === frame.refId),\n        series: [\n          {\n            ...frame,\n            fields: frame.fields.sort((a, b) => a.labels?.status?.localeCompare(b.labels?.status || '') || 0),\n          },\n        ],\n      },\n    });\n\n    if (existingGridItem) {\n      existingGridItem.state.body?.setState({ $data: dataNode });\n      return existingGridItem;\n    }\n\n    const query = sceneGraph.interpolate(\n      variable,\n      generateMetricsQuery({\n        metric,\n        extraFilters: `${variable.getValueText()}=${formatLabelValue(getLabelValue(frame))}`,\n        groupByStatus: true,\n      })\n    );\n\n    const panel = (metric === 'duration' ? linesPanelConfig().setUnit('s') : barsPanelConfig())\n      .setTitle(getTitle(frame, variable.getValueText()))\n      .setMenu(new PanelMenu({ query, labelValue: getLabelValue(frame) }))\n      .setData(dataNode);\n\n    const actions = actionsFn(frame);\n    if (actions) {\n      panel.setHeaderActions(actions);\n    }\n\n    const gridItem = new SceneCSSGridItem({\n      body: panel.build(),\n    });\n    if (frame.name) {\n      panels[frame.name] = gridItem;\n    }\n\n    return gridItem;\n  };\n}\n","import { sceneGraph, SceneObject, SceneObjectState, VizPanel } from '@grafana/scenes';\nimport { cloneDeep, merge } from 'lodash';\nimport { EventTimeseriesDataReceived } from '../../../utils/shared';\n\nexport function syncYAxis() {\n  return (vizPanel: SceneObject<SceneObjectState>) => {\n    const maxima = new Map<string, number>();\n\n    const eventSub = vizPanel.subscribeToEvent(EventTimeseriesDataReceived, (event) => {\n      const series = event.payload.series;\n\n      series?.forEach((s) => {\n        s.fields.slice(1).forEach((f) => {\n          maxima.set(s.refId as string, Math.max(...f.values.filter((v) => v)));\n        })\n      });\n\n      updateTimeseriesAxis(vizPanel, Math.max(...maxima.values()));\n    });\n\n    return () => {\n      eventSub.unsubscribe();\n    };\n  };\n}\n\nfunction updateTimeseriesAxis(vizPanel: SceneObject, max: number) {\n  // findAllObjects searches down the full scene graph\n  const timeseries = sceneGraph.findAllObjects(vizPanel, (o) => o instanceof VizPanel) as VizPanel[];\n\n  for (const t of timeseries) {\n    t.clearFieldConfigCache(); // required\n\n    t.setState({\n      fieldConfig: merge(cloneDeep(t.state.fieldConfig), { defaults: { max } }),\n    });\n  }\n}\n","import { css } from '@emotion/css';\nimport React from 'react';\n\nimport { GrafanaTheme2 } from '@grafana/data';\nimport { useTheme2 } from '@grafana/ui';\n\ntype Tag = {\n  label: string;\n  color: string;\n};\n\ntype Props = {\n  description: string;\n  tags: Tag[];\n};\n\nexport function AttributesDescription({ description, tags }: Props) {\n  const theme = useTheme2();\n  const styles = getStyles(theme);\n\n  return (\n    <div className={styles.infoFlex}>\n      <div className={styles.tagsFlex}>{description}</div>\n      {tags.length > 0 &&\n        tags.map((tag) => (\n          <div className={styles.tagsFlex} key={tag.label}>\n            <div className={styles.tag} style={{ backgroundColor: tag.color }} />\n            <div>{tag.label}</div>\n          </div>\n        ))}\n    </div>\n  );\n}\n\nfunction getStyles(theme: GrafanaTheme2) {\n  return {\n    infoFlex: css({\n      display: 'flex',\n      gap: theme.spacing(2),\n      alignItems: 'center',\n      padding: `${theme.spacing(1)} 0 ${theme.spacing(2)} 0`,\n    }),\n    tagsFlex: css({\n      display: 'flex',\n      gap: theme.spacing(1),\n      alignItems: 'center',\n    }),\n    tag: css({\n      display: 'inline-block',\n      width: theme.spacing(2),\n      height: theme.spacing(0.5),\n      borderRadius: theme.spacing(0.5),\n    }),\n  };\n}\n","import { css } from '@emotion/css';\nimport React, { useState } from 'react';\n\nimport { DataFrame, GrafanaTheme2 } from '@grafana/data';\nimport {\n  CustomVariable,\n  SceneComponentProps,\n  SceneObject,\n  SceneObjectBase,\n  SceneObjectState,\n  VariableDependencyConfig,\n} from '@grafana/scenes';\nimport { Field, RadioButtonGroup, useStyles2 } from '@grafana/ui';\n\nimport { GroupBySelector } from '../../../GroupBySelector';\nimport {\n  MetricFunction,\n  RESOURCE,\n  RESOURCE_ATTR,\n  SPAN,\n  SPAN_ATTR,\n  VAR_FILTERS,\n  VAR_METRIC,\n  radioAttributesResource,\n  radioAttributesSpan,\n} from '../../../../../utils/shared';\n\nimport { LayoutSwitcher } from '../../../LayoutSwitcher';\nimport { AddToFiltersAction } from '../../../actions/AddToFiltersAction';\nimport { buildNormalLayout } from '../../../layouts/attributeBreakdown';\nimport {\n  getAttributesAsOptions,\n  getGroupByVariable,\n  getTraceByServiceScene,\n  getTraceExplorationScene,\n} from 'utils/utils';\nimport { reportAppInteraction, USER_EVENTS_ACTIONS, USER_EVENTS_PAGES } from '../../../../../utils/analytics';\nimport { AttributesDescription } from './AttributesDescription';\n\nexport interface AttributesBreakdownSceneState extends SceneObjectState {\n  body?: SceneObject;\n}\n\nexport class AttributesBreakdownScene extends SceneObjectBase<AttributesBreakdownSceneState> {\n  protected _variableDependency = new VariableDependencyConfig(this, {\n    variableNames: [VAR_FILTERS, VAR_METRIC],\n    onReferencedVariableValueChanged: this.onReferencedVariableValueChanged.bind(this),\n  });\n\n  constructor(state: Partial<AttributesBreakdownSceneState>) {\n    super({\n      ...state,\n    });\n\n    this.addActivationHandler(this._onActivate.bind(this));\n  }\n\n  private _onActivate() {\n    const variable = getGroupByVariable(this);\n\n    variable.subscribeToState(() => {\n      this.setBody(variable);\n    });\n\n    getTraceByServiceScene(this).subscribeToState(() => {\n      this.setBody(variable);\n    });\n\n    this.setBody(variable);\n  }\n\n  private onReferencedVariableValueChanged() {\n    const variable = getGroupByVariable(this);\n    variable.changeValueTo(radioAttributesResource[0]);\n    this.setBody(variable);\n  }\n\n  private onAddToFiltersClick(payload: any) {\n    reportAppInteraction(\n      USER_EVENTS_PAGES.analyse_traces,\n      USER_EVENTS_ACTIONS.analyse_traces.breakdown_add_to_filters_clicked,\n      payload\n    );\n  }\n\n  private setBody = (variable: CustomVariable) => {\n    this.setState({\n      body: buildNormalLayout(this, variable, (frame: DataFrame) => [\n        new AddToFiltersAction({ frame, labelKey: variable.getValueText(), onClick: this.onAddToFiltersClick }),\n      ]),\n    });\n  };\n\n  public onChange = (value: string, ignore?: boolean) => {\n    const variable = getGroupByVariable(this);\n    if (variable.getValueText() !== value) {\n      variable.changeValueTo(value, undefined, !ignore);\n\n      reportAppInteraction(\n        USER_EVENTS_PAGES.analyse_traces,\n        USER_EVENTS_ACTIONS.analyse_traces.breakdown_group_by_changed,\n        {\n          groupBy: value,\n        }\n      );\n    }\n  };\n\n  public static Component = ({ model }: SceneComponentProps<AttributesBreakdownScene>) => {\n    const [scope, setScope] = useState(RESOURCE);\n    const { body } = model.useState();\n    const variable = getGroupByVariable(model);\n    const styles = useStyles2(getStyles);\n\n    const { attributes } = getTraceByServiceScene(model).useState();\n    const filterType = scope === RESOURCE ? RESOURCE_ATTR : SPAN_ATTR;\n    let filteredAttributes = attributes?.filter((attr) => attr.includes(filterType));\n    if (scope === SPAN) {\n      filteredAttributes = filteredAttributes?.concat(radioAttributesSpan);\n    }\n\n    const exploration = getTraceExplorationScene(model);\n    const { value: metric } = exploration.getMetricVariable().useState();\n    const getDescription = (metric: MetricFunction) => {\n      switch (metric) {\n        case 'rate':\n          return 'Attributes are ordered by their rate of requests per second.';\n        case 'errors':\n          return 'Attributes are ordered by their rate of errors per second.';\n        case 'duration':\n          return 'Attributes are ordered by their average duration.';\n        default:\n          throw new Error('Metric not supported');\n      }\n    };\n    const description = getDescription(metric as MetricFunction);\n\n    return (\n      <div className={styles.container}>\n        <AttributesDescription\n          description={description}\n          tags={\n            metric === 'duration'\n              ? []\n              : [\n                  { label: 'Rate', color: 'green' },\n                  { label: 'Error', color: 'red' },\n                ]\n          }\n        />\n\n        <div className={styles.controls}>\n          {filteredAttributes?.length && (\n            <div className={styles.controlsLeft}>\n              <div className={styles.scope}>\n                <Field label=\"Scope\">\n                  <RadioButtonGroup\n                    options={getAttributesAsOptions([RESOURCE, SPAN])}\n                    value={scope}\n                    onChange={setScope}\n                  />\n                </Field>\n              </div>\n\n              <div className={styles.groupBy}>\n                <GroupBySelector\n                  options={getAttributesAsOptions(filteredAttributes!)}\n                  radioAttributes={scope === RESOURCE ? radioAttributesResource : radioAttributesSpan}\n                  value={variable.getValueText()}\n                  onChange={model.onChange}\n                  model={model}\n                />\n              </div>\n            </div>\n          )}\n          {body instanceof LayoutSwitcher && (\n            <div className={styles.controlsRight}>\n              <body.Selector model={body} />\n            </div>\n          )}\n        </div>\n        <div className={styles.content}>{body && <body.Component model={body} />}</div>\n      </div>\n    );\n  };\n}\n\nfunction getStyles(theme: GrafanaTheme2) {\n  return {\n    container: css({\n      flexGrow: 1,\n      display: 'flex',\n      minHeight: '100%',\n      flexDirection: 'column',\n    }),\n    content: css({\n      flexGrow: 1,\n      display: 'flex',\n      paddingTop: theme.spacing(0),\n    }),\n    controls: css({\n      flexGrow: 0,\n      display: 'flex',\n      alignItems: 'top',\n      gap: theme.spacing(2),\n    }),\n    controlsRight: css({\n      flexGrow: 0,\n      display: 'flex',\n      justifyContent: 'flex-end',\n    }),\n    scope: css({\n      marginRight: theme.spacing(2),\n    }),\n    groupBy: css({\n      width: '100%',\n    }),\n    controlsLeft: css({\n      display: 'flex',\n      justifyContent: 'flex-left',\n      justifyItems: 'left',\n      width: '100%',\n      flexDirection: 'row',\n    }),\n  };\n}\n","import React from 'react';\n\nimport {\n  SceneComponentProps,\n  SceneFlexItem,\n  SceneObject,\n  SceneObjectBase,\n  SceneObjectState,\n  VariableDependencyConfig,\n} from '@grafana/scenes';\nimport { AttributesBreakdownScene } from './AttributesBreakdownScene';\nimport { VAR_METRIC } from '../../../../../utils/shared';\n\ninterface BreakdownSceneState extends SceneObjectState {\n  body?: SceneObject;\n}\n\nexport class BreakdownScene extends SceneObjectBase<BreakdownSceneState> {\n  protected _variableDependency = new VariableDependencyConfig(this, {\n    variableNames: [VAR_METRIC],\n  });\n\n  constructor(state: Partial<BreakdownSceneState>) {\n    super({ ...state });\n\n    this.addActivationHandler(this._onActivate.bind(this));\n  }\n\n  private _onActivate() {\n    this.updateBody();\n  }\n\n  private updateBody() {\n    this.setState({ body: new AttributesBreakdownScene({}) });\n  }\n\n  public static Component = ({ model }: SceneComponentProps<BreakdownScene>) => {\n    const { body } = model.useState();\n    return body && <body.Component model={body} />;\n  };\n}\n\nexport function buildBreakdownScene() {\n  return new SceneFlexItem({\n    body: new BreakdownScene({}),\n  });\n}\n","import { ComparisonSelection } from '../../../utils/shared';\n\nexport function comparisonQuery(selection?: ComparisonSelection) {\n  let selector = '';\n\n  if (!selection) {\n    return '{}';\n  }\n\n  if (selection.query) {\n    selector += selection.query;\n  }\n\n  const duration = [];\n  if (selection.duration?.from.length) {\n    duration.push(`duration >= ${selection.duration.from}`);\n  }\n  if (selection.duration?.to.length) {\n    duration.push(`duration <= ${selection.duration.to}`);\n  }\n  if (duration.length) {\n    if (selector.length) {\n      selector += ' && ';\n    }\n    selector += duration.join(' && ');\n  }\n\n  const fromTimerange = selection.timeRange?.from;\n  const toTimerange = selection.timeRange?.to;\n  return `{${selector}}, 10${\n    fromTimerange && toTimerange ? `, ${fromTimerange * 1000000000}, ${toTimerange * 1000000000}` : ``\n  }`;\n}\n","import {\n  CustomVariable,\n  SceneCSSGridItem,\n  SceneCSSGridLayout,\n  SceneDataNode,\n  SceneDataTransformer,\n  sceneGraph,\n  SceneObject,\n  VizPanelState,\n} from '@grafana/scenes';\nimport { ByFrameRepeater } from '../ByFrameRepeater';\nimport { map, Observable } from 'rxjs';\nimport { DataFrame, FieldType, LoadingState, PanelData, reduceField, ReducerID } from '@grafana/data';\nimport { getPanelConfig } from './allComparison';\nimport { GRID_TEMPLATE_COLUMNS, MetricFunction } from '../../../utils/shared';\n\nexport function buildAttributeComparison(\n  scene: SceneObject,\n  variable: CustomVariable,\n  actionsFn: (df: DataFrame) => VizPanelState['headerActions'],\n  metric: MetricFunction\n) {\n  const timeRange = sceneGraph.getTimeRange(scene);\n  const data = sceneGraph.getData(scene);\n  const attribute = variable.getValueText();\n  const attributeSeries = data.state.data?.series.find((d) => d.name === attribute);\n  const splitFrames: DataFrame[] = [];\n  const nameField = attributeSeries?.fields.find((f) => f.name === 'Value');\n  const baselineField = attributeSeries?.fields.find((f) => f.name === 'Baseline');\n  const selectionField = attributeSeries?.fields.find((f) => f.name === 'Selection');\n\n  const panels: Record<string, SceneCSSGridItem> = {};\n\n  if (nameField && baselineField && selectionField) {\n    for (let i = 0; i < nameField.values.length; i++) {\n      if (!nameField.values[i] || (!baselineField.values[i] && !selectionField.values[i])) {\n        continue;\n      }\n\n      splitFrames.push({\n        name: nameField.values[i].replace(/\"/g, ''),\n        length: 1,\n        fields: [\n          {\n            name: 'Value',\n            type: FieldType.string,\n            values: ['Baseline', 'Comparison'],\n            config: {},\n          },\n          {\n            ...baselineField,\n            values: [baselineField.values[i]],\n            labels: {\n              [attribute]: nameField.values[i],\n            },\n            config: {\n              displayName: 'Baseline',\n            },\n          },\n          {\n            ...selectionField,\n            values: [selectionField.values[i]],\n          },\n        ],\n      });\n    }\n  }\n\n  return new ByFrameRepeater({\n    $data: new SceneDataTransformer({\n      $data: new SceneDataNode({\n        data: {\n          timeRange: timeRange.state.value,\n          state: LoadingState.Done,\n          series: splitFrames,\n        },\n      }),\n      transformations: [\n        () => (source: Observable<DataFrame[]>) => {\n          return source.pipe(\n            map((data: DataFrame[]) => {\n              data.forEach((a) => reduceField({ field: a.fields[2], reducers: [ReducerID.max] }));\n              return data.sort((a, b) => {\n                return (b.fields[2].state?.calcs?.max || 0) - (a.fields[2].state?.calcs?.max || 0);\n              });\n            })\n          );\n        },\n      ],\n    }),\n    body: new SceneCSSGridLayout({\n      templateColumns: GRID_TEMPLATE_COLUMNS,\n      autoRows: '200px',\n      isLazy: true,\n      children: [],\n    }),\n    getLayoutChild: getLayoutChild(panels, getLabel, actionsFn, metric),\n  });\n}\n\nconst getLabel = (df: DataFrame) => {\n  return df.name || 'No name available';\n};\n\nfunction getLayoutChild(\n  panels: Record<string, SceneCSSGridItem>,\n  getTitle: (df: DataFrame) => string,\n  actionsFn: (df: DataFrame) => VizPanelState['headerActions'],\n  metric: MetricFunction\n) {\n  return (data: PanelData, frame: DataFrame) => {\n    const existingGridItem = frame.name ? panels[frame.name] : undefined;\n\n    const dataNode = new SceneDataNode({\n      data: {\n        ...data,\n        series: [\n          {\n            ...frame,\n          },\n        ],\n      },\n    });\n\n    if (existingGridItem) {\n      existingGridItem.state.body?.setState({ $data: dataNode });\n      return existingGridItem;\n    }\n\n    const panel = getPanelConfig(metric).setTitle(getTitle(frame)).setData(dataNode);\n\n    const actions = actionsFn(frame);\n    if (actions) {\n      panel.setHeaderActions(actions);\n    }\n\n    const gridItem = new SceneCSSGridItem({\n      body: panel.build(),\n    });\n    if (frame.name) {\n      panels[frame.name] = gridItem;\n    }\n\n    return gridItem;\n  };\n}\n","import React from 'react';\n\nimport {\n  SceneObjectState,\n  SceneObjectBase,\n  SceneComponentProps,\n} from '@grafana/scenes';\nimport { Button } from '@grafana/ui';\n\ninterface InspectAttributeActionState extends SceneObjectState {\n  attribute?: string;\n  onClick: () => void;\n}\n\nexport class InspectAttributeAction extends SceneObjectBase<InspectAttributeActionState> {\n  public static Component = ({ model }: SceneComponentProps<InspectAttributeAction>) => {\n    if (!model.state.attribute) {\n      return null;\n    }\n\n    return (\n      <Button variant=\"secondary\" size=\"sm\" fill=\"solid\" onClick={() => model.state.onClick()}>\n        Inspect\n      </Button>\n    );\n  };\n}\n","import { css } from '@emotion/css';\nimport React from 'react';\n\nimport { DataFrame, FieldType, GrafanaTheme2, Field } from '@grafana/data';\nimport {\n  CustomVariable,\n  SceneComponentProps,\n  SceneDataTransformer,\n  sceneGraph,\n  SceneObject,\n  SceneObjectBase,\n  SceneObjectState,\n  SceneQueryRunner,\n  VariableDependencyConfig,\n} from '@grafana/scenes';\nimport { getTheme, useStyles2 } from '@grafana/ui';\n\nimport { GroupBySelector } from '../../../GroupBySelector';\nimport { VAR_FILTERS, explorationDS, VAR_FILTERS_EXPR, ALL, radioAttributesSpan } from '../../../../../utils/shared';\n\nimport { LayoutSwitcher } from '../../../LayoutSwitcher';\nimport { AddToFiltersAction } from '../../../actions/AddToFiltersAction';\nimport { map, Observable } from 'rxjs';\nimport { BaselineColor, buildAllComparisonLayout, SelectionColor } from '../../../layouts/allComparison';\n// eslint-disable-next-line no-restricted-imports\nimport { duration } from 'moment';\nimport { comparisonQuery } from '../../../queries/comparisonQuery';\nimport { buildAttributeComparison } from '../../../layouts/attributeComparison';\nimport {\n  getAttributesAsOptions,\n  getGroupByVariable,\n  getTraceByServiceScene,\n  getTraceExplorationScene,\n} from 'utils/utils';\nimport { InspectAttributeAction } from 'components/Explore/actions/InspectAttributeAction';\nimport { reportAppInteraction, USER_EVENTS_ACTIONS, USER_EVENTS_PAGES } from '../../../../../utils/analytics';\nimport { computeHighestDifference } from '../../../../../utils/comparison';\nimport { AttributesDescription } from '../Breakdown/AttributesDescription';\nimport { isEqual } from 'lodash';\n\nexport interface AttributesComparisonSceneState extends SceneObjectState {\n  body?: SceneObject;\n}\n\nexport class AttributesComparisonScene extends SceneObjectBase<AttributesComparisonSceneState> {\n  protected _variableDependency = new VariableDependencyConfig(this, {\n    variableNames: [VAR_FILTERS],\n    onReferencedVariableValueChanged: this.onReferencedVariableValueChanged.bind(this),\n  });\n\n  constructor(state: Partial<AttributesComparisonSceneState>) {\n    super({\n      ...state,\n    });\n\n    this.addActivationHandler(this._onActivate.bind(this));\n  }\n\n  private _onActivate() {\n    const variable = getGroupByVariable(this);\n\n    variable.changeValueTo(ALL);\n\n    this.updateData();\n\n    variable.subscribeToState((newState, prevState) => {\n      if (newState.value !== prevState.value) {\n        this.setBody(variable);\n      }\n    });\n\n    getTraceByServiceScene(this).subscribeToState((newState, prevState) => {\n      if (!isEqual(newState.selection, prevState.selection)) {\n        this.updateData();\n        this.setBody(variable);\n      }\n    });\n\n    sceneGraph.getTimeRange(this).subscribeToState(() => {\n      this.updateData();\n    });\n\n    this.setBody(variable);\n  }\n\n  private updateData() {\n    const byServiceScene = getTraceByServiceScene(this);\n    const sceneTimeRange = sceneGraph.getTimeRange(this);\n    const from = sceneTimeRange.state.value.from.unix();\n    const to = sceneTimeRange.state.value.to.unix();\n\n    this.setState({\n      $data: new SceneDataTransformer({\n        $data: new SceneQueryRunner({\n          datasource: explorationDS,\n          queries: [buildQuery(from, to, comparisonQuery(byServiceScene.state.selection))],\n        }),\n        transformations: [\n          () => (source: Observable<DataFrame[]>) => {\n            return source.pipe(\n              map((data: DataFrame[]) => {\n                const groupedFrames = groupFrameListByAttribute(data);\n                return Object.entries(groupedFrames)\n                  .map(([attribute, frames]) => frameGroupToDataframe(attribute, frames))\n                  .sort((a, b) => {\n                    const aCompare = computeHighestDifference(a);\n                    const bCompare = computeHighestDifference(b);\n                    return bCompare.maxDifference - aCompare.maxDifference;\n                  });\n              })\n            );\n          },\n        ],\n      }),\n    });\n  }\n\n  private onReferencedVariableValueChanged() {\n    const variable = getGroupByVariable(this);\n    variable.changeValueTo(ALL);\n    this.setBody(variable);\n  }\n\n  private onAddToFiltersClick(payload: any) {\n    reportAppInteraction(\n      USER_EVENTS_PAGES.analyse_traces,\n      USER_EVENTS_ACTIONS.analyse_traces.comparison_add_to_filters_clicked,\n      payload\n    );\n  }\n\n  private setBody = (variable: CustomVariable) => {\n    const traceExploration = getTraceExplorationScene(this);\n    this.setState({\n      body:\n        variable.hasAllValue() || variable.getValue() === ALL\n          ? buildAllComparisonLayout(\n              (frame) =>\n                new InspectAttributeAction({\n                  attribute: frame.name,\n                  onClick: () => this.onChange(frame.name || ''),\n                }),\n              traceExploration.getMetricFunction()\n            )\n          : buildAttributeComparison(\n              this,\n              variable,\n              (frame: DataFrame) => [\n                new AddToFiltersAction({\n                  frame,\n                  labelKey: variable.getValueText(),\n                  onClick: this.onAddToFiltersClick,\n                }),\n              ],\n              traceExploration.getMetricFunction()\n            ),\n    });\n  };\n\n  public onChange = (value: string, ignore?: boolean) => {\n    const variable = getGroupByVariable(this);\n    variable.changeValueTo(value, undefined, !ignore);\n\n    reportAppInteraction(\n      USER_EVENTS_PAGES.analyse_traces,\n      USER_EVENTS_ACTIONS.analyse_traces.select_attribute_in_comparison_clicked,\n      { value }\n    );\n  };\n\n  public static Component = ({ model }: SceneComponentProps<AttributesComparisonScene>) => {\n    const { body } = model.useState();\n    const variable = getGroupByVariable(model);\n    const traceExploration = getTraceExplorationScene(model);\n    const { attributes } = getTraceByServiceScene(model).useState();\n    const styles = useStyles2(getStyles);\n\n    return (\n      <div className={styles.container}>\n        <AttributesDescription\n          description=\"Attributes are ordered by the difference between the baseline and selection values for each value.\"\n          tags={[\n            {\n              label: 'Baseline',\n              color:\n                traceExploration.getMetricFunction() === 'duration'\n                  ? BaselineColor\n                  : getTheme().visualization.getColorByName('semi-dark-green'),\n            },\n            {\n              label: 'Selection',\n              color:\n                traceExploration.getMetricFunction() === 'duration'\n                  ? SelectionColor\n                  : getTheme().visualization.getColorByName('semi-dark-red'),\n            },\n          ]}\n        />\n\n        <div className={styles.controls}>\n          {attributes?.length && (\n            <div className={styles.controlsLeft}>\n              <GroupBySelector\n                options={getAttributesAsOptions(attributes)}\n                radioAttributes={radioAttributesSpan}\n                value={variable.getValueText()}\n                onChange={model.onChange}\n                showAll={true}\n                model={model}\n              />\n            </div>\n          )}\n          {body instanceof LayoutSwitcher && (\n            <div className={styles.controlsRight}>\n              <body.Selector model={body} />\n            </div>\n          )}\n        </div>\n        <div className={styles.content}>{body && <body.Component model={body} />}</div>\n      </div>\n    );\n  };\n}\n\nexport function buildQuery(from: number, to: number, compareQuery: string) {\n  const dur = duration(to - from, 's');\n  const durString = `${dur.asSeconds()}s`;\n  return {\n    refId: 'A',\n    query: `{${VAR_FILTERS_EXPR}} | compare(${compareQuery})`,\n    step: durString,\n    queryType: 'traceql',\n    tableType: 'spans',\n    limit: 100,\n    spss: 10,\n    filters: [],\n  };\n}\n\nconst groupFrameListByAttribute = (frames: DataFrame[]) => {\n  return frames.reduce((acc: Record<string, DataFrame[]>, series) => {\n    const numberField = series.fields.find((field) => field.type === 'number');\n    const nonInternalKey = Object.keys(numberField?.labels || {}).find((key) => !key.startsWith('__'));\n    if (nonInternalKey) {\n      acc[nonInternalKey] = [...(acc[nonInternalKey] || []), series];\n    }\n    return acc;\n  }, {});\n};\n\nconst frameGroupToDataframe = (attribute: string, frames: DataFrame[]): DataFrame => {\n  const newFrame: DataFrame = {\n    name: attribute,\n    refId: attribute,\n    fields: [],\n    length: 0,\n  };\n\n  const valueNameField: Field = {\n    name: 'Value',\n    type: FieldType.string,\n    values: [],\n    config: {},\n    labels: { [attribute]: attribute },\n  };\n  const baselineField: Field = {\n    name: 'Baseline',\n    type: FieldType.number,\n    values: [],\n    config: {},\n  };\n  const selectionField: Field = {\n    name: 'Selection',\n    type: FieldType.number,\n    values: [],\n    config: {},\n  };\n\n  const values = frames.reduce((acc: Record<string, Field[]>, frame) => {\n    const numberField = frame.fields.find((field) => field.type === 'number');\n    const val = numberField?.labels?.[attribute];\n    if (val) {\n      acc[val] = [...(acc[val] || []), numberField];\n    }\n    return acc;\n  }, {});\n\n  const baselineTotal = getValueForMetaType(frames, '\"baseline_total\"');\n  const selectionTotal = getValueForMetaType(frames, '\"selection_total\"');\n\n  newFrame.length = Object.keys(values).length;\n\n  Object.entries(values).forEach(([value, fields]) => {\n    valueNameField.values.push(value);\n    baselineField.values.push(\n      fields.find((field) => field.labels?.['__meta_type'] === '\"baseline\"')?.values[0] / baselineTotal\n    );\n    selectionField.values.push(\n      fields.find((field) => field.labels?.['__meta_type'] === '\"selection\"')?.values[0] / selectionTotal\n    );\n  });\n  newFrame.fields = [valueNameField, baselineField, selectionField];\n  return newFrame;\n};\n\nfunction getValueForMetaType(frames: DataFrame[], metaType: string) {\n  return frames.reduce((currentValue, frame) => {\n    const field = frame.fields.find((f) => f.type === 'number');\n    if (field?.labels?.['__meta_type'] === metaType) {\n      return field.values[0];\n    }\n    return currentValue;\n  }, 1);\n}\n\nfunction getStyles(theme: GrafanaTheme2) {\n  return {\n    container: css({\n      flexGrow: 1,\n      display: 'flex',\n      minHeight: '100%',\n      flexDirection: 'column',\n    }),\n    content: css({\n      flexGrow: 1,\n      display: 'flex',\n      paddingTop: theme.spacing(0),\n    }),\n    controls: css({\n      flexGrow: 0,\n      display: 'flex',\n      alignItems: 'top',\n      gap: theme.spacing(2),\n    }),\n    controlsRight: css({\n      flexGrow: 0,\n      display: 'flex',\n      justifyContent: 'flex-end',\n    }),\n    controlsLeft: css({\n      display: 'flex',\n      justifyContent: 'flex-left',\n      justifyItems: 'left',\n      width: '100%',\n      flexDirection: 'column',\n    }),\n  };\n}\n","import React from 'react';\n\nimport {\n  SceneComponentProps,\n  SceneFlexItem,\n  SceneObject,\n  SceneObjectBase,\n  SceneObjectState,\n  VariableDependencyConfig,\n} from '@grafana/scenes';\nimport { AttributesComparisonScene } from './AttributesComparisonScene';\nimport { MetricFunction, VAR_METRIC } from '../../../../../utils/shared';\nimport { getMetricVariable, getTraceByServiceScene } from '../../../../../utils/utils';\nimport { getDefaultSelectionForMetric } from '../../../../../utils/comparison';\n\ninterface ComparisonSceneState extends SceneObjectState {\n  body?: SceneObject;\n}\n\nexport class ComparisonScene extends SceneObjectBase<ComparisonSceneState> {\n  protected _variableDependency = new VariableDependencyConfig(this, {\n    variableNames: [VAR_METRIC],\n  });\n\n  constructor(state: Partial<ComparisonSceneState>) {\n    super({ ...state });\n\n    this.addActivationHandler(this._onActivate.bind(this));\n  }\n\n  private _onActivate() {\n    const metricVar = getMetricVariable(this);\n    const metric = metricVar.getValue() as MetricFunction;\n\n    const tracesByService = getTraceByServiceScene(this);\n    if (!tracesByService.state.selection) {\n      const selection = getDefaultSelectionForMetric(metric);\n      if (selection) {\n        tracesByService.setState({ selection });\n      }\n    }\n\n    this.updateBody();\n  }\n\n  private updateBody() {\n    this.setState({ body: new AttributesComparisonScene({}) });\n  }\n\n  public static Component = ({ model }: SceneComponentProps<ComparisonScene>) => {\n    const { body } = model.useState();\n    return body && <body.Component model={body} />;\n  };\n}\n\nexport function buildComparisonScene() {\n  return new SceneFlexItem({\n    body: new ComparisonScene({}),\n  });\n}\n","import { css } from '@emotion/css';\nimport { SceneObjectState, SceneObjectBase, SceneComponentProps, SceneObject, sceneGraph } from '@grafana/scenes';\nimport { GrafanaTheme2 } from '@grafana/data';\nimport { useStyles2, Box, Stack, TabsBar, Tab } from '@grafana/ui';\nimport React from 'react';\nimport { getTraceExplorationScene, getTraceByServiceScene } from 'utils/utils';\nimport { ShareExplorationAction } from '../../actions/ShareExplorationAction';\nimport { buildSpansScene } from './Spans/SpansScene';\nimport { buildStructureScene } from './Structure/StructureScene';\nimport { buildBreakdownScene } from './Breakdown/BreakdownScene';\nimport { MetricFunction } from 'utils/shared';\nimport { buildComparisonScene } from './Comparison/ComparisonScene';\n\ninterface ActionViewDefinition {\n  displayName: (metric: MetricFunction) => string;\n  value: ActionViewType;\n  getScene: (metric: MetricFunction) => SceneObject;\n}\n\nexport type ActionViewType = 'traceList' | 'breakdown' | 'structure' | 'comparison';\nexport const actionViewsDefinitions: ActionViewDefinition[] = [\n  { displayName: breakdownDisplayName, value: 'breakdown', getScene: buildBreakdownScene },\n  { displayName: structureDisplayName, value: 'structure', getScene: buildStructureScene },\n  { displayName: comparisonDisplayName, value: 'comparison', getScene: buildComparisonScene },\n  {\n    displayName: tracesDisplayName,\n    value: 'traceList',\n    getScene: buildSpansScene,\n  },\n];\n\nexport interface TabsBarSceneState extends SceneObjectState {}\n\nexport class TabsBarScene extends SceneObjectBase<TabsBarSceneState> {\n  public static Component = ({ model }: SceneComponentProps<TabsBarScene>) => {\n    const metricScene = getTraceByServiceScene(model);\n    const styles = useStyles2(getStyles);\n    const exploration = getTraceExplorationScene(model);\n    const { actionView } = metricScene.useState();\n    const { value: metric } = exploration.getMetricVariable().useState();\n    const dataState = sceneGraph.getData(model).useState();\n    const tracesCount = dataState.data?.series?.[0]?.length;\n\n    return (\n      <Box>\n        <div className={styles.actions}>\n          <Stack gap={2}>\n            <ShareExplorationAction exploration={exploration} />\n          </Stack>\n        </div>\n\n        <TabsBar>\n          {actionViewsDefinitions.map((tab, index) => {\n            return (\n              <Tab\n                key={index}\n                label={tab.displayName(metric as MetricFunction)}\n                active={actionView === tab.value}\n                onChangeTab={() => metricScene.setActionView(tab.value)}\n                counter={tab.value === 'traceList' ? tracesCount : undefined}\n              />\n            );\n          })}\n        </TabsBar>\n      </Box>\n    );\n  };\n}\n\nfunction breakdownDisplayName(_: MetricFunction) {\n  return 'Breakdown';\n}\n\nfunction comparisonDisplayName(_: MetricFunction) {\n  return 'Comparison';\n}\n\nexport function structureDisplayName(metric: MetricFunction) {\n  switch (metric) {\n    case 'rate':\n      return 'Service structure';\n    case 'errors':\n      return 'Root cause errors';\n    case 'duration':\n      return 'Root cause latency';\n  }\n}\n\nfunction tracesDisplayName(metric: MetricFunction) {\n  return metric === 'errors' ? 'Errored traces' : metric === 'duration' ? 'Slow traces' : 'Traces';\n}\n\nfunction getStyles(theme: GrafanaTheme2) {\n  return {\n    actions: css({\n      [theme.breakpoints.up(theme.breakpoints.values.md)]: {\n        position: 'absolute',\n        right: 0,\n        top: 5,\n        zIndex: 2,\n      },\n    }),\n  };\n}\n","import React from 'react';\n\nimport {\n  SceneComponentProps,\n  SceneDataTransformer,\n  SceneFlexItem,\n  SceneFlexLayout,\n  sceneGraph,\n  SceneObjectBase,\n  SceneObjectState,\n} from '@grafana/scenes';\nimport { GrafanaTheme2, LoadingState } from '@grafana/data';\nimport { explorationDS, MetricFunction } from 'utils/shared';\nimport { EmptyStateScene } from 'components/states/EmptyState/EmptyStateScene';\nimport { LoadingStateScene } from 'components/states/LoadingState/LoadingStateScene';\nimport { SkeletonComponent } from '../ByFrameRepeater';\nimport { barsPanelConfig } from '../panels/barsPanel';\nimport { metricByWithStatus } from '../queries/generateMetricsQuery';\nimport { StepQueryRunner } from '../queries/StepQueryRunner';\nimport { RadioButtonList, useStyles2 } from '@grafana/ui';\nimport { css } from '@emotion/css';\nimport { fieldHasEmptyValues, getTraceExplorationScene } from '../../../utils/utils';\nimport { MINI_PANEL_HEIGHT } from './TracesByServiceScene';\nimport { buildHistogramQuery } from '../queries/histogram';\nimport { histogramPanelConfig } from '../panels/histogram';\nimport { reportAppInteraction, USER_EVENTS_ACTIONS, USER_EVENTS_PAGES } from 'utils/analytics';\nimport { exemplarsTransformations } from '../../../utils/exemplars';\n\nexport interface MiniREDPanelState extends SceneObjectState {\n  panel?: SceneFlexLayout;\n  metric: MetricFunction;\n}\n\nexport class MiniREDPanel extends SceneObjectBase<MiniREDPanelState> {\n  constructor(state: MiniREDPanelState) {\n    super({\n      ...state,\n    });\n\n    this.addActivationHandler(() => {\n      this._onActivate();\n      const data = sceneGraph.getData(this);\n\n      this._subs.add(\n        data.subscribeToState((data) => {\n          if (data.data?.state === LoadingState.Done) {\n            if (data.data.series.length === 0 || data.data.series[0].length === 0 || fieldHasEmptyValues(data)) {\n              this.setState({\n                panel: new SceneFlexLayout({\n                  children: [\n                    new SceneFlexItem({\n                      body: new EmptyStateScene({\n                        imgWidth: 110,\n                      }),\n                    }),\n                  ],\n                }),\n              });\n            } else {\n              this.setState({\n                panel: this.getVizPanel(this.state.metric),\n              });\n            }\n          } else if (data.data?.state === LoadingState.Loading) {\n            this.setState({\n              panel: new SceneFlexLayout({\n                direction: 'column',\n                maxHeight: MINI_PANEL_HEIGHT,\n                height: MINI_PANEL_HEIGHT,\n                children: [\n                  new LoadingStateScene({\n                    component: () => SkeletonComponent(1),\n                  }),\n                ],\n              }),\n            });\n          }\n        })\n      );\n    });\n  }\n\n  private _onActivate() {\n    const traceExploration = getTraceExplorationScene(this);\n    this.setState({\n      $data: new SceneDataTransformer({\n        $data: new StepQueryRunner({\n          maxDataPoints: this.state.metric === 'duration' ? 24 : 64,\n          datasource: explorationDS,\n          queries: [this.state.metric === 'duration' ? buildHistogramQuery() : metricByWithStatus(this.state.metric)],\n        }),\n        transformations: [...exemplarsTransformations(traceExploration.state.locationService)],\n      }),\n      panel: this.getVizPanel(this.state.metric),\n    });\n  }\n\n  private getVizPanel(metric: MetricFunction) {\n    return new SceneFlexLayout({\n      direction: 'row',\n      children: [\n        new SceneFlexItem({\n          body: metric === 'duration' ? this.getDurationVizPanel() : this.getRateOrErrorPanel(metric),\n        }),\n      ],\n    });\n  }\n\n  private getRateOrErrorPanel(metric: MetricFunction) {\n    const panel = barsPanelConfig().setHoverHeader(true).setDisplayMode('transparent');\n    if (metric === 'errors') {\n      panel.setTitle('Errors rate').setCustomFieldConfig('axisLabel', 'Errors').setColor({\n        fixedColor: 'semi-dark-red',\n        mode: 'fixed',\n      });\n    } else {\n      panel.setTitle('Span rate');\n    }\n\n    return panel.build();\n  }\n\n  private getDurationVizPanel() {\n    return histogramPanelConfig()\n      .setTitle('Histogram by duration')\n      .setHoverHeader(true)\n      .setDisplayMode('transparent')\n      .build();\n  }\n\n  public static Component = ({ model }: SceneComponentProps<MiniREDPanel>) => {\n    const { panel } = model.useState();\n    const styles = useStyles2(getStyles);\n    const traceExploration = getTraceExplorationScene(model);\n\n    const selectMetric = () => {\n      reportAppInteraction(USER_EVENTS_PAGES.common, USER_EVENTS_ACTIONS.common.metric_changed, {\n        metric: model.state.metric,\n        location: 'panel',\n      });\n      traceExploration.onChangeMetricFunction(model.state.metric);\n    };\n\n    if (!panel) {\n      return;\n    }\n\n    return (\n      <div className={css([styles.container, styles.clickable])} onClick={selectMetric}>\n        <RadioButtonList\n          className={styles.radioButton}\n          name={`metric-${model.state.metric}`}\n          options={[{ title: '', value: 'selected' }]}\n          onChange={() => selectMetric()}\n          value={'not-selected'}\n        />\n        <panel.Component model={panel} />\n      </div>\n    );\n  };\n}\n\nfunction getStyles(theme: GrafanaTheme2) {\n  return {\n    container: css({\n      flex: 1,\n      width: '100%',\n      display: 'flex',\n      border: `1px solid ${theme.colors.border.weak}`,\n      borderRadius: '2px',\n      background: theme.colors.background.primary,\n      paddingTop: '8px',\n\n      'section, section:hover': {\n        borderColor: 'transparent',\n      },\n\n      '& .show-on-hover': {\n        display: 'none',\n      },\n    }),\n    clickable: css({\n      cursor: 'pointer',\n      maxHeight: MINI_PANEL_HEIGHT,\n\n      ['[class*=\"loading-state-scene\"]']: {\n        height: MINI_PANEL_HEIGHT,\n        overflow: 'hidden',\n      },\n\n      ':hover': {\n        background: theme.colors.background.secondary,\n        input: {\n          backgroundColor: '#ffffff',\n          border: '5px solid #3D71D9',\n          cursor: 'pointer',\n        },\n      },\n    }),\n    radioButton: css({\n      display: 'block',\n      position: 'absolute',\n      top: '4px',\n      left: '8px',\n      zIndex: 2,\n    }),\n  };\n}\n","import React from 'react';\n\nimport {\n  DashboardCursorSync,\n  GrafanaTheme2,\n  MetricFindValue,\n  dateTime,\n  DataFrame,\n  GetTagResponse,\n} from '@grafana/data';\nimport {\n  behaviors,\n  SceneComponentProps,\n  SceneDataTransformer,\n  SceneFlexItem,\n  SceneFlexLayout,\n  sceneGraph,\n  SceneObject,\n  SceneObjectBase,\n  SceneObjectState,\n  SceneObjectUrlSyncConfig,\n  SceneObjectUrlValues,\n  SceneQueryRunner,\n  SceneTimeRange,\n  VariableValue,\n} from '@grafana/scenes';\n\nimport { REDPanel } from './REDPanel';\nimport {\n  MakeOptional,\n  explorationDS,\n  VAR_FILTERS_EXPR,\n  VAR_DATASOURCE_EXPR,\n  MetricFunction,\n  ComparisonSelection,\n  ALL,\n  VAR_LATENCY_THRESHOLD_EXPR,\n  filterStreamingProgressTransformations,\n} from '../../../utils/shared';\nimport { getDataSourceSrv } from '@grafana/runtime';\nimport { ActionViewType, TabsBarScene, actionViewsDefinitions } from './Tabs/TabsBarScene';\nimport { isEqual } from 'lodash';\nimport { getDatasourceVariable, getGroupByVariable, getSpanListColumnsVariable, getTraceExplorationScene } from 'utils/utils';\nimport { reportAppInteraction, USER_EVENTS_ACTIONS, USER_EVENTS_PAGES } from '../../../utils/analytics';\nimport { MiniREDPanel } from './MiniREDPanel';\nimport { Icon, LinkButton, Stack, Tooltip, useStyles2 } from '@grafana/ui';\nimport { css } from '@emotion/css';\nimport { getDefaultSelectionForMetric } from '../../../utils/comparison';\nimport { map, Observable } from 'rxjs';\n\nexport interface TraceSceneState extends SceneObjectState {\n  body: SceneFlexLayout;\n  actionView?: ActionViewType;\n\n  attributes?: string[];\n  selection?: ComparisonSelection;\n}\n\nexport class TracesByServiceScene extends SceneObjectBase<TraceSceneState> {\n  protected _urlSync = new SceneObjectUrlSyncConfig(this, { keys: ['actionView', 'selection'] });\n\n  public constructor(state: MakeOptional<TraceSceneState, 'body'>) {\n    super({\n      body: state.body ?? new SceneFlexLayout({ children: [] }),\n      ...state,\n    });\n\n    this.addActivationHandler(this._onActivate.bind(this));\n  }\n\n  private _onActivate() {\n    this.updateBody();\n\n    const exploration = getTraceExplorationScene(this);\n    const metricVariable = exploration.getMetricVariable();\n    this._subs.add(\n      metricVariable.subscribeToState((newState, prevState) => {\n        if (newState.value !== prevState.value) {\n          const selection = getDefaultSelectionForMetric(newState.value as MetricFunction);\n          if (selection) {\n            this.setState({ selection });\n          }\n          this.updateQueryRunner(newState.value as MetricFunction);\n          this.updateBody();\n        }\n      })\n    );\n\n    this._subs.add(\n      this.subscribeToState((newState, prevState) => {\n        const timeRange = sceneGraph.getTimeRange(this);\n        const selectionFrom = newState.selection?.timeRange?.from;\n        // clear selection if it's out of time range\n        if (selectionFrom && selectionFrom < timeRange.state.value.from.unix()) {\n          this.setState({ selection: undefined });\n        }\n\n        // Set group by to All when starting a comparison\n        if (!isEqual(newState.selection, prevState.selection)) {\n          const groupByVar = getGroupByVariable(this);\n          groupByVar.changeValueTo(ALL);\n          this.updateQueryRunner(metricVariable.getValue() as MetricFunction);\n        }\n      })\n    );\n\n    this._subs.add(\n      getDatasourceVariable(this).subscribeToState(() => {\n        this.updateAttributes();\n      })\n    );\n\n    this._subs.add(\n      getSpanListColumnsVariable(this).subscribeToState(() => {\n        this.updateQueryRunner(metricVariable.getValue() as MetricFunction);\n      })\n    );\n\n    this.updateQueryRunner(metricVariable.getValue() as MetricFunction);\n    this.updateAttributes();\n  }\n\n  updateBody() {\n    const traceExploration = getTraceExplorationScene(this);\n    const metric = traceExploration.getMetricVariable().getValue();\n    const actionViewDef = actionViewsDefinitions.find((v) => v.value === this.state.actionView);\n\n    this.setState({\n      body: buildGraphScene(\n        metric as MetricFunction,\n        actionViewDef ? [actionViewDef?.getScene(metric as MetricFunction)] : undefined\n      ),\n    });\n\n    if (this.state.actionView === undefined) {\n      this.setActionView('breakdown');\n    }\n  }\n\n  private async updateAttributes() {\n    const ds = await getDataSourceSrv().get(VAR_DATASOURCE_EXPR, { __sceneObject: { value: this } });\n\n    if (!ds) {\n      return;\n    }\n\n    ds.getTagKeys?.().then((tagKeys: GetTagResponse | MetricFindValue[]) => {\n      let keys: MetricFindValue[] = [];\n      if ('data' in tagKeys) {\n        keys = (tagKeys as GetTagResponse).data;\n      } else {\n        keys = tagKeys;\n      }\n      const attributes = keys.map((l) => l.text);\n      if (attributes !== this.state.attributes) {\n        this.setState({ attributes });\n      }\n    });\n  }\n\n  getUrlState() {\n    return {\n      actionView: this.state.actionView,\n      selection: this.state.selection ? JSON.stringify(this.state.selection) : undefined,\n    };\n  }\n\n  updateFromUrl(values: SceneObjectUrlValues) {\n    if (typeof values.actionView === 'string') {\n      if (this.state.actionView !== values.actionView) {\n        const actionViewDef = actionViewsDefinitions.find((v) => v.value === values.actionView);\n        if (actionViewDef) {\n          this.setActionView(actionViewDef.value);\n        }\n      }\n    } else if (values.actionView === null) {\n      this.setActionView('breakdown');\n    }\n\n    if (typeof values.selection === 'string') {\n      const newSelection = JSON.parse(values.selection);\n      if (!isEqual(newSelection, this.state.selection)) {\n        this.setState({ selection: newSelection });\n      }\n    }\n  }\n\n  onUserUpdateSelection(newSelection: ComparisonSelection) {\n    this._urlSync.performBrowserHistoryAction(() => {\n      this.setState({ selection: newSelection });\n    });\n  }\n\n  public setActionView(actionView?: ActionViewType) {\n    const { body } = this.state;\n    const actionViewDef = actionViewsDefinitions.find((v) => v.value === actionView);\n    const traceExploration = getTraceExplorationScene(this);\n    const metric = traceExploration.getMetricVariable().getValue();\n\n    if (body.state.children.length > 1) {\n      if (actionViewDef) {\n        body.setState({\n          children: [...body.state.children.slice(0, 2), actionViewDef.getScene(metric as MetricFunction)],\n        });\n        reportAppInteraction(USER_EVENTS_PAGES.analyse_traces, USER_EVENTS_ACTIONS.analyse_traces.action_view_changed, {\n          oldAction: this.state.actionView,\n          newAction: actionView,\n        });\n        this.setState({ actionView: actionViewDef.value });\n      }\n    }\n  }\n\n  private updateQueryRunner(metric: MetricFunction) {\n    const selection = this.state.selection;\n    const select = getSpanListColumnsVariable(this).getValue();\n\n    this.setState({\n      $data: new SceneDataTransformer({\n        $data: new SceneQueryRunner({\n          datasource: explorationDS,\n          queries: [buildQuery(metric, select, selection)],\n          $timeRange: timeRangeFromSelection(selection),\n        }),\n        transformations: [...filterStreamingProgressTransformations, ...spanListTransformations],\n      }),\n    });\n  }\n\n  static Component = ({ model }: SceneComponentProps<TracesByServiceScene>) => {\n    const { body } = model.useState();\n    const styles = useStyles2(getStyles);\n\n    return (\n      <>\n        <div className={styles.title}>\n          <Tooltip content={<MetricTypeTooltip />} placement={'right-start'} interactive>\n            <span className={styles.hand}>\n              Select metric type <Icon name={'info-circle'} />\n            </span>\n          </Tooltip>\n        </div>\n        <body.Component model={body} />\n      </>\n    );\n  };\n}\n\nconst MetricTypeTooltip = () => {\n  const styles = useStyles2(getStyles);\n\n  return (\n    <Stack direction={'column'} gap={1}>\n      <div className={styles.tooltip.title}>RED metrics for traces</div>\n      <span className={styles.tooltip.subtitle}>\n        Explore rate, errors, and duration (RED) metrics generated from traces by Tempo.\n      </span>\n      <div className={styles.tooltip.text}>\n        <div>\n          <span className={styles.tooltip.emphasize}>Rate</span> - Spans per second that match your filter, useful to\n          find unusual spikes in activity\n        </div>\n        <div>\n          <span className={styles.tooltip.emphasize}>Errors</span> -Spans that are failing, overall issues in tracing\n          ecosystem\n        </div>\n        <div>\n          <span className={styles.tooltip.emphasize}>Duration</span> - Amount of time those spans take, represented as a\n          heat map (responds time, latency)\n        </div>\n      </div>\n\n      <div className={styles.tooltip.button}>\n        <LinkButton\n          icon=\"external-link-alt\"\n          fill=\"solid\"\n          size={'sm'}\n          target={'_blank'}\n          href={\n            'https://grafana.com/docs/grafana-cloud/visualizations/simplified-exploration/traces/concepts/#rate-error-and-duration-metrics'\n          }\n          onClick={() =>\n            reportAppInteraction(USER_EVENTS_PAGES.common, USER_EVENTS_ACTIONS.common.metric_docs_link_clicked)\n          }\n        >\n          Read documentation\n        </LinkButton>\n      </div>\n    </Stack>\n  );\n};\n\nfunction getStyles(theme: GrafanaTheme2) {\n  return {\n    title: css({\n      label: 'title',\n      display: 'flex',\n      gap: theme.spacing.x0_5,\n      fontSize: theme.typography.bodySmall.fontSize,\n      paddingBottom: theme.spacing.x0_5,\n      alignItems: 'center',\n    }),\n    hand: css({\n      label: 'hand',\n      cursor: 'pointer',\n    }),\n    tooltip: {\n      label: 'tooltip',\n      title: css({\n        fontSize: '14px',\n        fontWeight: 500,\n      }),\n      subtitle: css({\n        marginBottom: theme.spacing.x1,\n      }),\n      text: css({\n        label: 'text',\n        color: theme.colors.text.secondary,\n\n        div: {\n          marginBottom: theme.spacing.x0_5,\n        },\n      }),\n      emphasize: css({\n        label: 'emphasize',\n        color: theme.colors.text.primary,\n      }),\n      button: css({\n        marginBottom: theme.spacing.x0_5,\n      }),\n    },\n  };\n}\n\nconst MAIN_PANEL_HEIGHT = 240;\nexport const MINI_PANEL_HEIGHT = (MAIN_PANEL_HEIGHT - 8) / 2;\n\nexport function buildQuery(type: MetricFunction, select: VariableValue, selection?: ComparisonSelection) {\n  const columns = select?.toString();\n  const selectQuery = columns !== '' ? ` | select(${columns})` : '';\n  let typeQuery = '';\n  switch (type) {\n    case 'errors':\n      typeQuery = ' && status = error';\n      break;\n    case 'duration':\n      if (selection) {\n        const duration = [];\n        if (selection.duration?.from.length) {\n          duration.push(`duration >= ${selection.duration.from}`);\n        }\n        if (selection.duration?.to.length) {\n          duration.push(`duration <= ${selection.duration.to}`);\n        }\n        if (duration.length) {\n          typeQuery += '&& ' + duration.join(' && ');\n        }\n      }\n      if (!typeQuery.length) {\n        typeQuery = `&& duration > ${VAR_LATENCY_THRESHOLD_EXPR}`;\n      }\n      break;\n  }\n  return {\n    refId: 'A',\n    query: `{${VAR_FILTERS_EXPR}${typeQuery}}${selectQuery}`,\n    queryType: 'traceql',\n    tableType: 'spans',\n    limit: 200,\n    spss: 10,\n    filters: [],\n  };\n}\n\nfunction timeRangeFromSelection(selection?: ComparisonSelection) {\n  const fromTimerange = (selection?.timeRange?.from || 0) * 1000;\n  const toTimerange = (selection?.timeRange?.to || 0) * 1000;\n  return fromTimerange && toTimerange\n    ? new SceneTimeRange({\n        from: fromTimerange.toFixed(0),\n        to: toTimerange.toFixed(0),\n        value: {\n          from: dateTime(fromTimerange),\n          to: dateTime(toTimerange),\n          raw: { from: dateTime(fromTimerange), to: dateTime(toTimerange) },\n        },\n      })\n    : undefined;\n}\n\nfunction buildGraphScene(metric: MetricFunction, children?: SceneObject[]) {\n  const secondaryPanel =\n    metric === 'rate'\n      ? new MiniREDPanel({ metric: 'errors' })\n      : new MiniREDPanel({\n          metric: 'rate',\n        });\n\n  const tertiaryPanel =\n    metric === 'duration'\n      ? new MiniREDPanel({\n          metric: 'errors',\n        })\n      : new MiniREDPanel({ metric: 'duration' });\n\n  return new SceneFlexLayout({\n    direction: 'column',\n    $behaviors: [\n      new behaviors.CursorSync({\n        key: 'metricCrosshairSync',\n        sync: DashboardCursorSync.Crosshair,\n      }),\n    ],\n    children: [\n      new SceneFlexLayout({\n        direction: 'row',\n        ySizing: 'content',\n        children: [\n          new SceneFlexItem({\n            minHeight: MAIN_PANEL_HEIGHT,\n            maxHeight: MAIN_PANEL_HEIGHT,\n            width: '60%',\n            body: new REDPanel({}),\n          }),\n          new SceneFlexLayout({\n            direction: 'column',\n            minHeight: MAIN_PANEL_HEIGHT,\n            maxHeight: MAIN_PANEL_HEIGHT,\n            children: [\n              new SceneFlexItem({\n                minHeight: MINI_PANEL_HEIGHT,\n                maxHeight: MINI_PANEL_HEIGHT,\n                height: MINI_PANEL_HEIGHT,\n\n                body: secondaryPanel,\n              }),\n              new SceneFlexItem({\n                minHeight: MINI_PANEL_HEIGHT,\n                maxHeight: MINI_PANEL_HEIGHT,\n                height: MINI_PANEL_HEIGHT,\n\n                ySizing: 'fill',\n\n                body: tertiaryPanel,\n              }),\n            ],\n          }),\n        ],\n      }),\n      new SceneFlexItem({\n        ySizing: 'content',\n        body: new TabsBarScene({}),\n      }),\n      ...(children || []),\n    ],\n  });\n}\n\nconst spanListTransformations = [\n  () => (source: Observable<DataFrame[]>) => {\n    return source.pipe(\n      map((data: DataFrame[]) => {\n        return data.map((df) => ({\n          ...df,\n          fields: df.fields.filter((f) => !f.name.startsWith('nestedSet')),\n        }));\n      })\n    );\n  },\n  {\n    id: 'sortBy',\n    options: {\n      fields: {},\n      sort: [\n        {\n          field: 'Duration',\n          desc: true,\n        },\n      ],\n    },\n  },\n  {\n    id: 'organize',\n    options: {\n      indexByName: {\n        'Trace Service': 0,\n        'Trace Name': 1,\n        'Span ID': 2,\n        Duration: 3,\n        'Start time': 4,\n        status: 5,\n      },\n    },\n  },\n];\n","import React from 'react';\n\nimport {\n  SceneObjectState,\n  SceneObjectBase,\n  SceneComponentProps,\n  PanelBuilders,\n  SceneQueryRunner,\n  sceneGraph,\n  SceneObject,\n} from '@grafana/scenes';\nimport { LoadingState, GrafanaTheme2 } from '@grafana/data';\nimport { explorationDS } from 'utils/shared';\nimport { LoadingStateScene } from 'components/states/LoadingState/LoadingStateScene';\nimport { css } from '@emotion/css';\nimport Skeleton from 'react-loading-skeleton';\nimport { useStyles2 } from '@grafana/ui';\n\nexport interface TracePanelState extends SceneObjectState {\n  panel?: SceneObject;\n  traceId: string;\n  spanId?: string;\n}\n\nexport class TraceViewPanelScene extends SceneObjectBase<TracePanelState> {\n  constructor(state: TracePanelState) {\n    super({\n      $data: new SceneQueryRunner({\n        datasource: explorationDS,\n        queries: [{ refId: 'A', query: state.traceId, queryType: 'traceql' }],\n      }),\n      ...state,\n    });\n\n    this.addActivationHandler(() => {\n      const data = sceneGraph.getData(this);\n\n      this._subs.add(\n        data.subscribeToState((data) => {\n          if (data.data?.state === LoadingState.Done) {\n            this.setState({\n              panel: this.getVizPanel().build(),\n            });\n          } else if (data.data?.state === LoadingState.Loading) {\n            this.setState({\n              panel: new LoadingStateScene({\n                component: SkeletonComponent,\n              }),\n            });\n          }\n        })\n      );\n    });\n  }\n\n  private getVizPanel() {\n    const panel = PanelBuilders.traces().setHoverHeader(true);\n    if (this.state.spanId) {\n      panel.setOption('focusedSpanId' as any, this.state.spanId as any);\n    }\n    return panel;\n  }\n\n  public static Component = ({ model }: SceneComponentProps<TraceViewPanelScene>) => {\n    const { panel } = model.useState();\n    const styles = useStyles2(getStyles);\n\n    if (!panel) {\n      return;\n    }\n\n    return (\n      <div className={styles.panelContainer}>\n        <panel.Component model={panel} />\n      </div>\n    );\n  };\n}\n\nconst SkeletonComponent = () => {\n  const styles = useStyles2(getStyles);\n\n  return (\n    <div className={styles.container}>\n      <div className={styles.header}>\n        <Skeleton count={1} width={60} />\n        <Skeleton count={1} width={60} />\n      </div>\n      <Skeleton count={2} width={'80%'} />\n      <div className={styles.map}>\n        <Skeleton count={1} />\n        <Skeleton count={1} height={70} />\n      </div>\n\n      <div className={styles.span}>\n        <span className={styles.service1}>\n          <Skeleton count={1} />\n        </span>\n        <span className={styles.bar1}>\n          <Skeleton count={1} />\n        </span>\n      </div>\n      <div className={styles.span}>\n        <span className={styles.service2}>\n          <Skeleton count={1} />\n        </span>\n        <span className={styles.bar2}>\n          <Skeleton count={1} />\n        </span>\n      </div>\n      <div className={styles.span}>\n        <span className={styles.service3}>\n          <Skeleton count={1} />\n        </span>\n        <span className={styles.bar3}>\n          <Skeleton count={1} />\n        </span>\n      </div>\n      <div className={styles.span}>\n        <span className={styles.service4}>\n          <Skeleton count={1} />\n        </span>\n        <span className={styles.bar4}>\n          <Skeleton count={1} />\n        </span>\n      </div>\n      <div className={styles.span}>\n        <span className={styles.service5}>\n          <Skeleton count={1} />\n        </span>\n        <span className={styles.bar5}>\n          <Skeleton count={1} />\n        </span>\n      </div>\n      <div className={styles.span}>\n        <span className={styles.service6}>\n          <Skeleton count={1} />\n        </span>\n        <span className={styles.bar6}>\n          <Skeleton count={1} />\n        </span>\n      </div>\n    </div>\n  );\n};\n\nfunction getStyles(theme: GrafanaTheme2) {\n  return {\n    panelContainer: css({\n      display: 'flex',\n      height: '100%',\n\n      '& .show-on-hover': {\n        display: 'none',\n      },\n    }),\n    container: css({\n      height: 'calc(100% - 32px)',\n      width: 'calc(100% - 32px)',\n      position: 'absolute',\n      backgroundColor: theme.colors.background.primary,\n      border: `1px solid ${theme.colors.border.weak}`,\n      padding: '5px',\n    }),\n    header: css({\n      marginBottom: '20px',\n      display: 'flex',\n      justifyContent: 'space-between',\n    }),\n    map: css({\n      marginTop: '20px',\n      marginBottom: '20px',\n    }),\n    span: css({\n      display: 'flex',\n    }),\n    service1: css({\n      width: '25%',\n    }),\n    bar1: css({\n      marginLeft: '5%',\n      width: '70%',\n    }),\n    service2: css({\n      width: '25%',\n    }),\n    bar2: css({\n      marginLeft: '10%',\n      width: '15%',\n    }),\n    service3: css({\n      width: '20%',\n      marginLeft: '5%',\n    }),\n    bar3: css({\n      marginLeft: '10%',\n      width: '65%',\n    }),\n    service4: css({\n      width: '20%',\n      marginLeft: '5%',\n    }),\n    bar4: css({\n      marginLeft: '15%',\n      width: '60%',\n    }),\n    service5: css({\n      width: '15%',\n      marginLeft: '10%',\n    }),\n    bar5: css({\n      marginLeft: '20%',\n      width: '35%',\n    }),\n    service6: css({\n      width: '15%',\n      marginLeft: '10%',\n    }),\n    bar6: css({\n      marginLeft: '30%',\n      width: '15%',\n    }),\n  };\n}\n","import React from 'react';\n\nimport { SceneObjectState, SceneObjectBase, SceneComponentProps, SceneObject } from '@grafana/scenes';\nimport { EmptyStateScene } from 'components/states/EmptyState/EmptyStateScene';\nimport { TraceViewPanelScene } from '../panels/TraceViewPanelScene';\nimport { reportAppInteraction, USER_EVENTS_ACTIONS, USER_EVENTS_PAGES } from '../../../utils/analytics';\nimport { getTraceExplorationScene } from '../../../utils/utils';\n\nexport interface DetailsSceneState extends SceneObjectState {\n  body?: SceneObject;\n}\n\nexport class TraceDrawerScene extends SceneObjectBase<DetailsSceneState> {\n  constructor(state: Partial<DetailsSceneState>) {\n    super({\n      ...state,\n    });\n\n    this.addActivationHandler(this._onActivate.bind(this));\n  }\n\n  private _onActivate() {\n    this.updateBody();\n\n    const traceExploration = getTraceExplorationScene(this);\n\n    traceExploration.subscribeToState((newState, prevState) => {\n      if (newState.traceId !== prevState.traceId || newState.spanId !== prevState.spanId) {\n        this.updateBody();\n        reportAppInteraction(USER_EVENTS_PAGES.analyse_traces, USER_EVENTS_ACTIONS.analyse_traces.open_trace, {\n          traceId: newState.traceId,\n          spanId: newState.spanId,\n        });\n      }\n    });\n  }\n\n  private updateBody() {\n    const traceExploration = getTraceExplorationScene(this);\n\n    if (traceExploration.state.traceId) {\n      this.setState({\n        body: new TraceViewPanelScene({\n          traceId: traceExploration.state.traceId,\n          spanId: traceExploration.state.spanId,\n        }),\n      });\n    } else {\n      this.setState({\n        body: new EmptyStateScene({\n          message: 'No trace selected',\n        }),\n      });\n    }\n  }\n\n  public static Component = ({ model }: SceneComponentProps<TraceDrawerScene>) => {\n    const { body } = model.useState();\n    return body && <body.Component model={body} />;\n  };\n}\n","import { css } from '@emotion/css';\nimport React, { useEffect, useMemo, useState } from 'react';\n\nimport { AdHocVariableFilter, GrafanaTheme2, SelectableValue, toOption } from '@grafana/data';\nimport { Button, InputActionMeta, Select, SelectBaseProps, useStyles2 } from '@grafana/ui';\n\nimport { FilterByVariable } from './FilterByVariable';\nimport { ignoredAttributes, RESOURCE_ATTR, SPAN_ATTR } from 'utils/shared';\nimport { getTraceExplorationScene } from 'utils/utils';\nimport { VariableValue } from '@grafana/scenes';\nimport { filteredOptions } from '../GroupBySelector';\n\ninterface Props {\n  filter: AdHocVariableFilter;\n  isWip?: boolean;\n  model: FilterByVariable;\n}\n\nexport function FilterRenderer({ filter, model, isWip }: Props) {\n  const styles = useStyles2(getStyles);\n\n  const [state, setState] = useState<{\n    keys?: SelectableValue[];\n    values?: SelectableValue[];\n    isKeysLoading?: boolean;\n    isValuesLoading?: boolean;\n  }>({});\n\n  const [keyQuery, setKeyQuery] = useState<string>('');\n  const [valueQuery, setValueQuery] = useState<string>('');\n\n  const key = filter.key !== '' ? (state?.keys?.find((key) => key.value === filter.key) ?? toOption(filter.key)) : null;\n  const value = filter.value !== '' ? toOption(filter.value) : null;\n  const exploration = getTraceExplorationScene(model);\n  const { value: metric } = exploration.getMetricVariable().useState();\n\n  const operators = useMemo(() => {\n    return model._getOperators();\n  }, [model]);\n\n  useEffect(() => {\n    async function updateKeys() {\n      setState({ ...state, isKeysLoading: true });\n      const keys = formatKeys(await model._getKeys(filter.key), model.state.filters, metric);\n      setState({ ...state, isKeysLoading: false, keys });\n    }\n\n    if (key && state.keys === undefined && !state.isKeysLoading) {\n      updateKeys();\n    }\n  }, [filter, key, metric, model, state]);\n\n  const keyOptions = useMemo(() => {\n    if (!state.keys) {\n      return;\n    }\n\n    return filteredOptions(state.keys, keyQuery);\n  }, [keyQuery, state.keys]);\n\n  const valueOptions = useMemo(() => {\n    if (!state.values) {\n      return;\n    }\n\n    return filteredOptions(state.values, valueQuery);\n  }, [valueQuery, state.values]);\n\n  const keyAutoFocus = isWip && filter.key === '';\n  const keySelect = (\n    <BaseSelect\n      value={key}\n      placeholder={'Select attribute'}\n      options={keyOptions}\n      onChange={(v) => model._updateFilter(filter, { key: v.value })}\n      isLoading={state.isKeysLoading}\n      autoFocus={keyAutoFocus}\n      openMenuOnFocus={keyAutoFocus}\n      onOpenMenu={async () => {\n        setState({ ...state, isKeysLoading: true });\n        const keys = formatKeys(await model._getKeys(filter.key), model.state.filters, metric);\n        setState({ ...state, isKeysLoading: false, keys });\n      }}\n      onInputChange={(value: string, { action }: InputActionMeta) => {\n        if (action === 'input-change') {\n          setKeyQuery(value);\n        }\n      }}\n      onCloseMenu={() => setKeyQuery('')}\n      virtualized\n    />\n  );\n\n  const valueAutoFocus = isWip && filter.key !== '';\n  const valueSelect = (\n    <BaseSelect\n      value={value}\n      placeholder={'value'}\n      options={valueOptions}\n      onChange={(v) => model._updateFilter(filter, { value: v.value })}\n      isLoading={state.isValuesLoading}\n      autoFocus={valueAutoFocus}\n      openMenuOnFocus={valueAutoFocus}\n      onOpenMenu={async () => {\n        setState({ ...state, isValuesLoading: true });\n        const values = sortValues(await model._getValuesFor(filter));\n        setState({ ...state, isValuesLoading: false, values });\n      }}\n      onInputChange={(value: string, { action }: InputActionMeta) => {\n        if (action === 'input-change') {\n          setValueQuery(value);\n        }\n      }}\n      onCloseMenu={() => setValueQuery('')}\n      virtualized\n      allowCustomValue\n    />\n  );\n\n  if (isWip && filter.key === '') {\n    return <div className={styles.wrapper}>{keySelect}</div>;\n  }\n\n  return (\n    <div className={styles.wrapper}>\n      {keySelect}\n      <BaseSelect\n        value={filter.operator}\n        disabled={model.state.readOnly}\n        options={operators}\n        onChange={(v) => model._updateFilter(filter, { operator: v.value })}\n      />\n      {valueSelect}\n      {filter.value.length > 0 && (\n        <Button\n          variant=\"secondary\"\n          aria-label=\"Remove filter\"\n          title=\"Remove filter\"\n          className={styles.removeButton}\n          icon=\"times\"\n          onClick={() => model._removeFilter(filter)}\n        />\n      )}\n    </div>\n  );\n}\n\nexport const formatKeys = (\n  keys: Array<SelectableValue<string>>,\n  filters: AdHocVariableFilter[],\n  metric: VariableValue\n) => {\n  // Ensure we always have the same order of keys\n  const resourceAttributes = keys.filter((k) => k.value?.includes(RESOURCE_ATTR));\n  const spanAttributes = keys.filter((k) => k.value?.includes(SPAN_ATTR));\n  const intrinsicAttributes = keys.filter((k) => {\n    let checks =\n      !k.value?.includes(RESOURCE_ATTR) && !k.value?.includes(SPAN_ATTR) && ignoredAttributes.indexOf(k.value!) === -1;\n\n    // if filters (primary signal) has kind key selected, then don't add kind to intrinsicAttributes\n    // as you would overwrite it in the query if it's selected in the drop down\n    if (filters.find((f) => f.key === 'kind')) {\n      checks = checks && k.value !== 'kind' && k.value !== 'span:kind';\n    }\n\n    // if filters (primary signal) has 'Full Traces' selected, then don't add rootName or rootServiceName to intrinsicAttributes\n    // as you would overwrite it in the query if it's selected in the drop down\n    if (filters.find((f) => f.key === 'nestedSetParent')) {\n      checks =\n        checks &&\n        k.value !== 'rootName' &&\n        k.value !== 'rootServiceName' &&\n        k.value !== 'trace:rootName' &&\n        k.value !== 'trace:rootService';\n    }\n\n    // if rate or error rate metric is selected, then don't add status to intrinsicAttributes\n    // as you would overwrite it in the query if it's selected in the drop down\n    if (metric === 'rate' || metric === 'errors') {\n      checks = checks && k.value !== 'status' && k.value !== 'span:status';\n    }\n\n    return checks;\n  });\n  return intrinsicAttributes\n    ?.concat(resourceAttributes)\n    .concat(spanAttributes)\n    .map((key) => {\n      return {\n        label: key.value,\n        value: key.value,\n      };\n    });\n};\n\nexport const sortValues = (values: Array<SelectableValue<string>>) => {\n  return values.sort((a, b) => {\n    if (a.label && b.label) {\n      return a.label.toLowerCase() < b.label.toLowerCase() ? -1 : 1;\n    }\n    return 0;\n  });\n};\n\nconst BaseSelect = (props: SelectBaseProps<string>) => {\n  const styles = useStyles2(getStyles);\n  return (\n    <Select\n      width=\"auto\"\n      {...props}\n      className={css(styles.control, props.className)}\n      components={{\n        IndicatorsContainer: () => null,\n        IndicatorSeparator: () => null,\n      }}\n    />\n  );\n};\n\nconst getStyles = (theme: GrafanaTheme2) => ({\n  removeButton: css({\n    padding: '2px',\n    height: 'fit-content',\n\n    '& > svg': {\n      margin: 0,\n    },\n  }),\n  wrapper: css({\n    display: 'flex',\n    alignItems: 'center',\n\n    '> div, > button': {\n      borderRadius: 0,\n    },\n    '> div:first-child': {\n      borderRadius: `${theme.shape.radius.default} 0 0 ${theme.shape.radius.default}`,\n    },\n    '> button': {\n      borderRadius: `0 ${theme.shape.radius.default} ${theme.shape.radius.default} 0`,\n    },\n  }),\n  control: css({\n    padding: 0,\n    border: `1px solid ${theme.colors.border.weak}`,\n    background: '#CCCCDC0D',\n    fontSize: 12,\n    minHeight: 'auto',\n    height: '22px',\n    lineHeight: '18px',\n    boxSizing: 'border-box',\n    boxShadow: 'none',\n\n    '& > div': {\n      paddingLeft: '8px',\n      paddingRight: '8px',\n    },\n  }),\n});\n","import React from 'react';\n\nimport { FilterByVariable } from './FilterByVariable';\n\nimport { FilterRenderer } from './FilterRenderer';\nimport { css } from '@emotion/css';\nimport { useStyles2 } from '@grafana/ui';\nimport { reportAppInteraction, USER_EVENTS_ACTIONS, USER_EVENTS_PAGES } from '../../../utils/analytics';\n\ninterface Props {\n  model: FilterByVariable;\n  otherFiltersLength: number;\n}\n\nexport function AddFilter({ model, otherFiltersLength }: Props) {\n  const { _wip } = model.useState();\n  const styles = useStyles2(getStyles);\n\n  const onClick = () => {\n    reportAppInteraction(USER_EVENTS_PAGES.common, USER_EVENTS_ACTIONS.common.new_filter_added_manually);\n    model._addWip();\n  };\n\n  if (!_wip) {\n    return (\n      <div className={styles.addFilterBar} onClick={onClick}>\n        {otherFiltersLength === 0 ? 'Filter by attribute...' : undefined}\n      </div>\n    );\n  }\n\n  return <FilterRenderer filter={_wip} model={model} isWip={true} />;\n}\n\nconst getStyles = () => ({\n  addFilterBar: css({\n    height: '100%',\n    display: 'flex',\n    flex: 1,\n    cursor: 'pointer',\n    fontSize: '12px',\n    lineHeight: '12px',\n    color: '#7B8087',\n    alignItems: 'center',\n    padding: '0 8px',\n  }),\n});\n","import { css } from '@emotion/css';\nimport React from 'react';\n\nimport { GrafanaTheme2 } from '@grafana/data';\nimport { Select, SelectBaseProps, Text, useStyles2 } from '@grafana/ui';\n\nimport { FilterByVariable } from './FilterByVariable';\nimport { getTraceExplorationScene } from '../../../utils/utils';\nimport { primarySignalOptions } from '../../../pages/Explore/primary-signals';\n\ninterface Props {\n  model: FilterByVariable;\n}\n\nexport function PrimarySignalRenderer({ model }: Props) {\n  const exploration = getTraceExplorationScene(model);\n  const { primarySignal } = exploration.useState();\n  const styles = useStyles2(getStyles);\n\n  return (\n    <BaseSelect\n      value={primarySignal}\n      options={[{\n        options: primarySignalOptions,\n      }]}\n      components={{\n        GroupHeading: () => <div className={styles.heading}><Text weight=\"bold\" variant=\"bodySmall\" color=\"secondary\">Primary signal</Text></div>,\n      }}\n      onChange={(v) => v.value && exploration.onChangePrimarySignal(v.value)}\n    />\n  );\n}\n\nexport const BaseSelect = (props: SelectBaseProps<string>) => {\n  const styles = useStyles2(getStyles);\n  return (\n    <Select\n      width=\"auto\"\n      {...props}\n      className={css(styles.control, props.className)}\n      role=\"option\"\n    />\n  );\n};\n\nconst getStyles = (theme: GrafanaTheme2) => ({\n  control: css({\n    padding: 0,\n    border: `1px solid ${theme.colors.border.weak}`,\n    background: '#CCCCDC0D',\n    fontSize: 12,\n    minHeight: 'auto',\n    height: '22px',\n    lineHeight: '18px',\n    boxSizing: 'border-box',\n    boxShadow: 'none',\n\n    'svg': {\n      marginRight: '-4px',\n    },\n  }),\n  heading: css({\n    padding: theme.spacing(1, 1, 0.75, 0.75),\n    borderLeft: '2px solid transparent',\n    borderBottom: `1px solid ${theme.colors.border.weak}`,\n  }),\n});\n","import { css } from '@emotion/css';\nimport React from 'react';\n\nimport { GrafanaTheme2 } from '@grafana/data';\nimport { Select, SelectBaseProps, useStyles2 } from '@grafana/ui';\n\nimport { FilterByVariable } from './FilterByVariable';\nimport { getMetricValue, getTraceExplorationScene } from '../../../utils/utils';\nimport { MetricFunction } from '../../../utils/shared';\nimport { reportAppInteraction, USER_EVENTS_ACTIONS, USER_EVENTS_PAGES } from 'utils/analytics';\n\ninterface Props {\n  model: FilterByVariable;\n}\n\nexport function MetricSelect({ model }: Props) {\n  const metric = getMetricValue(model);\n\n  return (\n    <BaseSelect\n      value={metric as MetricFunction}\n      options={[\n        { label: 'Rate', value: 'rate' },\n        { label: 'Errors', value: 'errors' },\n        { label: 'Duration', value: 'duration' },\n      ]}\n      onChange={(v) => {\n        v.value && getTraceExplorationScene(model).onChangeMetricFunction(v.value);\n      \n        reportAppInteraction(USER_EVENTS_PAGES.common, USER_EVENTS_ACTIONS.common.metric_changed, {\n          metric: v.value,\n          location: 'filter',\n        });\n      }}\n    />\n  );\n}\n\nexport const BaseSelect = (props: SelectBaseProps<string>) => {\n  const styles = useStyles2(getStyles);\n  return (\n    <Select\n      width=\"auto\"\n      {...props}\n      className={css(styles.control, props.className)}\n    />\n  );\n};\n\nconst getStyles = (theme: GrafanaTheme2) => ({\n  control: css({\n    padding: 0,\n    border: `1px solid ${theme.colors.border.weak}`,\n    background: '#CCCCDC0D',\n    fontSize: 12,\n    minHeight: 'auto',\n    height: '22px',\n    lineHeight: '18px',\n    boxSizing: 'border-box',\n    boxShadow: 'none',\n\n    'svg': {\n      marginRight: '-4px',\n    },\n  }),\n});\n","import React from 'react';\n\nimport { GrafanaTheme2 } from '@grafana/data';\nimport { SceneComponentProps } from '@grafana/scenes';\n\nimport { FilterByVariable } from './FilterByVariable';\n\nimport { FilterRenderer } from './FilterRenderer';\nimport { AddFilter } from './AddFilter';\nimport { Button, Icon, useStyles2 } from '@grafana/ui';\nimport { css } from '@emotion/css';\nimport { getTraceExplorationScene, getFilterSignature } from '../../../utils/utils';\nimport { PrimarySignalRenderer } from './PrimarySignalRenderer';\nimport { getSignalForKey, primarySignalOptions } from '../../../pages/Explore/primary-signals';\nimport { MetricSelect } from './MetricSelect';\n\nexport function FilterSetRenderer({ model }: SceneComponentProps<FilterByVariable>) {\n  const exploration = getTraceExplorationScene(model);\n  const { primarySignal } = exploration.useState();\n  const { filters } = model.useState();\n  const styles = useStyles2(getStyles);\n\n  const primarySignalOption = getSignalForKey(primarySignal);\n  const primarySignalFilter = filters.find(\n    (f) => getFilterSignature(f) === getFilterSignature(primarySignalOption?.filter)\n  );\n  const otherFilters = filters.filter((f) => getFilterSignature(f) !== getFilterSignature(primarySignalOption?.filter));\n\n  const clearFilters = () => {\n    if (model.state._wip) {\n      model.setState({ _wip: undefined });\n      return;\n    }\n    for (const filter of filters) {\n      // Don't remove the primary signal filter\n      if (\n        !primarySignalOptions.find(\n          (option) =>\n            option.filter.key === filter.key &&\n            option.filter.value === filter.value &&\n            option.filter.operator === filter.operator\n        )\n      ) {\n        model._removeFilter(filter);\n      }\n    }\n  };\n\n  return (\n    <div className={styles.container}>\n      <Icon name={'filter'} />\n      <MetricSelect model={model} />\n      {primarySignalFilter && (\n        <>\n          <div className={styles.text}>of</div>\n          <PrimarySignalRenderer model={model} />\n        </>\n      )}\n      {(otherFilters.length > 0 || model.state._wip) && <div className={styles.text}>where</div>}\n      {otherFilters.map((filter, idx) => (\n        <React.Fragment key={idx}>\n          <FilterRenderer filter={filter} model={model} />\n        </React.Fragment>\n      ))}\n\n      <AddFilter model={model} otherFiltersLength={otherFilters.length} />\n\n      {filters.length > 0 && (\n        <Button\n          variant=\"secondary\"\n          aria-label=\"Clear filters\"\n          size=\"sm\"\n          className={styles.clearFilters}\n          icon=\"times\"\n          onClick={() => clearFilters()}\n          tooltip=\"Clear filters\"\n          tooltipPlacement=\"left\"\n        />\n      )}\n    </div>\n  );\n}\n\nconst getStyles = (theme: GrafanaTheme2) => ({\n  container: css({\n    height: '32px',\n    display: 'flex',\n    border: `1px solid ${theme.colors.border.weak}`,\n    alignItems: 'center',\n    gap: theme.spacing(1),\n    padding: `${theme.spacing(0.5)} 0 ${theme.spacing(0.5)} ${theme.spacing(1)}`,\n    flexGrow: 1,\n  }),\n  text: css({\n    fontSize: 12,\n  }),\n  clearFilters: css({\n    fontSize: 12,\n    marginRight: '2px',\n  }),\n});\n","import React from 'react';\n\nimport { AdHocVariableFilter } from '@grafana/data';\nimport { AdHocFiltersVariable, SceneComponentProps } from '@grafana/scenes';\nimport { VariableHide } from '@grafana/schema';\n\nimport { FilterSetRenderer } from './FilterSetRenderer';\nimport { VAR_FILTERS, explorationDS } from 'utils/shared';\nimport { isNumber } from 'utils/utils';\n\nexport type FilterByVariableState = ConstructorParameters<typeof AdHocFiltersVariable>[0] & {\n  initialFilters?: AdHocVariableFilter[];\n};\n\nexport class FilterByVariable extends AdHocFiltersVariable {\n  static Component = ({ model }: SceneComponentProps<FilterByVariable>) => <FilterSetRenderer model={model} />;\n\n  constructor({ initialFilters }: FilterByVariableState) {\n    super({\n      hide: VariableHide.hideLabel,\n      name: VAR_FILTERS,\n      datasource: explorationDS,\n      layout: 'horizontal',\n      filters: initialFilters ?? [],\n      expressionBuilder: renderTraceQLLabelFilters,\n    });\n  }\n}\n\nexport function renderTraceQLLabelFilters(filters: AdHocVariableFilter[]) {\n  const expr = filters\n    .filter((f) => f.key && f.operator && f.value)\n    .map((filter) => renderFilter(filter))\n    .join('&&');\n  // Return 'true' if there are no filters to help with cases where we want to concatenate additional filters in the expression\n  // and avoid invalid queries like '{ && key=value }'\n  return expr.length ? expr : 'true';\n}\n\nfunction renderFilter(filter: AdHocVariableFilter) {\n  let val = filter.value;\n  if (!isNumber.test(val) && !['status', 'kind'].includes(filter.key)) {\n    // Add quotes if it's coming from the filter input and it's not already quoted.\n    // Adding a filter from a time series graph already has quotes. This should be handled better.\n    if (typeof val === 'string' && !val.startsWith('\"') && !val.endsWith('\"')) {\n      val = `\"${val}\"`;\n    }\n  }\n\n  return `${filter.key}${filter.operator}${val}`;\n}\n","import { css } from '@emotion/css';\nimport React from 'react';\n\nimport { AdHocVariableFilter, GrafanaTheme2 } from '@grafana/data';\nimport {\n  CustomVariable,\n  DataSourceVariable,\n  SceneComponentProps,\n  sceneGraph,\n  SceneObject,\n  SceneObjectBase,\n  SceneObjectState,\n  SceneObjectUrlSyncConfig,\n  SceneObjectUrlValues,\n  SceneRefreshPicker,\n  SceneTimePicker,\n  SceneTimeRange,\n  SceneVariableSet,\n} from '@grafana/scenes';\nimport { LocationService } from '@grafana/runtime';\nimport { Badge, Button, Drawer, Dropdown, Icon, Menu, Stack, Tooltip, useStyles2 } from '@grafana/ui';\n\nimport { TracesByServiceScene } from '../../components/Explore/TracesByService/TracesByServiceScene';\nimport {\n  DATASOURCE_LS_KEY,\n  MetricFunction,\n  VAR_DATASOURCE,\n  VAR_GROUPBY,\n  VAR_LATENCY_PARTIAL_THRESHOLD,\n  VAR_LATENCY_THRESHOLD,\n  VAR_METRIC,\n  VAR_SPAN_LIST_COLUMNS,\n} from '../../utils/shared';\nimport { getTraceExplorationScene, getFilterSignature, getFiltersVariable } from '../../utils/utils';\nimport { TraceDrawerScene } from '../../components/Explore/TracesByService/TraceDrawerScene';\nimport { FilterByVariable } from 'components/Explore/filters/FilterByVariable';\nimport { getSignalForKey, primarySignalOptions } from './primary-signals';\nimport { VariableHide } from '@grafana/schema';\nimport { reportAppInteraction, USER_EVENTS_ACTIONS, USER_EVENTS_PAGES } from 'utils/analytics';\n\nexport interface TraceExplorationState extends SceneObjectState {\n  topScene?: SceneObject;\n  controls: SceneObject[];\n\n  body: SceneObject;\n\n  drawerScene?: TraceDrawerScene;\n  primarySignal?: string;\n\n  // details scene\n  traceId?: string;\n  spanId?: string;\n\n  // just for the starting data source\n  initialDS?: string;\n  initialFilters?: AdHocVariableFilter[];\n\n  locationService: LocationService;\n}\n\nconst version = process.env.VERSION;\nconst buildTime = process.env.BUILD_TIME;\nconst commitSha = process.env.COMMIT_SHA;\nconst compositeVersion = `v${version} - ${buildTime?.split('T')[0]} (${commitSha})`;\n\nexport class TraceExploration extends SceneObjectBase<TraceExplorationState> {\n  protected _urlSync = new SceneObjectUrlSyncConfig(this, { keys: ['primarySignal', 'traceId', 'spanId', 'metric'] });\n\n  public constructor(state: { locationService: LocationService } & Partial<TraceExplorationState>) {\n    super({\n      $timeRange: state.$timeRange ?? new SceneTimeRange({}),\n      $variables: state.$variables ?? getVariableSet(state.initialDS, state.initialFilters),\n      controls: state.controls ?? [new SceneTimePicker({}), new SceneRefreshPicker({})],\n      body: new TraceExplorationScene({}),\n      drawerScene: new TraceDrawerScene({}),\n      primarySignal: state.primarySignal ?? primarySignalOptions[0].value,\n      ...state,\n    });\n\n    this.addActivationHandler(this._onActivate.bind(this));\n  }\n\n  public _onActivate() {\n    if (!this.state.topScene) {\n      this.setState({ topScene: getTopScene() });\n    }\n\n    const datasourceVar = sceneGraph.lookupVariable(VAR_DATASOURCE, this) as DataSourceVariable;\n    datasourceVar.subscribeToState((newState) => {\n      if (newState.value) {\n        localStorage.setItem(DATASOURCE_LS_KEY, newState.value.toString());\n      }\n    });\n    this.subscribeToState((newState, oldState) => {\n      if (newState.primarySignal && newState.primarySignal !== oldState.primarySignal) {\n        this.updateFiltersWithPrimarySignal(newState.primarySignal, oldState.primarySignal);\n      }\n    });\n  }\n\n  public updateFiltersWithPrimarySignal(newSignal?: string, oldSignal?: string) {\n    let signal = newSignal ?? this.state.primarySignal;\n\n    const filtersVar = getFiltersVariable(this);\n    let filters = filtersVar.state.filters;\n    // Remove previous filter for primary signal\n    if (oldSignal) {\n      filters = filters.filter((f) => getFilterSignature(f) !== getFilterSignature(getSignalForKey(oldSignal)?.filter));\n    }\n    // Add new filter\n    const newFilter = getSignalForKey(signal)?.filter;\n    if (newFilter) {\n      filters.unshift(newFilter);\n    }\n    filtersVar.setState({ filters });\n  }\n\n  getUrlState() {\n    return { primarySignal: this.state.primarySignal, traceId: this.state.traceId, spanId: this.state.spanId };\n  }\n\n  updateFromUrl(values: SceneObjectUrlValues) {\n    const stateUpdate: Partial<TraceExplorationState> = {};\n\n    if (values.traceId || values.spanId) {\n      stateUpdate.traceId = values.traceId ? (values.traceId as string) : undefined;\n      stateUpdate.spanId = values.spanId ? (values.spanId as string) : undefined;\n    }\n\n    if (values.primarySignal && values.primarySignal !== this.state.primarySignal) {\n      stateUpdate.primarySignal = values.primarySignal as string;\n    }\n\n    this.setState(stateUpdate);\n  }\n\n  public getMetricVariable() {\n    const variable = sceneGraph.lookupVariable(VAR_METRIC, this);\n    if (!(variable instanceof CustomVariable)) {\n      throw new Error('Metric variable not found');\n    }\n\n    if (!variable.getValue()) {\n      variable.changeValueTo('rate');\n    }\n\n    return variable;\n  }\n\n  public onChangePrimarySignal = (signal: string) => {\n    if (!signal || this.state.primarySignal === signal) {\n      return;\n    }\n\n    this._urlSync.performBrowserHistoryAction(() => {\n      this.setState({ primarySignal: signal });\n    });\n  };\n\n  public onChangeMetricFunction = (metric: string) => {\n    const variable = this.getMetricVariable();\n    if (!metric || variable.getValue() === metric) {\n      return;\n    }\n\n    variable.changeValueTo(metric, undefined, true);\n  };\n\n  public getMetricFunction() {\n    return this.getMetricVariable().getValue() as MetricFunction;\n  }\n\n  public closeDrawer() {\n    this.setState({ traceId: undefined, spanId: undefined });\n  }\n\n  static Component = ({ model }: SceneComponentProps<TraceExploration>) => {\n    const { body } = model.useState();\n    const styles = useStyles2(getStyles);\n\n    return <div className={styles.bodyContainer}> {body && <body.Component model={body} />} </div>;\n  };\n}\n\nexport class TraceExplorationScene extends SceneObjectBase {\n  static Component = ({ model }: SceneComponentProps<TraceExplorationScene>) => {\n    const traceExploration = getTraceExplorationScene(model);\n    const { controls, topScene, drawerScene, traceId } = traceExploration.useState();\n    const styles = useStyles2(getStyles);\n    const [menuVisible, setMenuVisible] = React.useState(false);\n\n    const dsVariable = sceneGraph.lookupVariable(VAR_DATASOURCE, traceExploration);\n    const filtersVariable = getFiltersVariable(traceExploration);\n\n    const menu = (\n      <Menu>\n        <div className={styles.menu}>\n          <Menu.Item\n            label=\"Give feedback\"\n            ariaLabel=\"Give feedback\"\n            icon={'comment-alt-message'}\n            url=\"https://grafana.qualtrics.com/jfe/form/SV_9LUZ21zl3x4vUcS\"\n            target=\"_blank\"\n            onClick={() =>\n              reportAppInteraction(USER_EVENTS_PAGES.common, USER_EVENTS_ACTIONS.common.global_docs_link_clicked)\n            }\n          />\n          <Menu.Item\n            label=\"Documentation\"\n            ariaLabel=\"Documentation\"\n            icon={'external-link-alt'}\n            url=\"https://grafana.com/docs/grafana/next/explore/simplified-exploration/traces/\"\n            target=\"_blank\"\n            onClick={() =>\n              reportAppInteraction(USER_EVENTS_PAGES.common, USER_EVENTS_ACTIONS.common.feedback_link_clicked)\n            }\n          />\n        </div>\n      </Menu>\n    );\n\n    return (\n      <>\n        <div className={styles.container}>\n          <div className={styles.headerContainer}>\n            <Stack gap={2} justifyContent={'space-between'} wrap={'wrap'}>\n              {dsVariable && (\n                <Stack gap={1} alignItems={'center'}>\n                  <div className={styles.datasourceLabel}>Data source</div>\n                  <dsVariable.Component model={dsVariable} />\n                </Stack>\n              )}\n              <div className={styles.controls}>\n                <Tooltip content={<PreviewTooltip text={compositeVersion} />} interactive>\n                  <span className={styles.preview}>\n                    <Badge text=\"&nbsp;Preview\" color=\"blue\" icon=\"rocket\" />\n                  </span>\n                </Tooltip>\n\n                <Dropdown overlay={menu} onVisibleChange={() => setMenuVisible(!menuVisible)}>\n                  <Button variant=\"secondary\" icon=\"info-circle\">\n                    Need help\n                    <Icon className={styles.helpIcon} name={menuVisible ? 'angle-up' : 'angle-down'} size=\"lg\" />\n                  </Button>\n                </Dropdown>\n                {controls.map((control) => (\n                  <control.Component key={control.state.key} model={control} />\n                ))}\n              </div>\n            </Stack>\n            <div className={styles.filters}>\n              {filtersVariable && <filtersVariable.Component model={filtersVariable} />}\n            </div>\n          </div>\n          <div className={styles.body}>{topScene && <topScene.Component model={topScene} />}</div>\n        </div>\n        {drawerScene && traceId && (\n          <Drawer title={`View trace ${traceId}`} size={'lg'} onClose={() => traceExploration.closeDrawer()}>\n            <drawerScene.Component model={drawerScene} />\n          </Drawer>\n        )}\n      </>\n    );\n  };\n}\n\nconst PreviewTooltip = ({ text }: { text: string }) => {\n  const styles = useStyles2(getStyles);\n\n  return (\n    <Stack direction={'column'} gap={2}>\n      <div className={styles.tooltip}>{text}</div>\n    </Stack>\n  );\n};\n\nfunction getTopScene() {\n  return new TracesByServiceScene({});\n}\n\nfunction getVariableSet(initialDS?: string, initialFilters?: AdHocVariableFilter[]) {\n  return new SceneVariableSet({\n    variables: [\n      new DataSourceVariable({\n        name: VAR_DATASOURCE,\n        label: 'Data source',\n        value: initialDS,\n        pluginId: 'tempo',\n      }),\n      new FilterByVariable({\n        initialFilters,\n      }),\n      new CustomVariable({\n        name: VAR_METRIC,\n        hide: VariableHide.hideVariable,\n      }),\n      new CustomVariable({\n        name: VAR_GROUPBY,\n        defaultToAll: false,\n      }),\n      new CustomVariable({\n        name: VAR_SPAN_LIST_COLUMNS,\n        defaultToAll: false,\n      }),\n      new CustomVariable({\n        name: VAR_LATENCY_THRESHOLD,\n        defaultToAll: false,\n        hide: VariableHide.hideVariable,\n      }),\n      new CustomVariable({\n        name: VAR_LATENCY_PARTIAL_THRESHOLD,\n        defaultToAll: false,\n        hide: VariableHide.hideVariable,\n      }),\n    ],\n  });\n}\n\nfunction getStyles(theme: GrafanaTheme2) {\n  return {\n    bodyContainer: css({\n      label: 'bodyContainer',\n      flexGrow: 1,\n      display: 'flex',\n      minHeight: '100%',\n      flexDirection: 'column',\n    }),\n    container: css({\n      label: 'container',\n      flexGrow: 1,\n      display: 'flex',\n      gap: theme.spacing(2),\n      minHeight: '100%',\n      flexDirection: 'column',\n      padding: `0 ${theme.spacing(2)} ${theme.spacing(2)} ${theme.spacing(2)}`,\n      overflow: 'auto' /* Needed for sticky positioning */,\n      height: '1px' /* Needed for sticky positioning */,\n    }),\n    body: css({\n      label: 'body',\n      flexGrow: 1,\n      display: 'flex',\n      flexDirection: 'column',\n      gap: theme.spacing(1),\n    }),\n    headerContainer: css({\n      label: 'headerContainer',\n      backgroundColor: theme.colors.background.canvas,\n      display: 'flex',\n      flexDirection: 'column',\n      position: 'sticky',\n      top: 0,\n      zIndex: 3,\n      padding: `${theme.spacing(1.5)} 0`,\n    }),\n    datasourceLabel: css({\n      label: 'datasourceLabel',\n      fontSize: '12px',\n    }),\n    controls: css({\n      label: 'controls',\n      display: 'flex',\n      gap: theme.spacing(1),\n      zIndex: 3,\n      flexWrap: 'wrap',\n    }),\n    menu: css({\n      label: 'menu',\n      'svg, span': {\n        color: theme.colors.text.link,\n      },\n    }),\n    preview: css({\n      label: 'preview',\n      cursor: 'help',\n\n      '> div:first-child': {\n        padding: '5.5px',\n      },\n    }),\n    tooltip: css({\n      label: 'tooltip',\n      fontSize: '14px',\n      lineHeight: '22px',\n      width: '180px',\n      textAlign: 'center',\n    }),\n    helpIcon: css({\n      label: 'helpIcon',\n      marginLeft: theme.spacing(1),\n    }),\n    filters: css({\n      label: 'filters',\n      backgroundColor: theme.colors.background.primary,\n      marginTop: theme.spacing(1),\n    }),\n  };\n}\n","import { css } from '@emotion/css';\nimport { GrafanaTheme2 } from '@grafana/data';\nimport { locationService } from '@grafana/runtime';\nimport { Icon, useStyles2 } from '@grafana/ui';\nimport React from 'react';\nimport { reportAppInteraction, USER_EVENTS_ACTIONS, USER_EVENTS_PAGES } from 'utils/analytics';\nimport { HomepagePanelType } from './AttributePanel';\n\ntype Props = {\n  index: number;\n  type: HomepagePanelType;\n  label: string;\n  labelTitle: string;\n  value: string;\n  valueTitle: string;\n  url: string;\n};\n\nexport const AttributePanelRow = (props: Props) => {\n  const { index, type, label, labelTitle, value, valueTitle, url } = props;\n  const styles = useStyles2(getStyles);\n\n  return (\n    <div key={index}>\n      {index === 0 && (\n        <div className={styles.rowHeader}>\n          <span>{labelTitle}</span>\n          <span className={styles.valueTitle}>{valueTitle}</span>\n        </div>\n      )}\n\n      <div\n        className={styles.row}\n        key={index}\n        onClick={() => {\n          reportAppInteraction(USER_EVENTS_PAGES.home, USER_EVENTS_ACTIONS.home.panel_row_clicked, {\n            type,\n            index,\n            value,\n          });\n          locationService.push(url);\n        }}\n      >\n        <div className={'rowLabel'}>{label}</div>\n\n        <div className={styles.action}>\n          <span className={styles.actionText}>{value}</span>\n          <Icon className={styles.actionIcon} name=\"arrow-right\" size=\"xl\" />\n        </div>\n      </div>\n    </div>\n  );\n};\n\nfunction getStyles(theme: GrafanaTheme2) {\n  return {\n    rowHeader: css({\n      color: theme.colors.text.secondary,\n      display: 'flex',\n      justifyContent: 'space-between',\n      alignItems: 'center',\n      padding: `0 ${theme.spacing(2)} ${theme.spacing(1)} ${theme.spacing(2)}`,\n    }),\n    valueTitle: css({\n      margin: '0 45px 0 0',\n    }),\n    row: css({\n      display: 'flex',\n      justifyContent: 'space-between',\n      alignItems: 'center',\n      gap: theme.spacing(2),\n      padding: `${theme.spacing(0.75)} ${theme.spacing(2)}`,\n\n      '&:hover': {\n        backgroundColor: theme.isDark ? theme.colors.background.secondary : theme.colors.background.primary,\n        cursor: 'pointer',\n        '.rowLabel': {\n          textDecoration: 'underline',\n        },\n      },\n    }),\n    action: css({\n      display: 'flex',\n      alignItems: 'center',\n    }),\n    actionText: css({\n      color: '#d5983c',\n      padding: `0 ${theme.spacing(1)}`,\n      width: 'max-content',\n    }),\n    actionIcon: css({\n      cursor: 'pointer',\n      margin: `0 ${theme.spacing(0.5)} 0 ${theme.spacing(1)}`,\n    }),\n  };\n}\n","import { css } from '@emotion/css';\nimport { DataFrame, GrafanaTheme2, urlUtil } from '@grafana/data';\nimport { useStyles2 } from '@grafana/ui';\nimport React from 'react';\nimport { EXPLORATIONS_ROUTE } from 'utils/shared';\nimport { AttributePanelRow } from './AttributePanelRow';\nimport { HomepagePanelType } from './AttributePanel';\n\ntype Props = {\n  series: DataFrame[];\n  type: HomepagePanelType;\n};\n\nexport const ErroredServicesRows = (props: Props) => {\n  const { series, type } = props;\n  const styles = useStyles2(getStyles);\n\n  const getLabel = (df: DataFrame) => {\n    const valuesField = df.fields.find((f) => f.name !== 'time');\n    return valuesField?.labels?.['resource.service.name'].replace(/\"/g, '') ?? 'Service name not found';\n  };\n\n  const getUrl = (df: DataFrame) => {\n    const serviceName = getLabel(df);\n    const params = {\n      'var-filters': `resource.service.name|=|${serviceName}`,\n      'var-metric': 'errors',\n    };\n    const url = urlUtil.renderUrl(EXPLORATIONS_ROUTE, params);\n    return `${url}&var-filters=nestedSetParent|<|0`;\n  };\n\n  const getTotalErrs = (df: DataFrame) => {\n    const valuesField = df.fields.find((f) => f.name !== 'time');\n    return (\n      valuesField?.values?.reduce((x, acc) => {\n        if (typeof x === 'number' && !isNaN(x)) {\n          return x + acc;\n        }\n        return acc;\n      }, 0) ?? 1\n    );\n  };\n\n  return (\n    <div className={styles.container}>\n      {series\n        .sort((a, b) => getTotalErrs(b) - getTotalErrs(a))\n        .slice(0, 10)\n        ?.map((df, index) => (\n          <span key={index}>\n            <AttributePanelRow\n              type={type}\n              index={index}\n              label={getLabel(df)}\n              labelTitle=\"Service\"\n              value={getTotalErrs(df)}\n              valueTitle=\"Total errors\"\n              url={getUrl(df)}\n            />\n          </span>\n        ))}\n    </div>\n  );\n};\n\nfunction getStyles(theme: GrafanaTheme2) {\n  return {\n    container: css({\n      padding: `${theme.spacing(2)} 0`,\n    }),\n  };\n}\n","import { css } from '@emotion/css';\nimport { DataFrame, Field, GrafanaTheme2, urlUtil } from '@grafana/data';\nimport { useStyles2 } from '@grafana/ui';\nimport React from 'react';\nimport { EXPLORATIONS_ROUTE, ROUTES } from 'utils/shared';\nimport { AttributePanelRow } from './AttributePanelRow';\nimport { HomepagePanelType } from './AttributePanel';\nimport { formatDuration } from '../../utils/dates';\n\ntype Props = {\n  series: DataFrame[];\n  type: HomepagePanelType;\n};\n\nexport const SlowestTracesRows = (props: Props) => {\n  const { series, type } = props;\n  const styles = useStyles2(getStyles);\n\n  const durField = series[0].fields.find((f) => f.name === 'duration');\n  if (durField && durField.values) {\n    const sortedByDuration = durField?.values\n      .map((_, i) => i)\n      ?.sort((a, b) => durField?.values[b] - durField?.values[a]);\n    const sortedFields = series[0].fields.map((f) => {\n      return {\n        ...f,\n        values: sortedByDuration?.map((i) => f.values[i]),\n      };\n    });\n\n    const getLabel = (traceServiceField: Field | undefined, traceNameField: Field | undefined, index: number) => {\n      let label = '';\n      if (traceServiceField?.values[index]) {\n        label = traceServiceField.values[index];\n      }\n      if (traceNameField?.values[index]) {\n        label = label.length === 0 ? traceNameField.values[index] : `${label}: ${traceNameField.values[index]}`;\n      }\n      return label.length === 0 ? 'Trace service & name not found' : label;\n    };\n\n    const getUrl = (\n      traceId: string,\n      spanIdField: Field | undefined,\n      traceServiceField: Field | undefined,\n      index: number\n    ) => {\n      if (!spanIdField || !spanIdField.values[index] || !traceServiceField || !traceServiceField.values[index]) {\n        console.error('SpanId or traceService not found');\n        return ROUTES.Explore;\n      }\n\n      const params = {\n        traceId,\n        spanId: spanIdField.values[index],\n        'var-filters': `resource.service.name|=|${traceServiceField.values[index]}`,\n        'var-metric': 'duration',\n      };\n      const url = urlUtil.renderUrl(EXPLORATIONS_ROUTE, params);\n\n      return `${url}&var-filters=nestedSetParent|<|0`;\n    };\n\n    const getDuration = (durationField: Field | undefined, index: number) => {\n      if (!durationField || !durationField.values) {\n        return 'Duration not found';\n      }\n\n      return formatDuration(durationField.values[index] / 1000);\n    };\n\n    const traceIdField = sortedFields.find((f) => f.name === 'traceIdHidden');\n    const spanIdField = sortedFields.find((f) => f.name === 'spanID');\n    const traceNameField = sortedFields.find((f) => f.name === 'traceName');\n    const traceServiceField = sortedFields.find((f) => f.name === 'traceService');\n    const durationField = sortedFields.find((f) => f.name === 'duration');\n\n    return (\n      <div className={styles.container}>\n        {traceIdField?.values?.map((traceId, index) => (\n          <span key={index}>\n            <AttributePanelRow\n              type={type}\n              index={index}\n              label={getLabel(traceServiceField, traceNameField, index)}\n              labelTitle=\"Trace\"\n              value={getDuration(durationField, index)}\n              valueTitle=\"Duration\"\n              url={getUrl(traceId, spanIdField, traceServiceField, index)}\n            />\n          </span>\n        ))}\n      </div>\n    );\n  }\n  return null;\n};\n\nfunction getStyles(theme: GrafanaTheme2) {\n  return {\n    container: css({\n      padding: `${theme.spacing(2)} 0`,\n    }),\n  };\n}\n","import { css } from '@emotion/css';\nimport { DataFrame, GrafanaTheme2, urlUtil } from '@grafana/data';\nimport { useStyles2 } from '@grafana/ui';\nimport React from 'react';\nimport { EXPLORATIONS_ROUTE } from 'utils/shared';\nimport { AttributePanelRow } from './AttributePanelRow';\nimport { HomepagePanelType } from './AttributePanel';\nimport { formatDuration } from '../../utils/dates';\n\ntype Props = {\n  series: DataFrame[];\n  type: HomepagePanelType;\n};\n\nexport const SlowestServicesRows = (props: Props) => {\n  const { series, type } = props;\n  const styles = useStyles2(getStyles);\n\n  const getLabel = (df: DataFrame) => {\n    const valuesField = df.fields.find((f) => f.name !== 'time');\n    return valuesField?.labels?.['resource.service.name'].replace(/\"/g, '') ?? 'Service name not found';\n  };\n\n  const getUrl = (df: DataFrame) => {\n    const serviceName = getLabel(df);\n    const params = {\n      'var-filters': `resource.service.name|=|${serviceName}`,\n      'var-metric': 'duration',\n    };\n    const url = urlUtil.renderUrl(EXPLORATIONS_ROUTE, params);\n    return `${url}&var-filters=nestedSetParent|<|0`;\n  };\n\n  const getDuration = (df: DataFrame) => {\n    const valuesField = df.fields.find((f) => f.name !== 'time');\n    return (\n      valuesField?.values?.reduce((x, acc) => {\n        if (typeof x === 'number' && !isNaN(x)) {\n          return x + acc;\n        }\n        return acc;\n      }, 0) ?? 1\n    );\n  };\n\n  return (\n    <div className={styles.container}>\n      {series\n        .sort((a, b) => getDuration(b) - getDuration(a))\n        .slice(0, 10)\n        ?.map((df, index) => (\n          <span key={index}>\n            <AttributePanelRow\n              type={type}\n              index={index}\n              label={getLabel(df)}\n              labelTitle=\"Service\"\n              value={formatDuration(getDuration(df) * 1000000 /*s to μs*/)}\n              valueTitle=\"p90\"\n              url={getUrl(df)}\n            />\n          </span>\n        ))}\n    </div>\n  );\n};\n\nfunction getStyles(theme: GrafanaTheme2) {\n  return {\n    container: css({\n      padding: `${theme.spacing(2)} 0`,\n    }),\n  };\n}\n","import { css } from '@emotion/css';\nimport { DataFrame, GrafanaTheme2 } from '@grafana/data';\nimport { Icon, useStyles2 } from '@grafana/ui';\nimport React from 'react';\nimport { HomepagePanelType } from './AttributePanel';\nimport { ErroredServicesRows } from './ErroredServicesRows';\nimport { SlowestTracesRows } from './SlowestTracesRows';\nimport { SlowestServicesRows } from './SlowestServicesRows';\n\ntype Props = {\n  series?: DataFrame[];\n  type: HomepagePanelType;\n  message?: string;\n};\n\nexport const AttributePanelRows = (props: Props) => {\n  const { series, type, message } = props;\n  const styles = useStyles2(getStyles);\n\n  if (message) {\n    return (\n      <div className={styles.container}>\n        <div className={styles.message}>\n          <Icon className={styles.icon} name=\"exclamation-circle\" size=\"xl\" />\n          {message}\n        </div>\n      </div>\n    );\n  }\n\n  if (series && series.length > 0) {\n    switch (type) {\n      case 'slowest-traces':\n        return <SlowestTracesRows series={series} type={type} />;\n      case 'errored-services':\n        return <ErroredServicesRows series={series} type={type} />;\n      case 'slowest-services':\n        return <SlowestServicesRows series={series} type={type} />;\n    }\n  }\n  return <div className={styles.container}>No series data</div>;\n};\n\nfunction getStyles(theme: GrafanaTheme2) {\n  return {\n    container: css({\n      padding: `${theme.spacing(2)} 0`,\n    }),\n    icon: css({\n      margin: `0 ${theme.spacing(0.5)} 0 ${theme.spacing(1)}`,\n    }),\n    message: css({\n      display: 'flex',\n      gap: theme.spacing(1.5),\n      margin: `${theme.spacing(2)} auto`,\n      width: '60%',\n    }),\n  };\n}\n","import { css } from '@emotion/css';\nimport { DataFrame, GrafanaTheme2 } from '@grafana/data';\nimport { SceneObjectState, SceneObjectBase, SceneComponentProps } from '@grafana/scenes';\nimport { Icon, useStyles2 } from '@grafana/ui';\nimport React from 'react';\nimport { AttributePanelRows } from './AttributePanelRows';\nimport { HomepagePanelType } from './AttributePanel';\n\ninterface AttributePanelSceneState extends SceneObjectState {\n  series?: DataFrame[];\n  title: string;\n  type: HomepagePanelType;\n  message?: string;\n}\n\nexport class AttributePanelScene extends SceneObjectBase<AttributePanelSceneState> {\n  public static Component = ({ model }: SceneComponentProps<AttributePanelScene>) => {\n    const { series, title, type, message } = model.useState();\n    const styles = useStyles2(getStyles);\n\n    return (\n      <div className={styles.container}>\n        <div className={styles.title}>\n          <Icon name={getIcon(type)} size=\"lg\" />\n          <span className={styles.titleText}>{title}</span>\n        </div>\n        <AttributePanelRows series={series} type={type} message={message} />\n      </div>\n    );\n  };\n}\n\nfunction getIcon(type: HomepagePanelType) {\n  switch (type) {\n    case 'slowest-services':\n      return 'clock-nine';\n    case 'slowest-traces':\n      return 'crosshair';\n    case 'errored-services':\n      return 'exclamation-triangle';\n    default:\n      return 'exclamation-triangle';\n  }\n}\n\nfunction getStyles(theme: GrafanaTheme2) {\n  return {\n    container: css({\n      border: `1px solid ${theme.isDark ? theme.colors.border.medium : theme.colors.border.weak}`,\n      borderRadius: theme.spacing(0.5),\n      marginBottom: theme.spacing(4),\n      width: '100%',\n    }),\n    title: css({\n      color: theme.isDark ? theme.colors.text.secondary : theme.colors.text.primary,\n      backgroundColor: theme.isDark ? theme.colors.background.secondary : theme.colors.background.primary,\n      borderTopLeftRadius: theme.spacing(0.5),\n      borderTopRightRadius: theme.spacing(0.5),\n      display: 'flex',\n      justifyContent: 'center',\n      alignItems: 'center',\n      fontSize: '1.3rem',\n      padding: `${theme.spacing(1.5)} ${theme.spacing(2)}`,\n    }),\n    titleText: css({\n      marginLeft: theme.spacing(1),\n    }),\n  };\n}\n","import React from 'react';\n\nimport {\n  SceneComponentProps,\n  SceneFlexLayout,\n  sceneGraph,\n  SceneObjectBase,\n  SceneObjectState,\n  SceneQueryRunner,\n} from '@grafana/scenes';\nimport { GrafanaTheme2, LoadingState } from '@grafana/data';\nimport { explorationDS } from 'utils/shared';\nimport { LoadingStateScene } from 'components/states/LoadingState/LoadingStateScene';\nimport { useStyles2 } from '@grafana/ui';\nimport { css } from '@emotion/css';\nimport { MINI_PANEL_HEIGHT } from 'components/Explore/TracesByService/TracesByServiceScene';\nimport { AttributePanelScene } from './AttributePanelScene';\nimport Skeleton from 'react-loading-skeleton';\nimport { getErrorMessage, getNoDataMessage } from 'utils/utils';\nimport { getMinimumsForDuration, getYBuckets } from 'components/Explore/TracesByService/REDPanel';\n\nexport type HomepagePanelType = 'errored-services' | 'slowest-services' | 'slowest-traces';\n\nexport interface AttributePanelState extends SceneObjectState {\n  panel?: SceneFlexLayout;\n  query: {\n    query: string;\n    step?: string;\n  };\n  title: string;\n  type: HomepagePanelType;\n  renderDurationPanel?: boolean;\n  filter?: string;\n}\n\nexport class AttributePanel extends SceneObjectBase<AttributePanelState> {\n  constructor(state: AttributePanelState) {\n    super({\n      $data: new SceneQueryRunner({\n        datasource: explorationDS,\n        queries: [{ refId: 'A', queryType: 'traceql', tableType: 'spans', limit: 10, ...state.query, exemplars: 0 }],\n      }),\n      ...state,\n    });\n\n    this.addActivationHandler(() => {\n      const data = sceneGraph.getData(this);\n\n      this._subs.add(\n        data.subscribeToState((data) => {\n          if (data.data?.state === LoadingState.Done || data.data?.state === LoadingState.Streaming) {\n            if (\n              data.data?.state === LoadingState.Done &&\n              (data.data.series.length === 0 || data.data.series[0].length === 0)\n            ) {\n              this.setState({\n                panel: new SceneFlexLayout({\n                  children: [\n                    new AttributePanelScene({\n                      message: getNoDataMessage(state.title.toLowerCase()),\n                      title: state.title,\n                      type: state.type,\n                    }),\n                  ],\n                }),\n              });\n            } else if (data.data.series.length > 0) {\n              if (state.type !== 'slowest-traces' || state.renderDurationPanel) {\n                this.setState({\n                  panel: new SceneFlexLayout({\n                    children: [\n                      new AttributePanelScene({\n                        series: data.data.series,\n                        title: state.title,\n                        type: state.type,\n                      }),\n                    ],\n                  }),\n                });\n              } else if (data.data?.state === LoadingState.Done) {\n                let yBuckets = getYBuckets(data.data?.series ?? []);\n                if (yBuckets?.length) {\n                  const { minDuration } = getMinimumsForDuration(yBuckets);\n\n                  this.setState({\n                    panel: new SceneFlexLayout({\n                      children: [\n                        new AttributePanel({\n                          query: {\n                            query: `{nestedSetParent<0 && duration > ${minDuration} ${state.filter ?? ''}}`,\n                          },\n                          title: state.title,\n                          type: state.type,\n                          renderDurationPanel: true,\n                        }),\n                      ],\n                    }),\n                  });\n                }\n              }\n            }\n          } else if (data.data?.state === LoadingState.Error) {\n            this.setState({\n              panel: new SceneFlexLayout({\n                children: [\n                  new AttributePanelScene({\n                    message: getErrorMessage(data),\n                    title: state.title,\n                    type: state.type,\n                  }),\n                ],\n              }),\n            });\n          } else {\n            this.setState({\n              panel: new SceneFlexLayout({\n                direction: 'column',\n                maxHeight: MINI_PANEL_HEIGHT,\n                height: MINI_PANEL_HEIGHT,\n                children: [\n                  new LoadingStateScene({\n                    component: () => SkeletonComponent(),\n                  }),\n                ],\n              }),\n            });\n          }\n        })\n      );\n    });\n  }\n\n  public static Component = ({ model }: SceneComponentProps<AttributePanel>) => {\n    const { panel } = model.useState();\n    const styles = useStyles2(getStyles);\n\n    if (!panel) {\n      return;\n    }\n\n    return (\n      <div className={styles.container}>\n        <panel.Component model={panel} />\n      </div>\n    );\n  };\n}\n\nfunction getStyles() {\n  return {\n    container: css({\n      minWidth: '350px',\n      width: '-webkit-fill-available',\n    }),\n  };\n}\n\nexport const SkeletonComponent = () => {\n  const styles = useStyles2(getSkeletonStyles);\n\n  return (\n    <div className={styles.container}>\n      <div className={styles.title}>\n        <Skeleton count={1} width={200} />\n      </div>\n      <div className={styles.tracesContainer}>\n        {[...Array(11)].map((_, i) => (\n          <div className={styles.row} key={i}>\n            <div className={styles.rowLeft}>\n              <Skeleton count={1} />\n            </div>\n            <div className={styles.rowRight}>\n              <Skeleton count={1} />\n            </div>\n          </div>\n        ))}\n      </div>\n    </div>\n  );\n};\n\nfunction getSkeletonStyles(theme: GrafanaTheme2) {\n  return {\n    container: css({\n      border: `1px solid ${theme.isDark ? theme.colors.border.medium : theme.colors.border.weak}`,\n      borderRadius: theme.spacing(0.5),\n      marginBottom: theme.spacing(4),\n      width: '100%',\n    }),\n    title: css({\n      color: theme.colors.text.secondary,\n      backgroundColor: theme.colors.background.secondary,\n      fontSize: '1.3rem',\n      padding: `${theme.spacing(1.5)} ${theme.spacing(2)}`,\n      textAlign: 'center',\n    }),\n    tracesContainer: css({\n      padding: `13px ${theme.spacing(2)}`,\n    }),\n    row: css({\n      display: 'flex',\n      justifyContent: 'space-between',\n    }),\n    rowLeft: css({\n      margin: '7px 0',\n      width: '150px',\n    }),\n    rowRight: css({\n      width: '50px',\n    }),\n  };\n}\n","import React from \"react\";\n\nexport const LightModeRocket = () => (\n  <svg xmlns=\"http://www.w3.org/2000/svg\" width=\"73\" height=\"72\" viewBox=\"0 0 73 72\" fill=\"none\">\n    <path\n      d=\"M65.3 8.09993C65.3 7.49993 64.7 7.19993 64.1 6.89993C52.7 3.89993 40.4 7.79993 32.9 16.7999L29 21.2999L20.9 19.1999C17.6 17.9999 14.3 19.4999 12.8 22.4999L6.49999 33.5999C6.49999 33.5999 6.49999 33.8999 6.19999 33.8999C5.89999 34.7999 6.49999 35.3999 7.39999 35.6999L17.6 37.7999C16.7 40.4999 15.8 43.1999 15.5 45.8999C15.5 46.4999 15.5 46.7999 15.8 47.0999L24.8 55.7999C25.1 56.0999 25.4 56.0999 26 56.0999C28.7 55.7999 31.7 55.1999 34.4 54.2999L36.5 64.1999C36.5 64.7999 37.4 65.3999 38 65.3999C38.3 65.3999 38.6 65.3999 38.6 65.0999L49.7 58.7999C52.4 57.2999 53.6 53.9999 53 50.9999L50.9 42.2999L55.1 38.3999C64.4 31.4999 68.3 19.4999 65.3 8.09993ZM10.1 33.2999L15.2 23.9999C16.1 22.1999 17.9 21.5999 19.7 22.1999L26.6 23.9999L23.6 27.5999C21.8 29.9999 20 32.3999 18.8 35.0999L10.1 33.2999ZM48.5 56.9999L39.2 62.3999L37.4 53.6999C40.1 52.4999 42.5 50.6999 44.9 48.8999L48.8 45.2999L50.6 52.1999C50.6 53.9999 50 56.0999 48.5 56.9999ZM53.3 36.8999L42.8 46.4999C38.3 50.3999 32.6 52.7999 26.6 53.3999L18.8 45.5999C19.7 39.5999 22.1 33.8999 26 29.3999L30.8 23.9999L31.1 23.6999L35.3 18.8999C41.9 11.0999 52.7 7.49993 62.6 9.59993C64.7 19.7999 61.4 30.2999 53.3 36.8999ZM49.7 16.7999C46.4 16.7999 44 19.4999 44 22.4999C44 25.4999 46.7 28.1999 49.7 28.1999C53 28.1999 55.4 25.4999 55.4 22.4999C55.4 19.4999 53 16.7999 49.7 16.7999ZM49.7 25.4999C48.2 25.4999 47 24.2999 47 22.7999C47 21.2999 48.2 20.0999 49.7 20.0999C51.2 20.0999 52.4 21.2999 52.4 22.7999C52.4 24.2999 51.2 25.4999 49.7 25.4999Z\"\n      fill=\"#24292E\"\n      fillOpacity=\"0.75\"\n    />\n  </svg>\n);\n\nexport const DarkModeRocket = () => (\n  <svg xmlns=\"http://www.w3.org/2000/svg\" width=\"73\" height=\"72\" viewBox=\"0 0 73 72\" fill=\"none\">\n    <path\n      d=\"M65.3 8.09993C65.3 7.49993 64.7 7.19993 64.1 6.89993C52.7 3.89993 40.4 7.79993 32.9 16.7999L29 21.2999L20.9 19.1999C17.6 17.9999 14.3 19.4999 12.8 22.4999L6.49999 33.5999C6.49999 33.5999 6.49999 33.8999 6.19999 33.8999C5.89999 34.7999 6.49999 35.3999 7.39999 35.6999L17.6 37.7999C16.7 40.4999 15.8 43.1999 15.5 45.8999C15.5 46.4999 15.5 46.7999 15.8 47.0999L24.8 55.7999C25.1 56.0999 25.4 56.0999 26 56.0999C28.7 55.7999 31.7 55.1999 34.4 54.2999L36.5 64.1999C36.5 64.7999 37.4 65.3999 38 65.3999C38.3 65.3999 38.6 65.3999 38.6 65.0999L49.7 58.7999C52.4 57.2999 53.6 53.9999 53 50.9999L50.9 42.2999L55.1 38.3999C64.4 31.4999 68.3 19.4999 65.3 8.09993ZM10.1 33.2999L15.2 23.9999C16.1 22.1999 17.9 21.5999 19.7 22.1999L26.6 23.9999L23.6 27.5999C21.8 29.9999 20 32.3999 18.8 35.0999L10.1 33.2999ZM48.5 56.9999L39.2 62.3999L37.4 53.6999C40.1 52.4999 42.5 50.6999 44.9 48.8999L48.8 45.2999L50.6 52.1999C50.6 53.9999 50 56.0999 48.5 56.9999ZM53.3 36.8999L42.8 46.4999C38.3 50.3999 32.6 52.7999 26.6 53.3999L18.8 45.5999C19.7 39.5999 22.1 33.8999 26 29.3999L30.8 23.9999L31.1 23.6999L35.3 18.8999C41.9 11.0999 52.7 7.49993 62.6 9.59993C64.7 19.7999 61.4 30.2999 53.3 36.8999ZM49.7 16.7999C46.4 16.7999 44 19.4999 44 22.4999C44 25.4999 46.7 28.1999 49.7 28.1999C53 28.1999 55.4 25.4999 55.4 22.4999C55.4 19.4999 53 16.7999 49.7 16.7999ZM49.7 25.4999C48.2 25.4999 47 24.2999 47 22.7999C47 21.2999 48.2 20.0999 49.7 20.0999C51.2 20.0999 52.4 21.2999 52.4 22.7999C52.4 24.2999 51.2 25.4999 49.7 25.4999Z\"\n      fill=\"#CCCCDC\"\n      fillOpacity=\"0.65\"\n    />\n  </svg>\n);\n","import { css } from '@emotion/css';\nimport React from 'react';\n\nimport { GrafanaTheme2 } from '@grafana/data';\nimport {\n  SceneComponentProps,\n  SceneObjectBase,\n} from '@grafana/scenes';\nimport { Button, Icon, LinkButton, Stack, useStyles2, useTheme2 } from '@grafana/ui';\n\nimport {\n  EXPLORATIONS_ROUTE,\n} from '../../utils/shared';\nimport { getDatasourceVariable, getHomeFilterVariable, getHomeScene } from '../../utils/utils';\nimport { DarkModeRocket, LightModeRocket } from '../../utils/rockets';\nimport { reportAppInteraction, USER_EVENTS_ACTIONS, USER_EVENTS_PAGES } from 'utils/analytics';\nimport { Home } from 'pages/Home/Home';\nimport { useNavigate } from 'react-router-dom';\n\nexport class HeaderScene extends SceneObjectBase {\n  public static Component = ({ model }: SceneComponentProps<Home>) => {\n    const home = getHomeScene(model);\n    const navigate = useNavigate();\n    const { controls } = home.useState();\n    const styles = useStyles2(getStyles);\n    const theme = useTheme2();\n\n    const dsVariable = getDatasourceVariable(home);\n    const filterVariable = getHomeFilterVariable(home);\n\n    return (\n      <div className={styles.container}>\n        <div className={styles.header}>\n          <div className={styles.headerTitleContainer}>\n            {theme.isDark ? <DarkModeRocket /> : <LightModeRocket />}\n            <h2 className={styles.title}>Start your traces exploration!</h2>\n          </div>\n          <div>\n            <p>Drilldown and visualize your trace data without writing a query.</p>\n            <div className={styles.headerActions}>\n              <Button variant='primary' onClick={() => {\n                  reportAppInteraction(USER_EVENTS_PAGES.home, USER_EVENTS_ACTIONS.home.explore_traces_clicked);\n                  navigate(EXPLORATIONS_ROUTE);\n                }}>\n                Let’s start\n                <Icon name='arrow-right' size='lg' />\n              </Button>\n              <LinkButton\n                icon=\"external-link-alt\"\n                fill=\"text\"\n                size={'md'}\n                target={'_blank'}\n                href={\n                  'https://grafana.com/docs/grafana-cloud/visualizations/simplified-exploration/traces'\n                }\n                className={styles.documentationLink}\n                onClick={() => reportAppInteraction(USER_EVENTS_PAGES.home, USER_EVENTS_ACTIONS.home.read_documentation_clicked)}\n              >\n                Read documentation\n              </LinkButton>\n            </div>\n          </div>\n        </div>\n\n        <div className={styles.subHeader}>\n          <h4>Or quick-start into your tracing data.</h4>\n        </div>\n\n        <Stack gap={2}>\n          <div className={styles.variablesAndControls}>\n            <div className={styles.variables}>\n              {dsVariable && (\n                <Stack gap={1} alignItems={'center'}>\n                  <div className={styles.label}>Data source</div>\n                  <dsVariable.Component model={dsVariable} />\n                </Stack>\n              )}\n              {filterVariable && (\n                <Stack gap={1} alignItems={'center'}>\n                  <div className={styles.label}>Filter</div>\n                  <filterVariable.Component model={filterVariable} />\n                </Stack>\n              )}\n            </div>\n\n            <div className={styles.controls}>\n              {controls?.map((control) => (\n                <control.Component key={control.state.key} model={control} />\n              ))}\n            </div>\n          </div>\n        </Stack>\n      </div>\n    );\n  };\n}\n\nfunction getStyles(theme: GrafanaTheme2) {\n  return {\n    container: css({\n      display: 'flex',\n      gap: theme.spacing(7),\n      flexDirection: 'column',\n      margin: `0 0 ${theme.spacing(4)} 0`,\n      justifyContent: 'center',\n    }),\n    header: css({\n      display: 'flex',\n      alignItems: 'center',\n      backgroundColor: theme.isDark ? theme.colors.background.secondary : theme.colors.background.primary,\n      borderRadius: theme.spacing(0.5),\n      flexWrap: 'wrap',\n      justifyContent: 'center',\n      padding: theme.spacing(3),\n      gap: theme.spacing(4),\n    }),\n    headerTitleContainer: css({\n      display: 'flex',\n      alignItems: 'center',\n    }),\n    title: css({\n      margin: `0 0 0 ${theme.spacing(2)}`,\n    }),\n\n    headerActions: css({\n      alignItems: 'center',\n      justifyContent: 'flex-start',\n      display: 'flex',\n      gap: theme.spacing(2),\n    }),\n    documentationLink: css({\n      textDecoration: 'underline',\n      '&:hover': {\n        textDecoration: 'underline',\n      },\n    }),\n\n    subHeader: css({\n      textAlign: 'center',\n      'h4': {\n        margin: 0,\n      }\n    }),\n\n    label: css({\n      fontSize: '12px',\n    }),\n    variablesAndControls: css({\n      alignItems: 'center',\n      gap: theme.spacing(2),\n      display: 'flex',\n      justifyContent: 'space-between',\n      width: '100%',\n    }),\n    variables: css({\n      display: 'flex',\n      gap: theme.spacing(2),\n    }),\n    controls: css({\n      display: 'flex',\n      gap: theme.spacing(1),\n    }),\n  };\n}\n","import { AdHocVariableFilter, MetricFindValue } from \"@grafana/data\";\nimport { getDataSourceSrv, DataSourceWithBackend } from \"@grafana/runtime\";\nimport { AdHocFiltersVariable, sceneGraph } from \"@grafana/scenes\";\nimport { EVENT_ATTR, EVENT_INTRINSIC, ignoredAttributes, ignoredAttributesHomeFilter, RESOURCE_ATTR, SPAN_ATTR, VAR_DATASOURCE_EXPR } from \"utils/shared\";\nimport { isNumber } from \"utils/utils\";\n\nexport async function getTagKeysProvider(variable: AdHocFiltersVariable): Promise<{replace?: boolean, values: MetricFindValue[]}> {\n  const dsVar = sceneGraph.interpolate(variable, VAR_DATASOURCE_EXPR);\n  const datasource_ = await getDataSourceSrv().get(dsVar);\n  if (!(datasource_ instanceof DataSourceWithBackend)) {\n    console.error(new Error('getTagKeysProvider: invalid datasource!'));\n    throw new Error('getTagKeysProvider: invalid datasource!');\n  }\n  \n  const datasource = datasource_ as DataSourceWithBackend;\n  if (datasource && datasource.getTagKeys) {\n    const tagKeys = await datasource.getTagKeys();\n\n    if (Array.isArray(tagKeys)) {\n      const filteredKeys = filterKeys(tagKeys);\n      return { replace: true, values: filteredKeys };\n    } else {\n      console.error(new Error('getTagKeysProvider: invalid tagKeys!'));\n      return { values: [] };\n    }\n  } else {\n    console.error(new Error('getTagKeysProvider: missing or invalid datasource!'));\n    return { values: [] };\n  }\n}\n\nexport function filterKeys(keys: MetricFindValue[]): MetricFindValue[] {\n  const resourceAttributes = keys.filter((k) => k.text?.includes(RESOURCE_ATTR));\n  const spanAttributes = keys.filter((k) => k.text?.includes(SPAN_ATTR));\n  const otherAttributes = keys.filter((k) => {\n    return !k.text?.includes(RESOURCE_ATTR) && !k.text?.includes(SPAN_ATTR)\n      && !k.text?.includes(EVENT_ATTR) && !k.text?.includes(EVENT_INTRINSIC)\n      && ignoredAttributes.concat(ignoredAttributesHomeFilter).indexOf(k.text!) === -1;\n  })\n  return [...resourceAttributes, ...spanAttributes, ...otherAttributes];\n}\n\nexport function renderTraceQLLabelFilters(filters: AdHocVariableFilter[]) {\n  const expr = filters\n    .filter((f) => f.key && f.operator && f.value)\n    .map((filter) => renderFilter(filter))\n    .join(' && ');\n  return expr.length ? `&& ${expr}` : '';\n}\n\nconst renderFilter = (filter: AdHocVariableFilter) => {\n  if (!filter) {\n    return '';\n  } \n  \n  let val = filter.value;\n  if (val === undefined || val === null || val === '') {\n    return '';\n  }\n\n  if (!isNumber.test(val) && !['kind'].includes(filter.key)) {\n    if (typeof val === 'string' && !val.startsWith('\"') && !val.endsWith('\"')) {\n      val = `\"${val}\"`;\n    }\n  }\n\n  return `${filter.key}${filter.operator}${val}`;\n}\n","import { css } from '@emotion/css';\nimport React from 'react';\n// eslint-disable-next-line no-restricted-imports\nimport { duration } from 'moment';\n\nimport { AdHocVariableFilter, GrafanaTheme2 } from '@grafana/data';\nimport {\n  AdHocFiltersVariable,\n  DataSourceVariable,\n  SceneComponentProps,\n  SceneCSSGridItem,\n  SceneCSSGridLayout,\n  sceneGraph,\n  SceneObject,\n  SceneObjectBase,\n  SceneObjectState,\n  SceneRefreshPicker,\n  SceneTimePicker,\n  SceneTimeRange,\n  SceneTimeRangeLike,\n  SceneVariableSet,\n} from '@grafana/scenes';\nimport { useStyles2 } from '@grafana/ui';\n\nimport {\n  DATASOURCE_LS_KEY,\n  explorationDS,\n  HOMEPAGE_FILTERS_LS_KEY,\n  VAR_DATASOURCE,\n  VAR_HOME_FILTER,\n} from '../../utils/shared';\nimport { AttributePanel } from 'components/Home/AttributePanel';\nimport { HeaderScene } from 'components/Home/HeaderScene';\nimport { getDatasourceVariable, getHomeFilterVariable } from 'utils/utils';\nimport { reportAppInteraction, USER_EVENTS_PAGES, USER_EVENTS_ACTIONS } from 'utils/analytics';\nimport { getTagKeysProvider, renderTraceQLLabelFilters } from './utils';\n\nexport interface HomeState extends SceneObjectState {\n  controls?: SceneObject[];\n  initialDS?: string;\n  initialFilters: AdHocVariableFilter[];\n  body?: SceneCSSGridLayout;\n}\n\nexport class Home extends SceneObjectBase<HomeState> {\n  public constructor(state: HomeState) {\n    super({\n      $timeRange: state.$timeRange ?? new SceneTimeRange({}),\n      $variables: state.$variables ?? getVariableSet(state.initialFilters, state.initialDS),\n      controls: state.controls ?? [new SceneTimePicker({}), new SceneRefreshPicker({})],\n      ...state,\n    });\n\n    this.addActivationHandler(this._onActivate.bind(this));\n  }\n\n  private _onActivate() {\n    const sceneTimeRange = sceneGraph.getTimeRange(this);\n    const filterVariable = getHomeFilterVariable(this);\n    filterVariable.setState({\n      getTagKeysProvider: getTagKeysProvider,\n    });\n\n    getDatasourceVariable(this).subscribeToState((newState) => {\n      if (newState.value) {\n        localStorage.setItem(DATASOURCE_LS_KEY, newState.value.toString());\n      }\n    });\n\n    getHomeFilterVariable(this).subscribeToState((newState, prevState) => {\n      if (newState.filters !== prevState.filters) {\n        this.buildPanels(sceneTimeRange, newState.filters);\n\n        // save the filters to local storage\n        localStorage.setItem(HOMEPAGE_FILTERS_LS_KEY, JSON.stringify(newState.filters));\n\n        const newFilters = newState.filters.filter((f) => !prevState.filters.find((pf) => pf.key === f.key));\n        if (newFilters.length > 0) {\n          reportAppInteraction(USER_EVENTS_PAGES.home, USER_EVENTS_ACTIONS.home.filter_changed, {\n            key: newFilters[0].key,\n          });\n        }\n      }\n    });\n\n    sceneTimeRange.subscribeToState((newState, prevState) => {\n      if (newState.value.from !== prevState.value.from || newState.value.to !== prevState.value.to) {\n        this.buildPanels(sceneTimeRange, filterVariable.state.filters);\n      }\n    });\n    this.buildPanels(sceneTimeRange, filterVariable.state.filters);\n  }\n\n  buildPanels(sceneTimeRange: SceneTimeRangeLike, filters: AdHocVariableFilter[]) {\n    const from = sceneTimeRange.state.value.from.unix();\n    const to = sceneTimeRange.state.value.to.unix();\n    const dur = duration(to - from, 's');\n    const durString = `${dur.asSeconds()}s`;\n    const renderedFilters = renderTraceQLLabelFilters(filters);\n\n    this.setState({\n      body: new SceneCSSGridLayout({\n        children: [\n          new SceneCSSGridLayout({\n            autoRows: 'min-content',\n            columnGap: 2,\n            rowGap: 2,\n            children: [\n              new SceneCSSGridItem({\n                body: new AttributePanel({\n                  query: {\n                    query: `{nestedSetParent < 0 && status = error ${renderedFilters}} | count_over_time() by (resource.service.name)`,\n                    step: durString,\n                  },\n                  title: 'Errored services',\n                  type: 'errored-services',\n                }),\n              }),\n              new SceneCSSGridItem({\n                body: new AttributePanel({\n                  query: {\n                    query: '{nestedSetParent < 0} | quantile_over_time(duration, 0.9) by (resource.service.name)',\n                    step: durString,\n                  },\n                  title: 'Slow services',\n                  type: 'slowest-services',\n                }),\n              }),\n              new SceneCSSGridItem({\n                body: new AttributePanel({\n                  query: {\n                    query: `{nestedSetParent<0 ${renderedFilters}} | histogram_over_time(duration)`,\n                  },\n                  title: 'Slow traces',\n                  type: 'slowest-traces',\n                  filter: renderedFilters,\n                }),\n              }),\n            ],\n          }),\n        ],\n      }),\n    });\n  }\n\n  static Component = ({ model }: SceneComponentProps<Home>) => {\n    const { body } = model.useState();\n    const styles = useStyles2(getStyles);\n\n    return (\n      <div className={styles.container}>\n        <HeaderScene.Component model={model} />\n        {body && <body.Component model={body} />}\n      </div>\n    );\n  };\n}\n\nfunction getVariableSet(initialFilters: AdHocVariableFilter[], initialDS?: string) {\n  return new SceneVariableSet({\n    variables: [\n      new DataSourceVariable({\n        name: VAR_DATASOURCE,\n        label: 'Data source',\n        value: initialDS,\n        pluginId: 'tempo',\n      }),\n      new AdHocFiltersVariable({\n        name: VAR_HOME_FILTER,\n        datasource: explorationDS,\n        layout: 'combobox',\n        filters: initialFilters,\n        allowCustomValue: true,\n      }),\n    ],\n  });\n}\n\nfunction getStyles(theme: GrafanaTheme2) {\n  return {\n    container: css({\n      margin: `${theme.spacing(4)} auto`,\n      width: '75%',\n\n      '@media (max-width: 900px)': {\n        width: '95%',\n      },\n    }),\n  };\n}\n","import { AdHocVariableFilter, DataFrame, urlUtil } from '@grafana/data';\nimport {\n  AdHocFiltersVariable,\n  CustomVariable,\n  DataSourceVariable,\n  SceneDataQuery,\n  SceneDataState,\n  sceneGraph,\n  SceneObject,\n  SceneObjectUrlValues,\n  SceneTimeRange,\n  sceneUtils,\n} from '@grafana/scenes';\n\nimport { TraceExploration } from '../pages/Explore';\nimport {\n  EXPLORATIONS_ROUTE,\n  VAR_DATASOURCE,\n  VAR_DATASOURCE_EXPR,\n  VAR_FILTERS,\n  VAR_GROUPBY,\n  VAR_HOME_FILTER,\n  VAR_LATENCY_PARTIAL_THRESHOLD,\n  VAR_LATENCY_THRESHOLD,\n  VAR_METRIC,\n  VAR_SPAN_LIST_COLUMNS,\n} from './shared';\nimport { primarySignalOptions } from '../pages/Explore/primary-signals';\nimport { TracesByServiceScene } from 'components/Explore/TracesByService/TracesByServiceScene';\nimport { ActionViewType } from '../components/Explore/TracesByService/Tabs/TabsBarScene';\nimport { LocationService } from '@grafana/runtime';\nimport { Home } from 'pages/Home/Home';\n\nexport function getTraceExplorationScene(model: SceneObject): TraceExploration {\n  return sceneGraph.getAncestor(model, TraceExploration);\n}\n\nexport function getHomeScene(model: SceneObject): Home {\n  return sceneGraph.getAncestor(model, Home);\n}\n\nexport function getTraceByServiceScene(model: SceneObject): TracesByServiceScene {\n  return sceneGraph.getAncestor(model, TracesByServiceScene);\n}\n\nexport function newTracesExploration(\n  locationService: LocationService,\n  initialDS?: string,\n  initialFilters?: AdHocVariableFilter[]\n): TraceExploration {\n  return new TraceExploration({\n    initialDS,\n    initialFilters: initialFilters ?? [primarySignalOptions[0].filter],\n    $timeRange: new SceneTimeRange({ from: 'now-30m', to: 'now' }),\n    locationService,\n  });\n}\n\nexport function newHome(initialFilters: AdHocVariableFilter[], initialDS?: string): Home {\n  return new Home({\n    initialDS,\n    initialFilters,\n    $timeRange: new SceneTimeRange({ from: 'now-30m', to: 'now' }),\n  });\n}\n\nexport function getErrorMessage(data: SceneDataState) {\n  return data?.data?.error?.message ?? 'There are no Tempo data sources';\n}\n\nexport function getNoDataMessage(context: string) {\n  return `No data for selected data source and filter. Select another to see ${context}.`;\n}\n\nexport function getUrlForExploration(exploration: TraceExploration) {\n  const params = sceneUtils.getUrlState(exploration);\n  return getUrlForValues(params);\n}\n\nexport function getUrlForValues(values: SceneObjectUrlValues) {\n  return urlUtil.renderUrl(EXPLORATIONS_ROUTE, values);\n}\n\nexport function getDataSource(exploration: TraceExploration) {\n  return sceneGraph.interpolate(exploration, VAR_DATASOURCE_EXPR);\n}\n\nexport const getFilterSignature = (filter: AdHocVariableFilter) => {\n  return `${filter.key}${filter.operator}${filter.value}`;\n};\n\nexport function getAttributesAsOptions(attributes: string[]) {\n  return attributes.map((attribute) => ({ label: attribute, value: attribute }));\n}\n\nexport function getLabelKey(frame: DataFrame) {\n  const labels = frame.fields.find((f) => f.type === 'number')?.labels;\n\n  if (!labels) {\n    return 'No labels';\n  }\n\n  const keys = Object.keys(labels);\n  if (keys.length === 0) {\n    return 'No labels';\n  }\n\n  return keys[0].replace(/\"/g, '');\n}\n\nexport function getLabelValue(frame: DataFrame, labelName?: string) {\n  const labels = frame.fields.find((f) => f.type === 'number')?.labels;\n\n  if (!labels) {\n    return 'No labels';\n  }\n\n  const keys = Object.keys(labels).filter((k) => k !== 'p'); // remove the percentile label\n  if (keys.length === 0) {\n    return 'No labels';\n  }\n\n  return labels[labelName || keys[0]].replace(/\"/g, '');\n}\n\nexport function getGroupByVariable(scene: SceneObject): CustomVariable {\n  const variable = sceneGraph.lookupVariable(VAR_GROUPBY, scene);\n  if (!(variable instanceof CustomVariable)) {\n    throw new Error('Group by variable not found');\n  }\n  return variable;\n}\n\nexport function getSpanListColumnsVariable(scene: SceneObject): CustomVariable {\n  const variable = sceneGraph.lookupVariable(VAR_SPAN_LIST_COLUMNS, scene);\n  if (!(variable instanceof CustomVariable)) {\n    throw new Error('Span list columns variable not found');\n  }\n  return variable;\n}\n\nexport function getLatencyThresholdVariable(scene: SceneObject): CustomVariable {\n  const variable = sceneGraph.lookupVariable(VAR_LATENCY_THRESHOLD, scene);\n  if (!(variable instanceof CustomVariable)) {\n    throw new Error('Latency threshold variable not found');\n  }\n  return variable;\n}\n\nexport function getLatencyPartialThresholdVariable(scene: SceneObject): CustomVariable {\n  const variable = sceneGraph.lookupVariable(VAR_LATENCY_PARTIAL_THRESHOLD, scene);\n  if (!(variable instanceof CustomVariable)) {\n    throw new Error('Partial latency threshold variable not found');\n  }\n  return variable;\n}\n\nexport function getMetricVariable(scene: SceneObject): CustomVariable {\n  const variable = sceneGraph.lookupVariable(VAR_METRIC, scene);\n  if (!(variable instanceof CustomVariable)) {\n    throw new Error('Metric variable not found');\n  }\n  return variable;\n}\n\nexport function getFiltersVariable(scene: SceneObject): AdHocFiltersVariable {\n  const variable = sceneGraph.lookupVariable(VAR_FILTERS, scene);\n  if (!(variable instanceof AdHocFiltersVariable)) {\n    throw new Error('Filters variable not found');\n  }\n  return variable;\n}\n\nexport function getHomeFilterVariable(scene: SceneObject): AdHocFiltersVariable {\n  const variable = sceneGraph.lookupVariable(VAR_HOME_FILTER, scene);\n  if (!(variable instanceof AdHocFiltersVariable)) {\n    throw new Error('Home filter variable not found');\n  }\n  return variable;\n}\n\nexport function getDatasourceVariable(scene: SceneObject): DataSourceVariable {\n  const variable = sceneGraph.lookupVariable(VAR_DATASOURCE, scene);\n  if (!(variable instanceof DataSourceVariable)) {\n    throw new Error('Datasource variable not found');\n  }\n  return variable;\n}\n\nexport function getCurrentStep(scene: SceneObject): number | undefined {\n  const data = sceneGraph.getData(scene).state.data;\n  const targetQuery = data?.request?.targets[0];\n  return targetQuery ? (targetQuery as SceneDataQuery).step : undefined;\n}\n\nexport function shouldShowSelection(tab?: ActionViewType): boolean {\n  return tab === 'comparison' || tab === 'traceList';\n}\n\nexport function getMetricValue(scene: SceneObject) {\n  return getMetricVariable(scene).useState().value;\n}\n\nexport function fieldHasEmptyValues(data: SceneDataState) {\n  return data?.data?.series[0].fields?.some((v) => v.values.every((e) => e === undefined)) ?? false;\n}\n\nexport const isNumber = /^-?\\d+\\.?\\d*$/;\n\nexport const formatLabelValue = (value: string) => {\n  if (!isNumber.test(value) && typeof value === 'string' && !value.startsWith('\"') && !value.endsWith('\"')) {\n    return `\"${value}\"`;\n  }\n  return value;\n};\n"],"names":["reportAppInteraction","page","action","properties","reportInteraction","pluginJson","replace","createInteractionName","USER_EVENTS_PAGES","analyse_traces","home","common","USER_EVENTS_ACTIONS","action_view_changed","breakdown_group_by_changed","breakdown_add_to_filters_clicked","comparison_add_to_filters_clicked","select_attribute_in_comparison_clicked","layout_type_changed","start_investigation","stop_investigation","open_trace","open_in_explore_clicked","add_to_investigation_clicked","span_list_columns_changed","homepage_initialized","panel_row_clicked","explore_traces_clicked","read_documentation_clicked","filter_changed","metric_changed","new_filter_added_manually","app_initialized","global_docs_link_clicked","metric_docs_link_clicked","feedback_link_clicked","map","webpackContext","req","id","webpackContextResolve","__webpack_require__","o","e","Error","code","keys","Object","resolve","module","exports","GrotNotFound","width","height","show404","theme","useTheme2","x","y","throttleInterval","mousePosition","setMousePosition","useState","useEffect","updateMousePosition","throttle","event","clientX","clientY","window","addEventListener","removeEventListener","useMousePosition","styles","useStyles2","getStyles","SVG","src","isDark","className","svg","displayName","xPos","yPos","innerWidth","innerHeight","heightRatio","widthRatio","rotation","getIntermediateValue","translation","css","transform","transformOrigin","transition","display","ratio","start","end","EmptyState","message","remedyMessage","imgWidth","padding","div","container","data-testid","Stack","direction","alignItems","gap","Text","textAlignment","variant","remedy","Icon","name","justifyContent","flexDirection","marginBottom","spacing","EmptyStateScene","SceneObjectBase","model","Component","LoadingStateScene","component","SkeletonTheme","baseColor","colors","emphasize","background","secondary","highlightColor","borderRadius","shape","radius","default","fadeIn","keyframes","opacity","label","animationName","animationDelay","animationTimingFunction","animationDuration","animationFillMode","ErrorStateScene","Alert","title","severity","Search","props","searchQuery","onSearchQueryChange","Field","searchField","Input","placeholder","prefix","value","onChange","ByFrameRepeater","renderFilteredData","filtered","series","length","this","performRepeat","state","body","setState","children","SceneFlexItem","groupSeriesBy","data","groupBy","groupedData","reduce","acc","key","fields","find","f","type","FieldType","number","labels","push","newSeries","frames","sort","a","b","localeCompare","mainFrame","frame","field","values","slice","forEach","sortDataFrame","newChildren","getGroupByVariable","getValueText","frameIndex","filter","sum","vSum","v","layoutChild","getLayoutChild","super","evt","currentTarget","onSearchQueryChangeDebounced","debounce","sceneGraph","getData","doesQueryMatchDataFrameLabels","addActivationHandler","_subs","add","subscribeToState","LoadingState","Done","Streaming","EMPTY_STATE_ERROR_MESSAGE","EMPTY_STATE_ERROR_REMEDY_MESSAGE","publishEvent","EventTimeseriesDataReceived","SceneCSSGridLayout","errors","SkeletonComponent","newState","prevState","flexGrow","repeat","getSkeletonStyles","Array","_","i","itemContainer","header","Skeleton","count","yAxis","yAxisItem","xAxis","xAxisItem","gridTemplateColumns","GRID_TEMPLATE_COLUMNS","gridAutoRows","rowGap","columnGap","backgroundColor","primary","border","marginTop","dataFrame","pattern","trim","regex","RegExp","some","test","barsPanelConfig","PanelBuilders","timeseries","setOption","showLegend","setCustomFieldConfig","DrawStyle","Bars","mode","StackingMode","Normal","setOverrides","overrides","matchFieldsWithNameByRegex","overrideColor","fixedColor","TooltipDisplayMode","Multi","generateMetricsQuery","metric","groupByKey","extraFilters","groupByStatus","filters","VAR_FILTERS_EXPR","ALL","metricFn","groupByAttrs","join","metricByWithStatus","tagKey","refId","query","queryType","tableType","limit","spss","UNIT_STEPS","Math","log10","unit","microseconds","ofPrevious","formatDuration","duration","primaryUnit","secondaryUnit","_dropWhile","index","_round","primaryUnitString","floor","secondaryValue","round","secondaryUnitString","getStepForTimeRange","scene","dataPoints","sceneTimeRange","getTimeRange","from","unix","to","dur","asSeconds","StepQueryRunner","SceneQueryRunner","_onActivateStep","step","maxDataPoints","queries","newStep","constructor","bind","histogramPanelConfig","heatmap","show","axisLabel","scheme","yBucketToDuration","yValue","buckets","multiplier","rawValue","isNaN","toFixed","DATABASE_CALLS_KEY","primarySignalOptions","operator","description","getSignalForKey","option","AddToFiltersAction","onClick","variable","getFiltersVariable","labelKey","labelName","getLabelValue","addToFilters","filterExistsForKey","Button","size","fill","icon","filtersWithoutNew","computeHighestDifference","baselineField","selectionField","maxDifference","maxDifferenceIndex","diff","abs","getDefaultSelectionForMetric","HighestDifferencePanel","_onActivate","getAttribute","getValue","valueField","onAddToFilters","attribute","differenceContainer","fontSize","differenceValue","fontWeight","textAlign","color","text","textWrap","whiteSpace","overflow","textOverflow","panel","filterExists","undefined","BaselineColor","SelectionColor","getFrameName","df","panels","getTitle","actionsFn","existingGridItem","dataNode","SceneDataNode","$data","getPanelConfig","setTitle","setData","actions","setHeaderActions","gridItem","SceneCSSGridItem","build","barchart","setMax","matchFieldsWithName","overrideCustomFieldConfig","AxisPlacement","Hidden","overrideUnit","buildHistogramQuery","DurationComparisonControl","selection","startInvestigation","byServiceScene","getTraceByServiceScene","shouldShowSelection","actionView","setActionView","getMetricValue","wrapper","typography","bodySmall","x0_5","isDisabled","tooltip","disabled","exemplarsTransformations","locationService","topic","DataTopic","Annotations","source","pipe","traceIDField","config","links","url","stopPropagation","parentAnchorHref","target","parentElement","href","indexOf","traceId","split","partial","REDPanel","isDuration","getMetricVariable","traceExploration","getTraceExplorationScene","SceneDataTransformer","datasource","explorationDS","transformations","getVizPanel","yBuckets","parent","setHoverHeader","extendPanelContext","vizPanel","context","onSelectRange","args","rawSelection","newSelection","raw","timeRange","yFrom","yTo","onUserUpdateSelection","SceneFlexLayout","getHistogramVizPanel","getRateOrErrorVizPanel","setDisplayMode","setColor","buildSelectionAnnotation","xSel","ySel","arrayToDataFrame","time","xMin","xMax","timeEnd","yMin","yMax","isRegion","fillOpacity","lineWidth","lineStyle","newData","fieldHasEmptyValues","getYBuckets","annotations","minDuration","minBucket","getMinimumsForDuration","getLatencyThresholdVariable","changeValueTo","getLatencyPartialThresholdVariable","Loading","isEqual","subtitle","headerContainer","titleContainer","titleRadioWrapper","RadioButtonList","options","span","s","parseFloat","slowestBuckets","weak","borderColor","fontWeightBold","margin","ShareExplorationAction","exploration","origin","useLocation","setTooltip","ToolbarButton","navigator","clipboard","writeText","getUrlForExploration","setTimeout","labelOrder","SpanListColumnsSelector","opt","useMemo","curr","startsWith","group","Select","toString","isMulti","isClearable","virtualized","minWidth","SpanListScene","setupTransformations","nameField","TableCellDisplayMode","Custom","cellComponent","traceIdField","spanIdField","rowIndex","spanId","traceExplorationScene","Link","getLinkToExplore","custom","cellOptions","updatePanel","NotStarted","dataState","table","builder","getDataSource","exploreState","JSON","stringify","range","toURLRange","panelsState","trace","subUrl","appSubUrl","urlUtil","renderUrl","panes","schemaVersion","columns","getSpanListColumnsVariable","sceneData","attributes","toOption","link","cursor","maxWidth","textDecoration","h6","row","j","rowItem","position","SpansScene","updateBody","nestedSetLeft","parseInt","intValue","Value","int_value","nestedSetRight","TreeNode","addSpan","left","min","right","max","spans","addChild","node","isChild","findMatchingChild","nodeName","child","serviceName","operationName","traceID","createNode","serviceNameAttr","stringValue","string_value","svcName","resetLeftRight","t","Number","MAX_SAFE_INTEGER","MIN_SAFE_INTEGER","c","ROOT_SPAN_ID","StructureTabScene","loading","merged","traces","tree","spanSets","traceStartTime","startTimeUnixNano","ss","s1","s2","curNode","newNode","mergeTraces","parse","countSpans","wrap","getPanels","minHeight","getPanel","buildData","getTrace","traceName","createDataFrame","other","references","string","spanID","parentSpanId","startTime","statusCode","erroredSpans","refType","durationNanos","buildQuery","filterStreamingProgressTransformations","metricQuery","selectionQuery","VAR_LATENCY_PARTIAL_THRESHOLD_EXPR","VAR_LATENCY_THRESHOLD_EXPR","isLoading","emptyMsg","tabName","structureDisplayName","noDataMessage","longText","actionContainer","LinkButton","toLowerCase","traceViewList","x1","marginLeft","GroupBySelector","radioAttributes","showAll","selectQuery","setSelectQuery","availableWidth","setAvailableWidth","controlsContainer","useRef","metricValue","useResizeObserver","ref","onResize","element","current","clientWidth","radioOptions","radioOptionsWidth","op","checks","SPAN_ATTR","RESOURCE_ATTR","textWidth","measureText","otherAttrOptions","ops","ro","filteredOptions","getModifiedSelectOptions","ignoredAttributes","includes","defaultValue","showAllOption","defaultOnChangeValue","RadioButtonGroup","selected","newSelected","select","onInputChange","onCloseMenu","maxOptions","queryLowerCase","tag","LayoutSwitcher","Selector","active","onLayoutChange","layout","layouts","findIndex","linesPanelConfig","AddToInvestigationButton","getQueries","getContext","datasourceUid","interpolate","VAR_DATASOURCE_EXPR","dsUid","queryRunner","findObject","isQueryRunner","q","labelValue","ctx","uid","location","logoPath","ADD_TO_INVESTIGATION_MENU_TEXT","ADD_TO_INVESTIGATION_MENU_DIVIDER_TEXT","ADD_TO_INVESTIGATION_MENU_GROUP_TEXT","PanelMenu","addItem","item","setItems","items","iconClassName","getExploreHref","onExploreClick","VizPanelMenu","addToInvestigationButton","menu","getInvestigationLink","existingMenuItems","existingAddToInvestigationLink","onAddToInvestigationClick","subscribeToAddToInvestigation","activate","getCurrentStep","addToInvestigations","getPluginLinkExtensions","extensionPointId","extensions","buildNormalLayout","$behaviors","maxima","Map","eventSub","subscribeToEvent","payload","set","findAllObjects","VizPanel","clearFieldConfigCache","fieldConfig","merge","cloneDeep","defaults","updateTimeseriesAxis","unsubscribe","reduceField","reducers","ReducerID","calcs","setUnit","templateColumns","autoRows","isLazy","status","formatLabelValue","setMenu","AttributesDescription","tags","infoFlex","tagsFlex","style","AttributesBreakdownScene","setBody","onReferencedVariableValueChanged","radioAttributesResource","onAddToFiltersClick","_variableDependency","VariableDependencyConfig","variableNames","VAR_FILTERS","VAR_METRIC","ignore","content","paddingTop","controls","controlsRight","scope","marginRight","controlsLeft","justifyItems","setScope","RESOURCE","filterType","filteredAttributes","attr","SPAN","concat","radioAttributesSpan","getDescription","getAttributesAsOptions","BreakdownScene","comparisonQuery","selector","fromTimerange","toTimerange","buildAttributeComparison","attributeSeries","d","splitFrames","getLabel","InspectAttributeAction","AttributesComparisonScene","updateData","groupedFrames","groupFrameListByAttribute","entries","frameGroupToDataframe","aCompare","hasAllValue","getMetricFunction","compareQuery","durString","getTheme","visualization","getColorByName","numberField","nonInternalKey","newFrame","valueNameField","val","baselineTotal","getValueForMetaType","selectionTotal","metaType","currentValue","ComparisonScene","tracesByService","actionViewsDefinitions","getScene","TabsBarScene","breakpoints","up","md","top","zIndex","metricScene","tracesCount","Box","TabsBar","tab","Tab","onChangeTab","counter","MiniREDPanel","getDurationVizPanel","getRateOrErrorPanel","maxHeight","MINI_PANEL_HEIGHT","flex","clickable","input","radioButton","selectMetric","onChangeMetricFunction","TracesByServiceScene","metricVariable","updateQueryRunner","selectionFrom","getDatasourceVariable","updateAttributes","actionViewDef","buildGraphScene","ds","getDataSourceSrv","get","__sceneObject","getTagKeys","then","tagKeys","l","getUrlState","updateFromUrl","_urlSync","performBrowserHistoryAction","oldAction","newAction","$timeRange","timeRangeFromSelection","spanListTransformations","SceneObjectUrlSyncConfig","Tooltip","MetricTypeTooltip","placement","interactive","hand","button","paddingBottom","MAIN_PANEL_HEIGHT","typeQuery","SceneTimeRange","dateTime","secondaryPanel","tertiaryPanel","behaviors","sync","DashboardCursorSync","Crosshair","ySizing","desc","indexByName","Duration","TraceViewPanelScene","panelContainer","service1","bar1","service2","bar2","service3","bar3","service4","bar4","service5","bar5","service6","bar6","TraceDrawerScene","FilterRenderer","isWip","keyQuery","setKeyQuery","valueQuery","setValueQuery","operators","_getOperators","updateKeys","isKeysLoading","formatKeys","_getKeys","keyOptions","valueOptions","keyAutoFocus","keySelect","BaseSelect","_updateFilter","autoFocus","openMenuOnFocus","onOpenMenu","valueAutoFocus","valueSelect","isValuesLoading","sortValues","_getValuesFor","allowCustomValue","readOnly","aria-label","removeButton","_removeFilter","resourceAttributes","k","spanAttributes","intrinsicAttributes","control","components","IndicatorsContainer","IndicatorSeparator","lineHeight","boxSizing","boxShadow","paddingLeft","paddingRight","AddFilter","otherFiltersLength","_wip","addFilterBar","_addWip","PrimarySignalRenderer","primarySignal","GroupHeading","heading","weight","onChangePrimarySignal","role","borderLeft","borderBottom","MetricSelect","FilterSetRenderer","primarySignalOption","primarySignalFilter","getFilterSignature","otherFilters","idx","React","clearFilters","tooltipPlacement","FilterByVariable","AdHocFiltersVariable","initialFilters","hide","VariableHide","hideLabel","expressionBuilder","renderTraceQLLabelFilters","expr","isNumber","endsWith","renderFilter","compositeVersion","process","TraceExploration","topScene","lookupVariable","VAR_DATASOURCE","localStorage","setItem","DATASOURCE_LS_KEY","oldState","updateFiltersWithPrimarySignal","newSignal","oldSignal","signal","filtersVar","newFilter","unshift","stateUpdate","CustomVariable","closeDrawer","initialDS","$variables","SceneVariableSet","variables","DataSourceVariable","pluginId","hideVariable","VAR_GROUPBY","defaultToAll","VAR_SPAN_LIST_COLUMNS","VAR_LATENCY_THRESHOLD","VAR_LATENCY_PARTIAL_THRESHOLD","SceneTimePicker","SceneRefreshPicker","TraceExplorationScene","drawerScene","bodyContainer","menuVisible","setMenuVisible","dsVariable","filtersVariable","Menu","Item","ariaLabel","datasourceLabel","PreviewTooltip","preview","Badge","Dropdown","overlay","onVisibleChange","helpIcon","Drawer","onClose","canvas","flexWrap","AttributePanelRow","labelTitle","valueTitle","rowHeader","actionText","actionIcon","ErroredServicesRows","valuesField","getUrl","params","EXPLORATIONS_ROUTE","getTotalErrs","SlowestTracesRows","durField","sortedByDuration","sortedFields","traceServiceField","traceNameField","console","error","ROUTES","Explore","getDuration","durationField","SlowestServicesRows","AttributePanelRows","AttributePanelScene","getIcon","medium","borderTopLeftRadius","borderTopRightRadius","titleText","AttributePanel","exemplars","renderDurationPanel","getNoDataMessage","getErrorMessage","tracesContainer","rowLeft","rowRight","LightModeRocket","xmlns","viewBox","path","DarkModeRocket","HeaderScene","headerTitleContainer","headerActions","documentationLink","subHeader","variablesAndControls","getTagKeysProvider","dsVar","datasource_","DataSourceWithBackend","isArray","EVENT_ATTR","EVENT_INTRINSIC","ignoredAttributesHomeFilter","getHomeScene","navigate","useNavigate","filterVariable","getHomeFilterVariable","h2","p","h4","Home","buildPanels","HOMEPAGE_FILTERS_LS_KEY","newFilters","pf","renderedFilters","VAR_HOME_FILTER","getAncestor","newTracesExploration","newHome","sceneUtils","targetQuery","request","targets","every"],"sourceRoot":""}