{"version":3,"file":"927.js","mappings":"gRAgBA,MAYA,EAZ6B,K,IAGJA,EAAvB,MAAMC,EAAwCD,QAAvBA,EAAuBA,OAAvBA,EAAAA,8BAAuBA,IAAvBA,EAAAA,6BAAuBA,GAAvBA,EAAAA,EAAAA,kCAAAA,IAAAA,EAAAA,EAA+B,CAAC,EACjDE,GAAkBC,EAAAA,EAAAA,sBAElBC,EAAYC,aAAaC,QAAQC,EAAAA,KAAsB,IACtDC,IAAeC,EAAAA,EAAAA,WAASC,EAAAA,EAAAA,IAAqBR,EAAiBE,EA+CvE,SAA2BO,GACzB,MAAMC,EAASC,EAAqBC,UAAUH,GAC9C,GAAKC,EAAOG,QAIZ,OAAOH,EAAOI,KAAKC,OACrB,CAtDkFC,CAAkBjB,EAAekB,kBAEjH,OAAO,kBAACC,EAAAA,CAAqBZ,YAAaA,G,EAKrC,SAASY,GAAqB,YAAEZ,IACrC,MAAOa,EAAeC,GAAoBC,IAAAA,UAAe,GAUzD,OARAC,EAAAA,EAAAA,YAAU,KACHH,IACHC,GAAiB,IAEjBG,EAAAA,EAAAA,IAAqBC,EAAAA,GAAkBC,OAAQC,EAAAA,GAAoBD,OAAOE,iBAC5E,GACC,CAACrB,EAAaa,IAEZA,EAKH,kBAACS,EAAAA,GAAsBA,CAACC,MAAOvB,EAAawB,iBAAiB,EAAMC,2BAA2B,GAC5F,kBAACzB,EAAY0B,UAAS,CAACC,MAAO3B,KALzB,IAQX,CAEA,MAAM4B,EAA4BC,EAAAA,GAAAA,OAAS,CACzCC,IAAKD,EAAAA,GAAAA,SACLE,SAAUF,EAAAA,GAAAA,SACVG,MAAOH,EAAAA,GAAAA,WAGHxB,EAAuBwB,EAAAA,GAAAA,OAAS,CACpCpB,QAASoB,EAAAA,GAAAA,MAAQD,I","sources":["webpack://grafana-exploretraces-app/./pages/Explore/TraceExplorationPage.tsx"],"sourcesContent":["import React, { useEffect, useState } from 'react';\nimport z from 'zod';\n\nimport { newTracesExploration } from '../../utils/utils';\nimport { TraceExploration } from './TraceExploration';\nimport { DATASOURCE_LS_KEY } from '../../utils/shared';\nimport { reportAppInteraction, USER_EVENTS_ACTIONS, USER_EVENTS_PAGES } from '../../utils/analytics';\nimport { UrlSyncContextProvider } from '@grafana/scenes';\nimport { AdHocVariableFilter } from '@grafana/data';\n\nimport {\n  // @ts-ignore new API that is not yet in stable release\n  useSidecar_EXPERIMENTAL,\n  useLocationService,\n} from '@grafana/runtime';\n\nconst TraceExplorationPage = () => {\n  // We are calling this conditionally, but it will depend on grafana version and should not change in runtime so we\n  // can ignore the hook rule here\n  const sidecarContext = useSidecar_EXPERIMENTAL?.() ?? {};\n  const locationService = useLocationService();\n\n  const initialDs = localStorage.getItem(DATASOURCE_LS_KEY) || '';\n  const [exploration] = useState(newTracesExploration(locationService, initialDs, getInitialFilters(sidecarContext.initialContext)));\n\n  return <TraceExplorationView exploration={exploration} />;\n};\n\nexport default TraceExplorationPage;\n\nexport function TraceExplorationView({ exploration }: { exploration: TraceExploration }) {\n  const [isInitialized, setIsInitialized] = React.useState(false);\n\n  useEffect(() => {\n    if (!isInitialized) {\n      setIsInitialized(true);\n\n      reportAppInteraction(USER_EVENTS_PAGES.common, USER_EVENTS_ACTIONS.common.app_initialized);\n    }\n  }, [exploration, isInitialized]);\n\n  if (!isInitialized) {\n    return null;\n  }\n\n  return (\n    <UrlSyncContextProvider scene={exploration} updateUrlOnInit={true} createBrowserHistorySteps={true}>\n      <exploration.Component model={exploration} />\n    </UrlSyncContextProvider>\n  );\n}\n\nconst AdHocVariableFilterSchema = z.object({\n  key: z.string(),\n  operator: z.string(),\n  value: z.string(),\n});\n\nconst InitialFiltersSchema = z.object({\n  filters: z.array(AdHocVariableFilterSchema),\n});\n\n/** Because the context comes from a different app plugin we cannot really count on it being the correct type even if\n * it was typed, so it is safer to do runtime parsing here. It also can come from different app extensions and at this\n * point we don't know which, but we also have implemented only one so far it's a fair guess.\n *\n * At this point there is no smartness. What ever we got from the other app we use as is. Ideally there should be some\n * normalization of the filters or smart guesses when there are differences.\n * @param context\n */\nfunction getInitialFilters(context: unknown): AdHocVariableFilter[] | undefined {\n  const result = InitialFiltersSchema.safeParse(context);\n  if (!result.success) {\n    return undefined;\n  }\n\n  return result.data.filters;\n}\n"],"names":["useSidecar_EXPERIMENTAL","sidecarContext","locationService","useLocationService","initialDs","localStorage","getItem","DATASOURCE_LS_KEY","exploration","useState","newTracesExploration","context","result","InitialFiltersSchema","safeParse","success","data","filters","getInitialFilters","initialContext","TraceExplorationView","isInitialized","setIsInitialized","React","useEffect","reportAppInteraction","USER_EVENTS_PAGES","common","USER_EVENTS_ACTIONS","app_initialized","UrlSyncContextProvider","scene","updateUrlOnInit","createBrowserHistorySteps","Component","model","AdHocVariableFilterSchema","z","key","operator","value"],"sourceRoot":""}