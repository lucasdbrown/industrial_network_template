name: Setup external Docker networks for CI
description: |
  Creates all external:true networks found in the merged Compose config,
  choosing / validating subnets so static ipv4_address assignments work.
runs:
  using: composite
  steps:
    # Install PyYAML
    - shell: bash
      run: python3 -m pip install --user pyyaml

    # Write helper script & run it
    - shell: bash
      run: |
        set -euo pipefail
        cat > _setup_nets.py <<'PY'
        import os, sys, subprocess, hashlib, ipaddress, yaml
        USER_MAP = {}
        if os.path.exists(".ci/networks.yml"):
            with open(".ci/networks.yml") as f:
                USER_MAP = yaml.safe_load(f) or {}

        # Pick up any override file written earlier in the job
        files = ["docker-compose.yml"]
        if os.path.exists("docker-compose.ci.override.yml"):
            files += ["docker-compose.ci.override.yml"]
        # Render merged compose
        cmd = ["docker", "compose"]
        for f in files:
            cmd += ["-f", f]
        cmd += ["config"]
        merged = subprocess.check_output(cmd, text=True)
        data = yaml.safe_load(merged) or {}
        nets_cfg = data.get("networks", {}) or {}
        services = data.get("services", {}) or {}

        externals = {}
        for key, cfg in nets_cfg.items():
            if isinstance(cfg, dict) and cfg.get("external"):
                name = cfg.get("name", key)
                externals[name] = {"ips": set()}
        # gather static IPs
        for scfg in services.values():
            nets = scfg.get("networks", {}) or {}
            if isinstance(nets, list):
                nets = {n:{} for n in nets}
            for nkey, nopts in nets.items():
                if nkey in nets_cfg and nets_cfg[nkey].get("external"):
                    name = nets_cfg[nkey].get("name", nkey)
                    if isinstance(nopts, dict):
                        ip = nopts.get("ipv4_address")
                        if ip:
                            externals[name]["ips"].add(ip)

        def choose_subnet(name, ips):
            if name in USER_MAP and USER_MAP[name]:
                return USER_MAP[name]
            if ips:
                octs = [list(map(int, i.split("."))) for i in ips]
                a,b,c,_ = octs[0]
                if all(o[:3]==[a,b,c] for o in octs):
                    return f"{a}.{b}.{c}.0/24"
                if all(o[:2]==[a,b] for o in octs):
                    return f"{a}.{b}.0.0/16"
                return f"{a}.0.0.0/8"
            h = int(hashlib.sha1(name.encode()).hexdigest(),16)
            third = 1+(h%254)
            return f"172.31.{third}.0/24"

        for name, meta in externals.items():
            subnet = choose_subnet(name, meta["ips"])
            if subprocess.call(["docker","network","inspect",name],
                               stdout=subprocess.DEVNULL,
                               stderr=subprocess.DEVNULL)==0:
                print(f"{name}: exists")
                continue
            print(f"{name}: creating with subnet {subnet}")
            subprocess.check_call(["docker","network","create",
                                   "--subnet",subnet,name])
        PY
        python3 _setup_nets.py
