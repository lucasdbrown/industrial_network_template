name: Multi-Network Compose CI

permissions:
  contents: read

on:
  push:
    branches: [ '*' ]
  pull_request:
    branches: [ main ]

jobs:
  # Always test network/
  test-network:
    name: "Test: network/"
    runs-on: ubuntu-latest
    defaults:
      run:
        working-directory: network
    steps:
      - uses: actions/checkout@v3
      - uses: docker/setup-buildx-action@v2
      - name: Validate docker-compose.yml
        run: docker compose config --quiet
      - name: Build Docker services
        run: docker compose build --parallel
      - name: Start the network
        run: docker compose up -d
      - name: Verify containers are healthy
        run: |
          echo "Container statuses:"
          docker compose ps
          FAILED=$(docker compose ps --quiet \
            | xargs docker inspect --format '{{.State.Status}} {{.Id}}' \
            | awk '$1 != "running" { print $2 }')
          if [ -n "$FAILED" ]; then
            echo "::error ::Containers failed to start or died: $FAILED"
            exit 1
          fi
      - name: Tear down
        if: always()
        run: docker compose down --remove-orphans

  # Detect which folders changed for conditional downstream jobs
  changes:
    runs-on: ubuntu-latest
    outputs:
      enterprise: ${{ steps.filter.outputs.enterprise }}
      logging: ${{ steps.filter.outputs.logging }}
      industrial: ${{ steps.filter.outputs.industrial }}
      idmz: ${{ steps.filter.outputs.idmz }}
    steps:
      - uses: actions/checkout@v3
      - id: filter
        uses: dorny/paths-filter@v3
        with:
          filters: |
            enterprise:
              - 'enterprise/**'
            logging:
              - 'logging/**'
            industrial:
              - 'industrial/**'
            idmz:
              - 'idmz/**'

  # Conditionally test other networks
  test-enterprise:
    name: "Test: enterprise/"
    needs: [test-network, changes]
    if: needs.changes.outputs.enterprise == 'true'
    runs-on: ubuntu-latest
    defaults:
      run:
        working-directory: enterprise
    steps:
      - uses: actions/checkout@v3
      - uses: docker/setup-buildx-action@v2
      - name: Show folder triggered
        run: echo "Testing enterprise network because of changes in enterprise/"
      - name: Validate docker-compose.yml
        run: docker compose config --quiet
      - name: Build Docker services
        run: docker compose build --parallel
      - name: Start the network
        run: docker compose up -d
      - name: Verify containers are healthy
        run: |
          echo "Container statuses:"
          docker compose ps
          FAILED=$(docker compose ps --quiet \
            | xargs docker inspect --format '{{.State.Status}} {{.Id}}' \
            | awk '$1 != "running" { print $2 }')
          if [ -n "$FAILED" ]; then
            echo "::error ::Containers failed to start or died: $FAILED"
            exit 1
          fi
      - name: Tear down
        if: always()
        run: docker compose down --remove-orphans

  test-logging:
    name: "Test: logging/"
    needs: [test-network, changes]
    if: needs.changes.outputs.logging == 'true'
    runs-on: ubuntu-latest
    defaults:
      run:
        working-directory: logging
    steps:
      - uses: actions/checkout@v3
      - uses: docker/setup-buildx-action@v2
      - name: Show folder triggered
        run: echo "Testing logging network because of changes in logging/"
      - name: Validate docker-compose.yml
        run: docker compose config --quiet
      - name: Build Docker services
        run: docker compose build --parallel
      - name: Start the network
        run: docker compose up -d
      - name: Verify containers are healthy
        run: |
          echo "Container statuses:"
          docker compose ps
          FAILED=$(docker compose ps --quiet \
            | xargs docker inspect --format '{{.State.Status}} {{.Id}}' \
            | awk '$1 != "running" { print $2 }')
          if [ -n "$FAILED" ]; then
            echo "::error ::Containers failed to start or died: $FAILED"
            exit 1
          fi
      - name: Tear down
        if: always()
        run: docker compose down --remove-orphans

  test-industrial:
    name: "Test: industrial/"
    needs: [test-network, changes]
    if: needs.changes.outputs.industrial == 'true'
    runs-on: ubuntu-latest
    defaults:
      run:
        working-directory: industrial
    steps:
      - uses: actions/checkout@v3
      - uses: docker/setup-buildx-action@v2

      - name: Ensure required external Docker networks exist
        run: |
          docker network create site_operations_network || true
          docker network create utilities_network || true
          docker network create assembly_network || true
          docker network create packaging_network || true
      # Write the override file that disables industrial-openplc
      - name: Write Compose CI override (disable industrial-openplc)
        run: |
          cat > docker-compose.ci.override.yml <<'EOF'
          version: "3"
          services:
            industrial-openplc:
              entrypoint: ["false"]
          EOF
      - name: Show folder triggered
        run: echo "Testing industrial network because of changes in industrial/"
      - name: Validate docker-compose.yml
        run: docker compose config --quiet
      - name: Build Docker services
        run: docker compose build --parallel
      - name: Start the network
        run: docker compose up -d
      - name: Verify containers are healthy
        run: |
          echo "Container statuses:"
          docker compose ps
          FAILED=$(docker compose ps --quiet \
            | xargs docker inspect --format '{{.State.Status}} {{.Id}}' \
            | awk '$1 != "running" { print $2 }')
          if [ -n "$FAILED" ]; then
            echo "::error ::Containers failed to start or died: $FAILED"
            exit 1
          fi
      - name: Tear down
        if: always()
        run: docker compose down --remove-orphans

  test-idmz:
    name: "Test: idmz/"
    needs: [test-network, changes]
    if: needs.changes.outputs.idmz == 'true'
    runs-on: ubuntu-latest
    defaults:
      run:
        working-directory: idmz
    steps:
      - uses: actions/checkout@v3
      - uses: docker/setup-buildx-action@v2
      - name: Show folder triggered
        run: echo "Testing IDMZ network because of changes in idmz/"
      - name: Validate docker-compose.yml
        run: docker compose config --quiet
      - name: Build Docker services
        run: docker compose build --parallel
      - name: Start the network
        run: docker compose up -d
      - name: Verify containers are healthy
        run: |
          echo "Container statuses:"
          docker compose ps
          FAILED=$(docker compose ps --quiet \
            | xargs docker inspect --format '{{.State.Status}} {{.Id}}' \
            | awk '$1 != "running" { print $2 }')
          if [ -n "$FAILED" ]; then
            echo "::error ::Containers failed to start or died: $FAILED"
            exit 1
          fi
      - name: Tear down
        if: always()
        run: docker compose down --remove-orphans
